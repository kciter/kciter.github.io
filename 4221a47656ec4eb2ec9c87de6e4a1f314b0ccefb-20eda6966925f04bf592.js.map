{"version":3,"file":"4221a47656ec4eb2ec9c87de6e4a1f314b0ccefb-20eda6966925f04bf592.js","mappings":"8IA6BA,IAnBoBA,IAAkD,IAAjD,MAAEC,EAAK,QAAEC,EAAO,MAAEC,GAAyBH,EAC9D,OACEI,EAAAA,EAAAA,GAACC,EAAS,CAACF,MAAOA,IAChBC,EAAAA,EAAAA,GAACE,EAAK,KACHL,EAAMM,KACJC,GACCA,EAAKC,KAAKC,OAAOC,OAAST,IACxBE,EAAAA,EAAAA,GAACQ,EAAI,CAACC,GAAIL,EAAKC,KAAKC,OAAOC,KAAMG,IAAKN,EAAKC,KAAKC,OAAOC,OACrDP,EAAAA,EAAAA,GAAA,OAAKW,IAAKP,EAAKC,KAAKO,YAAYC,SAChCb,EAAAA,EAAAA,GAACc,EAAK,KAAEV,EAAKC,KAAKO,YAAYG,QAC9Bf,EAAAA,EAAAA,GAAA,aAAQI,EAAKC,KAAKC,OAAOU,UAKzB,EAMhB,MAAMf,GAASgB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,yCAKTlB,GAAKe,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,sIAWLZ,GAAOS,EAAAA,EAAAA,GAAOI,EAAAA,KAAI,CAAAH,OAAA,YAAXD,CAAY,CAAAE,KAAA,SAAAC,OAAA,gpBA2EnBN,GAAKG,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,mE,yDC/GX,MAAME,EAAM1B,IAAiD,IAAD2B,EAAA,IAA/C,SAAEC,EAAQ,MAAET,EAAK,YAAEU,GAAuB7B,EACrD,MAAM,KAAE8B,IAASC,EAAAA,EAAAA,gBAAe,YAY1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAYf,IAA0B,QAArBQ,EAAIG,EAAKG,oBAAY,IAAAN,OAAA,EAAjBA,EAAmBR,OAE9C,OACEf,EAAAA,EAAAA,GAAA+B,EAAAA,SAAA,MACE/B,EAAAA,EAAAA,GAAA,QAAMgC,KAAK,QACXhC,EAAAA,EAAAA,GAAA,aAAQ8B,EAAU,iBAClB9B,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,cAAcd,KAAK,cAAce,QAASN,KACnD5B,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,WAAWE,SAAS,WAAWD,QAASJ,KACjD9B,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,iBAAiBE,SAAS,iBAAiBD,QAASN,KAC7D5B,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,UAAUE,SAAS,UAAUD,QAAQ,aAC9ClC,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,eAAeE,SAAS,eAAeD,QAAQ,eACxDlC,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,YAAYE,SAAS,YAAYD,QAAQ,WAClDlC,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,eAAed,KAAK,eAAee,QAAQ,aACpDlC,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,kBAAkBd,KAAK,kBAAkBe,QAAQ,kBAC1DlC,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,gBAAgBd,KAAK,gBAAgBe,QAASJ,KACvD9B,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,sBAAsBd,KAAK,sBAAsBe,QAASN,KACnE5B,EAAAA,EAAAA,GAAA,QAAMiC,GAAG,WAAWE,SAAS,WAAWD,QAAQ,oCAC/CV,EA6DA,EAIPF,EAAIc,aAAe,CACjBJ,KAAK,KACLK,KAAM,GACNZ,YAAY,IAUd,K","sources":["webpack://kciter.so/./src/components/RelatedPost/index.tsx","webpack://kciter.so/./src/components/SEO/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\ninterface RelatedPostProps {\n  posts: any;\n  current?: string;\n  style?: React.CSSProperties;\n}\n\nconst RelatedPost = ({ posts, current, style }: RelatedPostProps) => {\n  return (\n    <Container style={style}>\n      <Posts>\n        {posts.map(\n          (post: any) =>\n            post.node.fields.slug !== current && (\n              <Post to={post.node.fields.slug} key={post.node.fields.slug}>\n                <img src={post.node.frontmatter.image} />\n                <Title>{post.node.frontmatter.title}</Title>\n                <small>{post.node.fields.date}</small>\n              </Post>\n            )\n        )}\n      </Posts>\n    </Container>\n  );\n};\n\nexport default RelatedPost;\n\nconst Container = styled.div`\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n`;\n\nconst Posts = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  row-gap: 20px;\n  column-gap: 20px;\n\n  @media (max-width: 30rem) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst Post = styled(Link)`\n  img {\n    display: block;\n    height: 140px;\n    object-fit: cover;\n    box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.05);\n\n    @media (max-width: 30rem) {\n      width: 100%;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  position: relative;\n  display: block;\n  transition: all 333ms ease 0s;\n  text-decoration: none;\n\n  @media (max-width: 768px) {\n    margin-top: -12px !important;\n  }\n\n  transform: scale3d(1, 1, 1);\n\n  &::after {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: 8px;\n    transform: scale(1.06);\n    transition: opacity 2s cubic-bezier(0.165, 0.84, 0.44, 1);\n    box-shadow:\n      0 8px 17px 0 rgba(0, 0, 0, 0.2),\n      0 6px 20px 0 rgba(0, 0, 0, 0.15);\n    content: '';\n    opacity: 0;\n    z-index: -1;\n  }\n\n  &:hover {\n    transform: scale3d(1.006, 1.006, 1);\n\n    &::after {\n      opacity: 1;\n    }\n  }\n\n  /* &::before {\n    content: \"\";\n    border-radius: 16px;\n    display: block;\n    position: absolute;\n    z-index: -1;\n    inset: -2px;\n    opacity: 0;\n    transform: scale(0.9);\n    transition: all 333ms ease 0s;\n  }\n\n  &:hover::before {\n    opacity: 1;\n    background: linear-gradient(\n      135deg,\n      rgba(234, 234, 234, 0.7) 0%,\n      rgba(244, 244, 244, 0.7) 100%\n    );\n    transform: scale(1.04);\n  } */\n`;\n\nconst Title = styled.div`\n  margin-top: 12px;\n  /* font-family: serif; */\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 100;\n`;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SEOProps {\n  children?: React.ReactNode;\n  title?: string;\n  description?: string;\n  imagePath?: string;\n}\n\nconst SEO = ({ children, title, description }: SEOProps) => {\n  const { site } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n        }\n      }\n    }\n  `);\n\n  const metaDescription = description || site.siteMetadata.description;\n  const metaTitle = title || site.siteMetadata?.title;\n\n  return (\n    <>\n      <html lang=\"ko\" />\n      <title>{metaTitle} | kciter.so</title>\n      <meta id=\"description\" name=\"description\" content={metaDescription} />\n      <meta id=\"og:title\" property=\"og:title\" content={metaTitle} />\n      <meta id=\"og:description\" property=\"og:description\" content={metaDescription} />\n      <meta id=\"og:type\" property=\"og:type\" content=\"website\" />\n      <meta id=\"og:site_name\" property=\"og:site_name\" content=\"kciter.so\" />\n      <meta id=\"og:locale\" property=\"og:locale\" content=\"ko_KR\" />\n      <meta id=\"twitter:card\" name=\"twitter:card\" content=\"summary\" />\n      <meta id=\"twitter:creator\" name=\"twitter:creator\" content=\"Sunhyoup Lee\" />\n      <meta id=\"twitter:title\" name=\"twitter:title\" content={metaTitle} />\n      <meta id=\"twitter:description\" name=\"twitter:description\" content={metaDescription} />\n      <meta id=\"og:image\" property=\"og:image\" content=\"https://kciter.so/images/og.png\" />\n      {children}\n\n      {/* <Helmet\n        htmlAttributes={{\n          ko: 'ko'\n        }}\n        title={metaTitle}\n        titleTemplate={title ? `%s | kciter.so` : undefined}\n        meta={[\n          {\n            name: `description`,\n            content: metaDescription\n          },\n          {\n            property: `author`,\n            content: `Lee Sun-Hyoup`\n          },\n          {\n            property: `og:title`,\n            content: metaTitle\n          },\n          {\n            property: `og:description`,\n            content: metaDescription\n          },\n          {\n            property: `og:type`,\n            content: `website`\n          },\n          {\n            property: `og:site_name`,\n            content: `kciter.so`\n          },\n          {\n            property: `og:locale`,\n            content: `ko_KR`\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`\n          },\n          {\n            name: `twitter:creator`,\n            content: 'Sunhyoup Lee'\n          },\n          {\n            name: `twitter:title`,\n            content: metaTitle\n          },\n          {\n            name: `twitter:description`,\n            content: metaDescription\n          },\n          {\n            property: `og:image`,\n            content:\n              meta.find((item: any) => item.property === 'og:image')?.content ??\n              'https://kciter.so/images/og.png'\n          }\n        ].concat(meta)}\n      /> */}\n    </>\n  );\n};\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n"],"names":["_ref","posts","current","style","___EmotionJSX","Container","Posts","map","post","node","fields","slug","Post","to","key","src","frontmatter","image","Title","title","date","_styled","target","name","styles","Link","SEO","_site$siteMetadata","children","description","site","useStaticQuery","metaDescription","siteMetadata","metaTitle","React","lang","id","content","property","defaultProps","meta"],"sourceRoot":""}