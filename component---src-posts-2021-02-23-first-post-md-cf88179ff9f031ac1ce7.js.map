{"version":3,"file":"component---src-posts-2021-02-23-first-post-md-cf88179ff9f031ac1ce7.js","mappings":"+NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,4JAA6J,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wLAA8L,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,2LAA4L,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,4IAA6I,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,MAAO,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,MAAOI,EAAAA,cAAoBP,EAAYI,EAAG,CACxhCI,KAAM,6BACNC,IAAK,gCACJ,WAAY,qHACjB,CAKA,UAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECWA,MAAMa,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBR,GAC/B,MAAMS,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfP,EACFA,EAAWS,GAGb,IAAIA,KAAsBT,EACnC,GACA,CAACS,EAAmBT,GAExB,C","sources":["webpack://kciter.so/./src/posts/2021-02-23-first-post.md","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"나는 매사 불성실하고 게으름이 많은 성격이다. 하지 않아도 된다면 안 하는 귀찮음이 몸에 배어있는 모범적이지 못한 성격이다. 이 성격으로 인해 얼마나 많은 것을 놓치고 살았는지 이제 와선 아쉽고 씁쓸하지만, 끝끝내 못 고치는 걸 보니 이것이 내 천성이라 여기며 살고 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이런 우유부단한 성격이지만 사실 작년 한 해 게으름을 극복하기 위해서 꽤 많이 고민했다. 나는 멋진 개발자가 되는 것이 목표였으며 나름 개발자로서 이루고 싶은 꿈도 있었다\\u001d. 게으른 주제에 개발에는 나름 진심이었고 자존심도 강해서 게으름을 이기고 꽤 많은 것을 해냈다. 그러다 보니 지금은 꽤 괜찮은 개발자가 된 것 같다.\"), \"\\n\", React.createElement(_components.p, null, \"문제는 코드를 위해서만 키보드를 두드릴 뿐 내가 겪은 경험을 정리하지 않으니 기억 속에 잊히는 것들이 꽤 많다는 것이다. 나는 운 좋게 많은 경험을 할 수 있었고 덕분에 남들보다 젊은 나이에 다양한 지식을 얻을 수 있었다. 하지만 이런 소중한 경험을 방치했고 결국은 과거에 경험했던 일을 다시 반복하는 사태가 여러 번 발생했다.\"), \"\\n\", React.createElement(_components.p, null, \"어쩌다 보니 수석 개발자가 되어 다른 개발자를 리드해야 하는 입장이 되었다. 이젠 다른 사람을 도와야 하는 입장이 되었으니 게으름을 청산하고 얼리버드가 되는 것도 괜찮을 것 같다고 생각하여 우선 게으름을 극복하기 위해 블로그를 시작하기로 했다.\"), \"\\n\", React.createElement(_components.p, null, \"--\"), \"\\n\", React.createElement(_components.p, null, \"내가 \", React.createElement(_components.a, {\n    href: \"https://medium.com/@kciter\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"블로그 시스템\"), \"을 통해 글을 작성한 것은 지난 2015년 2월이 마지막이다. 지금이 2021년 2월이니 글을 쓴지 벌써 6년이 지났다. 글쓰기가 아직 너무나도 어색하지만, 올해는 반드시 꾸준히 글을 쓰기로 다짐해본다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","_provideComponents","components","React","href","rel","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}