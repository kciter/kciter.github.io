{"version":3,"file":"component---src-posts-2024-04-26-living-with-ai-mdx-fa5fe1e661adb1e3da23.js","mappings":"+NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,WAAY,aACZC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,WAAY,KAAM,KAAMK,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,2CAA4C,MAAO,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,4JAA6J,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,0NAA2N,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,uBAAwBI,EAAAA,cAAoBR,EAAYK,KAAM,CACtwBI,wBAAyB,CACvBC,OAAQ,2CAER,uCAAwC,KAAMF,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,sDAAuD,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,gOAAiO,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,uPAAwP,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,gIAAiI,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,2DAA4D,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,kEACrhC,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWb,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECSA,MAAMc,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBR,GAC/B,MAAMS,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfP,EACFA,EAAWS,GAGb,IAAIA,KAAsBT,EACnC,GACA,CAACS,EAAmBT,GAExB,C","sources":["webpack://kciter.so/./src/posts/2024-04-26-living-with-ai.mdx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"이제 인정할 수 밖에 없다. AI 없는 개발로 돌아갈 수 없다는 것을…\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"확실함 역체감을 보여주는 제품은 성공할 수 밖에 없다. 필자에겐 애플과 ~가 그랬고 이제는 AI 서비스가 추가되었다. ChatGPT, Claude를 비롯한 LLM 서비스와 개발을 위한 Copilot은 그러한 역체감을 제대로 느낄 수 있게 해줌으로서 제품의 가치를 증명했다.\"), \"\\n\", React.createElement(_components.p, null, \"사실 필자는 AI를 그다지 달가워하지 않는다. 이는 지극히 개인적인 이유로, 손수 한땀한땀 코딩하는 재미를 빼앗기는 기분이 들었기 때문이다. 마치 퍼즐을 집는 순간 어디에 둬야할지 알려주는 스포일러를 보는 느낌이다. 물론 이는 단순히 감정적인 이유일 뿐이고 AI가 개발 생산성과 비용 절감에 큰 도움이 된다는 것은 이해하고 있다. 개인의 감상은 언제나 시대의 흐름에 휩쓸려갈 뿐이다.\"), \"\\n\", React.createElement(_components.p, null, \"이제 개발자를 비롯하여 핵심 자산이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">지식</code>\"\n    }\n  }), \"에 있는 지식 노동자들은 AI를 적극적으로 활용할 필요가 있다.\"), \"\\n\", React.createElement(_components.p, null, \"개발자가 이용하는 AI는 크게 프롬프트 기반 LLM, 코드 생성 LLM 두 가지로 나뉜다.\"), \"\\n\", React.createElement(_components.p, null, \"프롬프트 기반 LLM은 모르거나 고민되는 내용을 위해 사용. 고성능 러버덕 디버깅이라 볼 수 있다. 추상적인 무언가를 구체적으로 만들 때 유용하다. 그렇지만 안되는것은 안된다. 학습되지 않은, 전혀 알지 못하는 내용은 해결해줄 수 없다. -> 질문을 잘해서 추론시키는 것은 가능하다. 근데 그정도로 구체적이면 이미 내가 아는거나 마찬가지. -> 무조건적인 신뢰는 안됨. 검색 대용으로 사용 가능\"), \"\\n\", React.createElement(_components.p, null, \"코드 생성 LLM - 일종의 자동완성 기능. 프로젝트 코드의 패턴을 읽어 자동완성해줌. 이미 아는 내용을 빠르게 타이핑할 때 유용하다. 이는 패턴을 이용하므로 반복 작업을 할 때 매우 편함. 많은 곳에 사용되는 유틸 코드등을 만들때도 유용하다. 테스트를 짜는 것도 편함. 그렇지만 이또한 일반적인 내용을 벗어나면 잘 안되는 문제가 있다. 그래도 패턴을 읽어 제안하기 때문에 이미 코드베이스가 있다면 기능 확장에 대해 유용한 경우가 있음\"), \"\\n\", React.createElement(_components.p, null, \"프롬프트 기반 LLM - 어떻게 해결하는 것 인지보다 무엇을 해결할지. 인지적 프롬프팅.\\n코드 생성 LLM - Patternize할것. 내가 원하는 코드의 일부분을 작성할 것. 조금더 정확한것을 원한다면 주석을 이용할 것\"), \"\\n\", React.createElement(_components.p, null, \"오히려 ai가 집중력을 저하시키는 것도 가능 ai랑 노는데 시간을 보낼 수 있고 그러한 유혹을 한다\"), \"\\n\", React.createElement(_components.p, null, \"ai 시대에 개발자에게 중요한 가치. 언어적 능력 맥락을 읽고 적절한 것을 선택할 것. 과학적 능력 디버깅 능력\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}