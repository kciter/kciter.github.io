"use strict";(self.webpackChunkkciter_so=self.webpackChunkkciter_so||[]).push([[2300],{4356:function(n,a,s){s.r(a);var e=s(9128),t=s(9474),p=s(5799);function o(n){const a=Object.assign({p:"p",strong:"strong",span:"span",h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",sup:"sup",section:"section",ol:"ol"},(0,e.R)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"타입은 개발자에게 친숙하면서도 어색할 수 있는 개념이다. 특히 정적 타입 언어를 사용한다면 타입은 땔래야 땔 수 없는 존재다. 타입은 가끔씩 귀찮게 굴 때도 있지만 개발자에게 ",t.createElement(a.strong,null,"막강한 무기"),"가 될 수 있다. ",t.createElement(a.strong,null,"타입은 함수와 데이터가 준수해야 하는 엄격한 계약"),"이며 타입 시스템은 이를 어길 수 없게 만든다."),"\n",t.createElement(a.p,null,"개발자는 타입 시스템 잘 활용하여 더 안정적인 프로그램을 만들거나 코드 중복을 제거하는 것이 가능하다. 반대로 개발자가 타입을 풍부하게 사용하지 않는다면 타입 시스템을 통해 얻을 수 있는 이점을 제대로 누릴 수 없다. 이 글에서 소개하는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">타입 주도 개발</code>'}}),"은 타입 시스템에 대해 공부하기 좋은 방법론이며 이를 통해 로직에 대한 새로운 관점을 익힐 수 있다."),"\n",t.createElement(a.h1,{id:"타입에-대한-재인식"},t.createElement(a.a,{href:"#타입에-대한-재인식"},"타입에 대한 재인식")),"\n",t.createElement(a.p,null,"타입에 대해 깊게 생각해본 적이 없다면 단순히 언어에서 제공되는 원시 타입이나 정의된 클래스만을 생각할 수 있다. 하지만 타입 시스템을 잘 활용하면 좀 더 풍부한 타입을 정의할 수 있다. 앞서 말했듯이 이를 통해 코드의 안정성을 높이거나 코드 중복을 제거할 수 있다. 타입을 잘 활용하는 방법과 타입 주도 개발에 대해 알아보기 전에 타입이 무엇인지 다시 알아보도록하자."),"\n",t.createElement(a.h2,{id:"타입은-집합이다"},t.createElement(a.a,{href:"#타입은-집합이다"},"타입은 집합이다")),"\n",t.createElement(a.p,null,"타입은 어떠한 값이 속할 수 있는 집합이며, 이 집합에 속하는 값은 타입을 준수한다고 말한다. 예를 들어 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입은 정수를 포함하는 집합이며, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">String</code>'}})," 타입은 문자열을 포함하는 집합이다. 예를 들어 표현하면 다음과 같다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin">Int <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2147483647</span> <span class="token punctuation">}</span>\nBoolean <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\nString <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"c"</span></span><span class="token punctuation">,</span> <span class="token operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"중요한 것은 타입은 무한하지 않고 제한적이라는 것이다. 예를 들어 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입은 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-2147483648</code>'}}),"부터 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">2147483647</code>'}}),"까지의 정수만 포함한다. 이는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입이라는 집합에 속하는 값은 이 범위를 벗어날 수 없다는 것을 의미한다. 따라서 이제 인식을 바꿔 ",t.createElement(a.strong,null,"타입은 범위를 제한한 집합"),"이라고 생각해보자. 이는 개발자에게 있어 타입이라는 개념을 더욱 풍부하게 만들어준다."),"\n",t.createElement(a.h2,{id:"타입의-변환"},t.createElement(a.a,{href:"#타입의-변환"},"타입의 변환")),"\n",t.createElement(a.p,null,"타입에 속한 값은 변형을 통해 다른 타입으로 변환될 수 있다. 예를 들어 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 값은 대부분의 언어에서 제공하는 변환 함수를 통해 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">String</code>'}})," 타입으로 변환될 수 있다. 혹은 같은 계열인 타입으로 변환하는 것도 가능하다. 예를 들어 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 값은 더 큰 범위인 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Long</code>'}})," 타입으로 변환될 수 있다."),"\n",t.createElement(a.p,null,"중요한 것은 변환을 할 때 ",t.createElement(a.strong,null,"함수를 거친다"),"는 것이다. 수학적으로 함수는 정의역에 해당하는 값을 치역으로 변환하는 것이다."),"\n",t.createElement(p.A,{src:"/images/2024-01-21-type-driven-development/function-process.png",caption:"수학 책에서 볼 수 있던 도식",width:"50%"}),"\n",t.createElement(a.p,null,"이를 프로그래밍 언어의 함수에 대응하면 다음과 같다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin">          ↓ 정의역  ↓ 치역<span class="token punctuation">(</span>공역<span class="token punctuation">)</span>\n<span class="token keyword">fun</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> \n  x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"즉, 함수의 파라메터는 정의역에 해당하며, 반환값은 치역에 해당한다. 이 개념을 조금 더 확장하면 함수를 크게 세 가지로 나눌 수 있다."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"단사 함수 (Injective Function)"),"\n",t.createElement(a.li,null,"전사 함수 (Surjective Function)"),"\n",t.createElement(a.li,null,"전단사 함수 (Bijective Function)"),"\n"),"\n",t.createElement(a.p,null,"단사 함수는 변환된 값의 집합이 공역과 치역이 일치하지 않는 경우를 말한다. 이를 조금 더 단순하게 표현하면 ",t.createElement(a.strong,null,"범위가 작은 타입에서 큰 타입으로 변환하는 것"),"을 말한다. 예를 들어 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 값은 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Long</code>'}})," 타입으로 변환될 수 있다. 이는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 값이 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Long</code>'}})," 타입의 값으로 변환될 때 값의 손실이 없기 때문이다. 하지만 반대는 문제가 생길 수 있다."),"\n",t.createElement(p.A,{src:"/images/2024-01-21-type-driven-development/injective-function.png",caption:"단사 함수",width:"50%"}),"\n",t.createElement(a.p,null,"간단한 코드 예시를 살펴보자."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">enum</span> Event <span class="token punctuation">{</span>\n  BIRTH_DAY<span class="token punctuation">,</span>\n  AWESOME_DAY<span class="token punctuation">,</span>\n  BEAUTIFUL_DAY\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fun</span> <span class="token function">getEventId</span><span class="token punctuation">(</span>event<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span>\n  <span class="token keyword">when</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Event<span class="token punctuation">.</span>BIRTH_DAY <span class="token operator">-></span> <span class="token number">1</span>\n    Event<span class="token punctuation">.</span>AWESOME_DAY <span class="token operator">-></span> <span class="token number">2</span>\n    Event<span class="token punctuation">.</span>BEAUTIFUL_DAY <span class="token operator">-></span> <span class="token number">3</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"위 코드는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Event</code>'}})," 타입을 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입으로 변환하는 함수이다. 이 함수는 단사 함수라서 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Event</code>'}})," 타입의 값은 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 값으로 변환될 때 값의 손실이 없다. 하지만 반대로 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 값은 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Event</code>'}})," 타입의 값으로 변환될 때 값의 손실이 발생한다. 예를 들어 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">4</code>'}}),"라는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 값은 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Event</code>'}})," 타입으로 변환될 수 없다. 이는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Event</code>'}})," 타입의 값은 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">1</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">2</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">3</code>'}}),"만 포함하기 때문이다."),"\n",t.createElement(a.p,null,"반대로 전사 함수는 변환된 값의 집합이 공역과 치역이 일치하는 경우를 말한다. 이는 ",t.createElement(a.strong,null,"범위가 큰 타입에서 작은 타입으로 변환하는 것"),"을 말한다. 앞서 들었던 예의 반대로 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Long</code>'}})," 타입의 값을 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입으로 변환할 수는 있지만 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})," 타입의 범위를 벗어날 수 있기 때문에 이에 대한 처리가 필요하다."),"\n",t.createElement(p.A,{src:"/images/2024-01-21-type-driven-development/surjective-function.png",caption:"전사 함수",width:"50%"}),"\n",t.createElement(a.p,null,"앞서 작성한 코드의 반대를 작성해보자."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getEvent</span><span class="token punctuation">(</span>eventId<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Event <span class="token operator">=</span>\n  <span class="token keyword">when</span> <span class="token punctuation">(</span>eventId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token number">1</span> <span class="token operator">-></span> Event<span class="token punctuation">.</span>BIRTH_DAY\n    <span class="token number">2</span> <span class="token operator">-></span> Event<span class="token punctuation">.</span>AWESOME_DAY\n    <span class="token number">3</span> <span class="token operator">-></span> Event<span class="token punctuation">.</span>BEAUTIFUL_DAY\n    <span class="token keyword">else</span> <span class="token operator">-></span> Event<span class="token punctuation">.</span>BEAUTIFUL_DAY\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eventId</code>'}}),"를 통해 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Event</code>'}}),"를 생성할 수 있지만 범위를 벗어나는 경우가 생기기 때문에 이에 대한 예외 처리를 추가해줬다."),"\n",t.createElement(a.p,null,"마지막으로 전단사 함수는 두 집합 사이를 중복 없이 일대일로 대응시키는 함수를 말한다. 항등 함수가 대표적이다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">identity</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> x\n\n<span class="token function">identity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">identity</span><span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token comment">// 126</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"위 같은 함수가 불필요하게 보일 수 있지만 항등 함수는 0과 1이 필요한 것처럼 고차 함수를 사용할 때 유용하게 사용할 수 있다. 예를 들어, 변환 함수를 인자로 받는 고차 함수를 작성한다고 가정해보자. 이때 만약 변환이 필요없다면 항등 함수를 사용할 수 있다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">identity</span><span class="token punctuation">(</span>x<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> x\n\n<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>list<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> f<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token operator">=</span>\n  list<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> <span class="token function">f</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n<span class="token function">map</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">::</span>identity<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>\n<span class="token function">map</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> it <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [2, 4, 6]</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"위 코드를 봤을 때 단순히 변환 함수를 사용하지 않으면 된다고 생각할 수 있다. 일반적으론 그렇지만 함수 파이프라인을 사용해서 분기 로직을 작성하기 애매하거나 가독성 등을 위해 항등 함수를 사용하는 경우가 있을 수 있다."),"\n",t.createElement(a.h2,{id:"타입을-통한-추상화"},t.createElement(a.a,{href:"#타입을-통한-추상화"},"타입을 통한 추상화")),"\n",t.createElement(a.p,null,"앞서 단사 함수와 전사 함수 이야기를 한 것은 ",t.createElement(a.strong,null,"타입을 통해 집합이 바뀌고 범위가 바뀔 수 있다는 것"),"을 말하고 싶었기 때문이다. 개발자는 목적 달성을 위해 함수를 통해 값을 변형하거나 필터링하거나 좁히거나 늘릴 수 있다. 이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, ",t.createElement(a.strong,null,"타입을 통해 로직을 추상화 하는 것이 가능하다"),"라는 뜻이다."),"\n",t.createElement(p.A,{src:"/images/2024-01-21-type-driven-development/logic.png",caption:"로직은 입출력의 연속",width:"100%"}),"\n",t.createElement(a.p,null,"프로그램을 개발할 때 어떤 패러다임과 방법론을 사용하더라도 로직이 최종적으로 입력, 처리, 출력을 거친다는 것은 변하지 않는다. 타입을 통해 로직을 추상화 한다는 것은 ",t.createElement(a.strong,null,"입력과 출력을 타입으로 나타내고 이를 통해 로직을 설계"),"한다는 것과 같다. 이는 뒤에서 조금 더 자세히 설명할 타입 주도 개발의 핵심이라 할 수 있다."),"\n",t.createElement(a.p,null,"아주 간단한 예시를 들어보자. 만약 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">리스트 안에 있는 모든 숫자를 더하는 함수</code>'}}),"를 작성한다고 가정해보자. 그렇다면 다음과 같이 표현할 수 있다."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"입력: ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">List&lt;Int></code>'}})),"\n",t.createElement(a.li,null,"출력: ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}})),"\n"),"\n",t.createElement(a.p,null,"이를 함수로 표현하면 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">List&lt;Int> -> Int</code>'}}),"와 같이 표현할 수 있다. 이를 통해 로직을 처리하는 함수의 입력과 출력을 타입으로 나타내고 이를 통해 로직을 구현하는 것이 가능하다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>list<span class="token operator">:</span> List<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>\n  <span class="token comment">// TODO: List&lt;Int>를 목적에 맞게 처리하여 Int로 가공해야 한다.</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"가독성과-런타임-안정성-챙기기"},t.createElement(a.a,{href:"#가독성과-런타임-안정성-챙기기"},"가독성과 런타임 안정성 챙기기")),"\n",t.createElement(a.p,null,"주요 목적은 아니지만 타입을 이용하면 가독성을 챙기는 것도 가능하다. 예를 들어 다음 코드를 살펴보자."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> User <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> name<span class="token operator">:</span> String\n  <span class="token keyword">var</span> age<span class="token operator">:</span> Int\n  <span class="token keyword">var</span> email<span class="token operator">:</span> String\n\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> email<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"위 코드는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">User</code>'}})," 클래스를 정의한 코드이다. 이 코드는 문제가 없어 보이지만 이후에 문제가 생길 수 있다. ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">User</code>'}})," 클래스가 가지고 있는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">age</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">email</code>'}})," 속성은 각각 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">String</code>'}})," 타입을 가지고 있다. 따라서 정수와 문자열을 할당할 수 있지만 할당된 값이 정말로 나이와 이메일인지는 알 수 없다. 이는 타입 시스템이 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">User</code>'}})," 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 없기 때문이다."),"\n",t.createElement(p.A,{src:"/images/2024-01-21-type-driven-development/types-are-a-lie.png",caption:"타입이 거짓말을 하고 있어요!",width:"50%"}),"\n",t.createElement(a.p,null,"이 문제를 해결하기 위해 검증 로직을 사용할 수 있다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> User <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> name<span class="token operator">:</span> String\n  <span class="token keyword">var</span> age<span class="token operator">:</span> Int\n  <span class="token keyword">var</span> email<span class="token operator">:</span> String\n\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> email<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"나이는 0보다 작을 수 없습니다."</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>email<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"@"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"이메일 형식이 올바르지 않습니다."</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"위와 같이 해결할 수도 있지만 타입을 풍부하게 사용하면 이를 좀 더 우아하게 해결할 수 있다. 다음 코드를 살펴보자."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@JvmInline</span>\nvalue <span class="token keyword">class</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">init</span> <span class="token punctuation">{</span>\n    <span class="token function">require</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">"이름은 공백일 수 없습니다."</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation builtin">@JvmInline</span>\nvalue <span class="token keyword">class</span> <span class="token function">Age</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">init</span> <span class="token punctuation">{</span>\n    <span class="token function">require</span><span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">"나이는 0보다 작을 수 없습니다."</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation builtin">@JvmInline</span>\nvalue <span class="token keyword">class</span> <span class="token function">Email</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">init</span> <span class="token punctuation">{</span>\n    <span class="token function">require</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"@"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">"이메일 형식이 올바르지 않습니다."</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> User <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> name<span class="token operator">:</span> Name\n  <span class="token keyword">var</span> age<span class="token operator">:</span> Age\n  <span class="token keyword">var</span> email<span class="token operator">:</span> Email\n\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> Name<span class="token punctuation">,</span> age<span class="token operator">:</span> Age<span class="token punctuation">,</span> email<span class="token operator">:</span> Email<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"이런 방식으로 타입을 별도로 정의하여 사용하면 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">User</code>'}})," 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 있으므로 가독성에 더 좋다. 또한 이러한 타입은 다양한 곳에서 재사용할 수 있으므로 코드의 중복을 줄일 수 있다."),"\n",t.createElement(a.p,null,"참고로 이 글에서는 코틀린의 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">value class</code>'}}),"를 사용헀지만 다른 언어에서도 클래스를 사용하여 똑같이 만들 수 있다. 마지막으로 정리하면 타입 시스템을 풍부하게 사용하는 것으로 다음과 같은 이점을 얻을 수 있다."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"컴파일 타임에 오류를 발견할 수 있다."),"\n",t.createElement(a.li,null,"타입을 통해 로직을 설계 할 수 있다."),"\n",t.createElement(a.li,null,"코드의 가독성을 높일 수 있다."),"\n",t.createElement(a.li,null,"코드의 안정성을 높일 수 있다."),"\n"),"\n",t.createElement(a.h1,{id:"타입-주도-개발"},t.createElement(a.a,{href:"#타입-주도-개발"},"타입 주도 개발")),"\n",t.createElement(a.p,null,"그럼 이번에는 앞서 배운 것을 활용하여 타입 시스템을 풍부하게 사용할 수 있도록 개발하는 ",t.createElement(a.strong,null,"타입 주도 개발"),t.createElement("sup",null,"Type-Driven Development"),"에 대해 알아보자. 타입 주도 개발은 다른 무언가를 먼저 정의하고 시작하는 XXX 주도 개발과 마찬가지로 ",t.createElement(a.strong,null,"타입을 먼저 정의하고 이를 통해 코드를 작성"),"하는 방법론이다."),"\n",t.createElement(a.p,null,"참고로 타입 주도 개발은 함수 구현처럼 아주 작은 부분에 적용할 수 있는 방법론이다. 따라서 다른 테스트 주도 개발과 같은 다른 개발 방법론과 함께 사용할 수 있다."),"\n",t.createElement(a.h2,{id:"타입을-먼저-정의하기"},t.createElement(a.a,{href:"#타입을-먼저-정의하기"},"타입을 먼저 정의하기")),"\n",t.createElement(a.p,null,"프로그램은 일련의 절차를 통해 원하는 결과를 만들어 낸다. 이때 각 절차는 입력 데이터를 받아 특정 로직을 수행하고 결과를 반환한다. 다양한 패러다임으로 프로그램을 작성할 수 있지만 절차를 통해 원하는 결과를 만들어 낸다는 것 하나는 변하지 않는다. 따라서 타입 주도 개발은 원한다면 어디에도 적용할 수 있으며 각 절차에 대한 결과를 타입으로 정의하는 것으로 시작한다.",t.createElement(a.sup,null,t.createElement(a.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"1"))),"\n",t.createElement(a.p,null,"타입을 먼저 정의한다는 것은 우리가 원하는 로직을 구체적으로 작성하기 전에 타입으로 추상화한다는 것과 같다. 연습을 위해 프로그래머스의 ",t.createElement(a.a,{href:"https://school.programmers.co.kr/learn/courses/30/lessons/120902",rel:"nofollow noopener noreferrer"},"문자열 계산하기")," 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다."),"\n",t.createElement(a.p,null,"이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, ",t.createElement(a.strong,null,"타입을 통해 로직을 추상화 하는 것이 가능하다"),"라는 뜻이다. 이러한 사고가 타입 주도 개발의 핵심이라 볼 수 있다. 연습을 위해 프로그래머스의 ",t.createElement(a.a,{href:"https://school.programmers.co.kr/learn/courses/30/lessons/120902",rel:"nofollow noopener noreferrer"},"문자열 계산하기")," 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"문자열로 이루어진 수식을 입력으로 제공한다."),"\n",t.createElement(a.li,null,"연산자는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">+</code>'}}),"와 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-</code>'}}),"만 존재한다."),"\n",t.createElement(a.li,null,"피연산자는 자연수만 존재한다."),"\n",t.createElement(a.li,null,"잘못된 수식은 주어지지 않는다."),"\n",t.createElement(a.li,null,"숫자와 연산자는 공백으로 구분한다."),"\n"),"\n",t.createElement(a.p,null,"먼저 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">String</code>'}})," 타입을 받아 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Int</code>'}}),"로 반환하는 함수가 필요하다는 것을 떠올릴 수 있다. 이는 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(String) -> Int</code>'}}),"와 같이 표현이 가능하다. 요구사항을 기반으로 로직을 더 구체화 해보면 다음과 같은 로직이 필요하다는 것을 알 수 있다."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"문자열을 숫자와 연산자로 분리한다.","\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"문자를 숫자로 변환한다."),"\n",t.createElement(a.li,null,"문자를 연산자로 변환한다."),"\n"),"\n"),"\n",t.createElement(a.li,null,"문자가 숫자인지 연산자인지 판단한다."),"\n",t.createElement(a.li,null,"문자열을 계산한다."),"\n"),"\n",t.createElement(a.p,null,"먼저 각 키워드를 타입으로 추상화하면 다음과 같다."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"문자열 → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">String</code>'}})),"\n",t.createElement(a.li,null,"문자 → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Token</code>'}}),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"숫자 → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Number</code>'}})),"\n",t.createElement(a.li,null,"연산자 → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Operator</code>'}})),"\n",t.createElement(a.li,null,"부호 → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Sign</code>'}})),"\n"),"\n"),"\n"),"\n",t.createElement(a.p,null,"코드로 나타내면 다음과 같다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// 부호</span>\n<span class="token keyword">enum</span> <span class="token keyword">class</span> Sign <span class="token punctuation">{</span>\n  PLUS<span class="token punctuation">,</span> MINUS\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 토큰</span>\n<span class="token keyword">sealed</span> <span class="token keyword">interface</span> Token<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> value<span class="token operator">:</span> T\n\n  <span class="token comment">// 숫자 토큰</span>\n  <span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Token<span class="token operator">&lt;</span>Int<span class="token operator">></span>\n  <span class="token comment">// 연산자 토큰</span>\n  <span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Operator</span><span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> value<span class="token operator">:</span> Sign<span class="token punctuation">)</span><span class="token operator">:</span> Token<span class="token operator">&lt;</span>Sign<span class="token operator">></span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"이번에는 각 로직을 타입으로 추상화해보자."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"문자열을 숫자와 연산자로 분리한다. → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(String) -> List&lt;Token></code>'}}),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"문자를 숫자로 변환한다. → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(String) -> Number</code>'}})),"\n",t.createElement(a.li,null,"문자를 연산자로 변환한다. → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(String) -> Operator</code>'}})),"\n"),"\n"),"\n",t.createElement(a.li,null,"문자가 숫자인지 연산자인지 판단한다. → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(String) -> Boolean</code>'}})),"\n",t.createElement(a.li,null,"문자열을 계산한다 → ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(String) -> Int</code>'}})),"\n"),"\n",t.createElement(a.p,null,"분해한 로직을 합쳐 로직 파이프라인을 만들면 다음과 같다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// 문자가 숫자인지 연산자인지 판단한다.</span>\n<span class="token keyword">fun</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>token<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span>\n  token<span class="token punctuation">.</span><span class="token function">toIntOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>\n\n<span class="token comment">// 문자를 숫자로 변환한다.</span>\n<span class="token keyword">fun</span> <span class="token function">toNumber</span><span class="token punctuation">(</span>token<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span>\n  token<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 문자를 연산자로 변환한다.</span>\n<span class="token keyword">fun</span> <span class="token function">toSign</span><span class="token punctuation">(</span>token<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Sign <span class="token operator">=</span>\n  <span class="token keyword">when</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token string-literal singleline"><span class="token string">"+"</span></span> <span class="token operator">-></span> Sign<span class="token punctuation">.</span>PLUS\n    <span class="token string-literal singleline"><span class="token string">"-"</span></span> <span class="token operator">-></span> Sign<span class="token punctuation">.</span>MINUS\n    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Unknown operator: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">token</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n<span class="token comment">// 문자열을 숫자와 연산자 문자로 분리한다.</span>\n<span class="token keyword">fun</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>input<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Token<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span>\n  input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">" "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> token <span class="token operator">-></span>\n    <span class="token keyword">when</span> <span class="token punctuation">{</span>\n      <span class="token function">isNumber</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">-></span> Token<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">toNumber</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">else</span> <span class="token operator">-></span> Token<span class="token punctuation">.</span><span class="token function">Operator</span><span class="token punctuation">(</span><span class="token function">toSign</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n<span class="token comment">// 문자열을 계산한다.</span>\n<span class="token keyword">fun</span> <span class="token function">calculate</span><span class="token punctuation">(</span>input<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> tokens <span class="token operator">=</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">var</span> sign <span class="token operator">=</span> Sign<span class="token punctuation">.</span>PLUS\n\n  tokens<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> token <span class="token operator">-></span>\n    <span class="token keyword">when</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">is</span> Token<span class="token punctuation">.</span>Number <span class="token operator">-></span> <span class="token punctuation">{</span>\n        <span class="token keyword">when</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          Sign<span class="token punctuation">.</span>PLUS <span class="token operator">-></span> <span class="token punctuation">{</span>\n            result <span class="token operator">+=</span> token<span class="token punctuation">.</span>value\n          <span class="token punctuation">}</span>\n          Sign<span class="token punctuation">.</span>MINUS <span class="token operator">-></span> <span class="token punctuation">{</span>\n            result <span class="token operator">-=</span> token<span class="token punctuation">.</span>value\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">is</span> Token<span class="token punctuation">.</span>Operator <span class="token operator">-></span> <span class="token punctuation">{</span>\n        sign <span class="token operator">=</span> token<span class="token punctuation">.</span>value\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> input <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"9 - 4 - 1 + 2 + 6"</span></span>\n  <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>\n\n  <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 12</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"참고로 함수 정의는 요구사항에 대한 해석이나 패러다임에 따라 다를 수 있다. 따라서 같은 로직을 작성하더라도 위 코드와 다른 로직이 나올 수 있으므로 틀렸다고 생각하지 말자."),"\n","\n",t.createElement(a.h1,{id:"마치며"},t.createElement(a.a,{href:"#마치며"},"마치며")),"\n",t.createElement(a.p,null,"타입 시스템은 개발자에게 있어 아낌없이 주는 든든한 친구다. 문제를 미연에 방지할 수 있게 해주며 가독성까지 챙길 수 있게 해준다. 타입이라는 개념과 친해질 수록 타입 시스템을 풍부하게 사용할 수 있게 되고, 이는 코드의 안정성과 가독성을 높여준다. 이 글에서 소개하는 타입 주도 개발은 타입과 친해지기 좋은 연습 방법이 될 수 있다."),"\n",t.createElement(a.p,null,"다만 일일히 타입의 정의하여 타입이 너무 많아지거나 타입의 정의가 복잡해지면 오히려 코드를 작성하기 힘들어지거나 가독성을 떨어뜨릴 수 있다. 따라서 항상 적절한 상태를 유지하는 것이 중요하다."),"\n","\n",t.createElement(a.section,{"data-footnotes":!0,className:"footnotes"},t.createElement(a.h2,{className:"sr-only",id:"footnote-label"},t.createElement(a.a,{href:"#footnote-label"},"Footnotes")),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,{id:"user-content-fn-2"},"\n",t.createElement(a.p,null,"다만 기본적으로 매우 절차적이면서 불변형을 사용하며 사이드 이펙트도 일종의 타입으로 생각하는 함수형 패러다임과 궁합이 좋다 ",t.createElement(a.a,{href:"#user-content-fnref-2","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n"),"\n"))}a.default=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.R)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)}},5799:function(n,a,s){var e=s(9474),t=s(1615),p=s(6810);a.A=n=>{let{src:a,caption:s,width:o,expandable:l}=n;const{0:c,1:r}=(0,e.useState)(!1);return(0,p.Y)("figure",null,(0,p.Y)("img",{src:a,width:o,style:{cursor:l?"zoom-in":"default"},onClick:l?()=>r(!0):void 0}),s&&(0,p.Y)("figcaption",{dangerouslySetInnerHTML:{__html:s}}),c&&t.createPortal((0,p.Y)("div",{style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"zoom-out",backgroundColor:"rgba(0, 0, 0, 0.7)"},onClick:()=>r(!1)},(0,p.Y)("div",{style:{borderRadius:8,maxWidth:1200,width:"80%",position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white"}},(0,p.Y)("img",{src:a,width:"100%"}))),document.body))}}}]);
//# sourceMappingURL=2f6b0f5151db324ec13183f7179f3a59bd3cc438-5dc87048a2f572ff288f.js.map