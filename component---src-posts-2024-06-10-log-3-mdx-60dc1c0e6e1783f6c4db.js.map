{"version":3,"file":"component---src-posts-2024-06-10-log-3-mdx-60dc1c0e6e1783f6c4db.js","mappings":"sPAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,oCAAqCI,EAAAA,cAAoBP,EAAYI,KAAM,CACnKI,wBAAyB,CACvBC,OAAQ,+CAER,8HAA+H,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,2NAA4N,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,qSAAsS,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wOAAyO,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,+NAAgO,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,gGAC3zC,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECUA,MAAMa,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBR,GAC/B,MAAMS,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfP,EACFA,EAAWS,GAGb,IAAIA,KAAsBT,EACnC,GACA,CAACS,EAAmBT,GAExB,C","sources":["webpack://kciter.so/./src/posts/2024-06-10-log-3.mdx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Ruby에서는 Boolean을 반환하는 메서드를 작성할 때 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">empty?</code>\"\n    }\n  }), \"처럼 이름 마지막에 ?를 붙이는 암묵적인 규칙이 있습니다. 아무래도 다른 언어에선 볼 수 없는 특이한 규칙이라 할 수 있습니다. 만약 다른 언어를 주로 사용하다가 이런 규칙을 본다면 이상하게 보일 수 있다고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"Ruby는 인간 중심적인 코드를 지향한다고 합니다. 예전엔 인간 중심적인 코드가 대체 무엇을 말하는지 이해할 수 없었지만 지금 생각해보면 ‘일을 해결하는 여러 방법이 있다’라는 Ruby의 철학 아래 즐겁게 코딩하는 방법을 찾아보라는 의미가 아닐까 싶습니다. 어쩌면 앞서 말한 규칙도 사람이 보기 편안한 네이밍을 찾기 위해 틀에서 벗어나 이것저것 시도하다 정착된 관례일지도 모르겠습니다.\"), \"\\n\", React.createElement(_components.p, null, \"요즘은 코드에 유일한 정답이 있는 것처럼 여겨지는 경우가 많습니다. 그런 분위기 속에서 정답이라 여겨지는 틀을 조금이라도 벗어난다면 고쳐야 할 코드라고 얘기합니다. 심한 경우엔 코드가 전체적으로 잘못됐다며 처음부터 다시 만들어야 한다고 주장하는 사람도 있습니다. 정답이라 여겨지는 규칙이 나쁜 것은 아닙니다. 다만, 사람마다 자신의 정답이 다른 것이 가장 큰 문제입니다. 내가 생각하는 정답과 다르다고 느끼면 불안감에 거부하게 되는 것이죠. 팀으로 작업한 결과물에 ‘나의 정답’을 투영했기에 생기는 일이라 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"저 또한 앞서 말한 Boolean 메서드에 물음표를 붙이는 규칙에 불편함을 느낀 적이 있습니다. 마치 잘못된 방식으로 코딩하는 것처럼 느껴지고 정답이 아니라는 생각에 불안감을 느꼈습니다. 그렇지만 거부하지 않고 받아들인 후엔 가독성이 좋다는 것을 깨달았고 Ruby를 사용하지 않는 지금도 종종 생각날 정도로 애착이 생겼습니다. 만약 그때 정답이 아니라는 생각에 거부했다면 지금까지도 좋은 점을 몰랐을 겁니다.\"), \"\\n\", React.createElement(_components.p, null, \"어쩌면 불편함이란 조금만 이해하려 노력하면 쉽게 없앨 수 있는 것일지도 모릅니다. 추상적인 방법론 하나에 구체적인 실행 방법은 셀 수없이 많고 100개의 팀이 있다면 100개의 정답이 있다고 생각합니다. 답은 하나가 아니라는 Ruby의 철학처럼 서로 이해하려 노력하고, 불편함을 제거해나가며 끝에 만들어진 ‘우리 팀의 정답’이 즐거운 마음으로 작성할 수 있는 ‘인간적인 코드’라고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"오늘은 같이 작업하는 팀원들과 소통하여 서로 어떤 코드를 좋아하는지, 어떻게 만들고 싶은지 이야기하면서 모두 만족할 수 있는 ‘인간적인 코드’를 만들어보면 어떨까요?\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}