{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2024-02-18-render-delegation-react-component-mdx","path":"/posts/render-delegation-react-component/","result":{"data":{"site":{"siteMetadata":{"title":"kciter.so | devlog"}},"mdx":{"body":"\nimport Image from '@components/Image';\n\n이전에 [Polymorphic한 React 컴포넌트 만들기](/posts/polymorphic-react-component)라는 글을 통해 컴포넌트에 다형성을 적용하는 방법을 소개했었다. 해당 글에서는 `as` 속성을 이용하여 컴포넌트를 변형시키는 것을 소개하는 데 이를 이용하면 하나의 컴포넌트로 여러 요소(Element)나 그에 따른 속성(Attribute)을 이용할 수 있고 이를 넘어 다른 컴포넌트를 합성하는 것도 가능하다. 따라서 이를 이용하여 **무엇이든지 될 수 있는 가장 추상화된 형태의 컴포넌트**를 만들 수 있다.\n\n다만 이 방법은 여러 비판을 받기도 하는데 가장 큰 이유는 **모호성** 때문이다. `as` 속성을 이용하여 컴포넌트를 결합하는 경우 전달할 수 있는 `prop`이 어떤 컴포넌트의 것인지 알기 힘들다는 점과 코드만 봐서는 어떻게 렌더링 되는지 알기 힘들다는 점이다. 그 외의 비판점으로는 자동 완성이 느려진다거나 TypeScript에서 타입을 추론하기 어렵다는 점 등이 있다.\n\n따라서 이에 대한 대안으로 자신의 속성과 행동을 자식 컴포넌트에 넘긴 후 자식이 직접 부모 컴포넌트를 대신하여 렌더링하는 방법인 `Render Delegation`[^1]이 등장했다. 이는 [Radix](https://www.radix-ui.com)라는 오픈소스 리액트 컴포넌트 라이브러리를 통해 유명해진 방법으로 Render Delegation 기능을 제공하는 라이브러리는 보통 `asChild`라는 속성을 통해 해당 기능을 이용할 수 있게 제공한다.\n\n<Image src=\"/images/2024-02-18-render-delegation-react-component/render-delegation-component.png\" width=\"70%\" caption=\"Render Delegation 컴포넌트의 구성\" />\n\nRender Delegation 컴포넌트는 보통 `Slot`과 `Slottable`이라는 두 컴포넌트를 통해 구성된다. `Slot`은 자식 컴포넌트를 렌더링하는 역할을 하고 `Slottable`은 `Slot`에 들어갈 것이 무엇인지를 나타낸다.\n\n참고로 Polymorphic 컴포넌트처럼 변형을 통한 다형성 문제 해결이라는 점은 같지만 Render Delegation 컴포넌트는 **기존 컴포넌트와 합성이될 컴포넌트를 코드에서 분리한다는 점**이 다르다.\n\n# 문제 인식하기\n\n만약 앞서 언급한 Polymorphic 컴포넌트와 이번 글에서 다룰 Render Delegation 컴포넌트가 왜 필요한지 잘 모를 수 있다. 이전에 작성한 글에서도 설명했지만 다시 한번 간단히 설명해 보겠다.\n\n```jsx\n/**\n * Button.jsx\n */\nexport const Button = ({ ...props }) => {\n  return (\n    <button \n      style={{ backgroundColor: 'black', color: 'white' }} \n      {...props} \n    />\n  );\n}\n\n/**\n * App.jsx\n */\nimport { Button } from './Button';\n\nconst App = () => {\n  return (\n    <div>\n      <Button onClick={() => alert('Good!')}>Click Me!</Button>\n    </div>\n  );\n}\n```\n\n설명이 필요 없을 정도로 간단한 코드다. 단순하게 표현했지만 위 코드처럼 스타일만 적용한 컴포넌트는 실제로도 많이 사용된다. Button 컴포넌트는 prop으로 넘기는 값을 button 태그의 속성으로 전부 넘기기 때문에 꽤 확장성 있게 사용할 수 있는 컴포넌트라고 생각할 수 있다. 그런데 만약 버튼에 페이지 링크를 추가하고 싶다면 어떻게 해야 할까?\n\n```jsx\nimport { Button } from './Button';\n\nconst App = () => {\n  return (\n    <div>\n      <a href=\"https://kciter.so\">\n        <Button>Click Me!</Button>\n      </a>\n    </div>\n  );\n}\n```\n\n위 코드처럼 작성할 수도 있겠지만 재사용성 측면에선 그다지 좋은 방법은 아니다. 추후 재사용을 고려하여 새로운 컴포넌트를 만들 수도 있다.\n\n```jsx\n/**\n * Button.jsx\n */\nexport const Button = ({ ...props }) => {\n  return (\n    <button \n      style={{ backgroundColor: 'black', color: 'white' }} \n      {...props} \n    />\n  );\n}\n\n/**\n * LinkButton.jsx\n */\nimport { Button } from './Button';\n\nexport const LinkButton = ({ href, ...props }) => {\n  return (\n    <a href={href}>\n      <Button {...props} />\n    </a>\n  );\n}\n\n/**\n * App.jsx\n */\nimport { LinkButton } from './LinkButton';\n\nconst App = () => {\n  return (\n    <div>\n      <LinkButton href=\"https://kciter.so\">Click Me!</LinkButton>\n    </div>\n  );\n}\n```\n\n혹은 위와 같이 작성할 수도 있지만 이 경우 a 태그가 확장되지 않는다는 문제점이 있고 컴포넌트의 의존 관계가 새롭게 추가된다는 문제점이 있다. 그리고 만약 react-router나 Next.js를 사용하여 SPA를 위한 Link 컴포넌트를 사용한다면 또 새로운 컴포넌트를 만들어줄 수밖에 없다. 이 문제의 해결법으로 이전 글에서 다룬 Polymorphic 컴포넌트나 이번 글에서 다룰 Render Delegation 컴포넌트를 사용할 수 있다.\n\n# 살펴보기\n\n앞서 언급한 [Radix](https://www.radix-ui.com)에서는 [asChild](https://www.radix-ui.com/primitives/docs/guides/composition)를 통해 Render Delegation이 가능한 컴포넌트를 제공한다. 해당 라이브러리를 통해 동작을 살펴보자.\n\n## 엿보기\n\n먼저 아주 간단한 예제를 살펴보자. 다음은 Radix에서 제공하는 `Label`을 사용하는 예제다.\n\n```jsx\nimport * as Label from \"@radix-ui/react-label\";\n\nconst App = () => {\n  return (\n    <div>\n      {/* asChild를 사용하지 않은 경우 */}\n      <Label.Root>\n        https://kciter.so\n      </Label.Root>\n    </div>\n  );\n};\n```\n\n위 코드에서 사용하는 `Label.Root` 컴포넌트를 이용하면 특별한 기능 없이 `label`을 렌더링할 수 있다. 여기서 만약 링크를 추가하고 싶다면 다음과 같이 `asChild` 속성을 사용할 수 있다.\n\n```jsx\nimport * as Label from \"@radix-ui/react-label\";\n\nconst App = () => {\n  return (\n    <div>\n      {/* asChild를 사용한 경우 */}\n      <Label.Root asChild>\n        <a href=\"https://kciter.so\">https://kciter.so</a>\n      </Label.Root>\n    </div>\n  );\n};\n```\n\n<Image src=\"/images/2024-02-18-render-delegation-react-component/aschild-basic-example.png\" caption=\"요소가 변경되었다\" />\n\n위와 같이 작성하면 렌더링 되는 요소가 `a`로 변경된다.\n\n## Slot 사용하기\n\n앞서 살펴본 예제는 기본적으로 제공하는 컴포넌트에서 단순히 요소를 변경하기만 하는 아주 간단한 예제였다. Radix에서 제공하는 [Slot](https://www.radix-ui.com/primitives/docs/utilities/slot)을 이용하면 사용자가 직접 Render Delegation이 가능한 컴포넌트를 만들 수 있다.\n\n```jsx\nimport { Slot } from \"@radix-ui/react-slot\";\n\nconst Button = ({ asChild, ...props }) => {\n  const Element = asChild ? Slot : \"button\";\n  return (\n    <Element \n      {...props}\n      style={{\n        padding: \"10px\",\n        border: \"1px solid #000\",\n        borderRadius: \"5px\",\n        backgroundColor: 'transparent',\n        fontSize: 12\n      }}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Button>\n        This is button\n      </Button>\n\n      <Button asChild>\n        <a href=\"https://kciter.so\">This is link</a>\n      </Button>\n    </div>\n  );\n};\n```\n\n`Slot` 컴포넌트는 `children`으로 받은 JSX 요소를 렌더링한다. 위 코드를 살펴보면 `asChild` 속성이 `true`일 때는 `Slot` 컴포넌트를 사용하고 `false`일 때는 `button`를 사용한다. 따라서 `asChild`를 사용한 컴포넌트의 렌더링 결과를 보면 기존 `Button` 컴포넌트에서 설정한 스타일은 변하지 않지만 요소가 변경된 것을 확인할 수 있다.\n\n<Image src=\"/images/2024-02-18-render-delegation-react-component/slot-example.png\" width=\"50%\" caption=\"asChild 여부에 따라 렌더링이 달라진다\" />\n\n즉 `Slot`을 이용하여 부모 컴포넌트의 속성을 자식 컴포넌트에 넘기고 렌더링을 위임했다고 볼 수 있다.\n\n## Slottable 사용하기\n\n`Slottable`을 이용하면 **일부분만 위임**하는 것도 가능하다. 다음 예제를 살펴보자.\n\n```jsx\nimport { Slot, Slottable } from \"@radix-ui/react-slot\";\n\nconst Icon = () => (\n  <span>🔴</span>\n)\n\nconst Button = ({ asChild, icon, children, ...props }) => {\n  const Element = asChild ? Slot : \"button\";\n  return (\n    <Element \n      {...props}\n      style={{\n        padding: \"10px\",\n        border: \"1px solid #000\",\n        borderRadius: \"5px\",\n        backgroundColor: 'transparent',\n        fontSize: 12\n      }}\n    >\n      {icon}\n      <Slottable>{children}</Slottable>\n    </Element>\n  );\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Button icon={<Icon />}>\n        This is button\n      </Button>\n\n      <Button icon={<Icon />} asChild>\n        <a href=\"https://kciter.so\">This is link</a>\n      </Button>\n    </div>\n  );\n};\n```\n\n`Slottable` 컴포넌트는 `Slot` 컴포넌트로 렌더링 될 컴포넌트의 `children`이 들어갈 곳을 정할 수 있다. 즉, 위 코드에선 `Button`의 `children`이 아닌 `a` 요소의 `children`이 `Slottable` 컴포넌트 내부로 들어가게 된다.\n\n<Image src=\"/images/2024-02-18-render-delegation-react-component/slottable-example.png\" width=\"50%\" caption=\"렌더링 결과\" />\n\n실제로 렌더링 된 HTML을 보면 다음과 같다.\n\n```html\n<div>\n  <button style=\"...\">\n    <span>🔴</span>\n    This is button\n  </button>\n  \n  <a href=\"https://kciter.so\" style=\"...\">\n    <span>🔴</span>\n    This is link\n  </a>\n</div>\n```\n\n결과적으로 `icon` 속성은 `Button` 컴포넌트에서 설정한 대로 따르지만, 그 외 속성은 `asChild` 속성에 따라 위임된다. 즉, **위임하고 싶은 부분만 따로 지정해서 구현하는 것**이 가능하다. 이렇게 `Slottable`을 사용하면 조금 더 풍부한 표현이 가능해진다. 참고로 `Slot`만 사용하는 것은 `Slot` 내부에 `Slottable`을 최상위로 둬서 사용하는 것과 같다.\n\n# JavaScript에서 구현하기\n\n이제 `Slot`과 `Slottable` 컴포넌트가 어떻게 동작하는지 알았으니 이 두 컴포넌트를 직접 만들어보자. 여기서는 먼저 편의를 위해 JavaScript로 구현해 볼 것이다.\n\n## Slot 구현하기\n\n`Slot` 컴포넌트는 `children`을 조금만 변형해서 렌더링하면 되기 때문에 아주 쉽게 구현할 수 있다. 다음 코드를 살펴보자.\n\n```jsx\n/**\n * Slot.jsx\n */\n\nimport React from \"react\";\n\nexport const Slot = ({ children, ...props }) => {\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...props,\n      ...children.props,\n    });\n  }\n\n  // 올바르지 않은 컴포넌트라면 경고 로그를 출력하고 null을 반환\n  console.warn(\"Slot component should have only one React element as a child\");\n\n  return null;\n};\n```\n\n위 코드에서 `Slot` 컴포넌트는 `children`으로 받은 JSX 요소를 렌더링한다. 만약 `children`이 JSX 요소라면 `props`를 합성하여 새로운 컴포넌트를 만들어 렌더링하고 그렇지 않다면 렌더링하지 않는다. 이때 `children`이 React Element가 아니거나 여러 개 들어오는 경우엔 경고 로그를 보여주고 `null`을 반환하도록 구현했다. 그럼 벌써 `Slot`을 구현했다. 이전에 Radix 예제에 사용했던 코드로 테스트하면 잘 돌아가는 것을 확인할 수 있다.\n\n```jsx\n/**\n * App.jsx\n */\n\nimport { Slot } from \"./Slot\";\n\nconst Button = ({ asChild, ...props }) => {\n  const Element = asChild ? Slot : \"button\";\n  return (\n    <Element {...props} style={/* ... */} />\n  );\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Button>\n        This is button\n      </Button>\n\n      <Button asChild>\n        <a href=\"https://kciter.so\">This is link</a>\n      </Button>\n    </div>\n  );\n};\n```\n\n<Image src=\"/images/2024-02-18-render-delegation-react-component/handmade-slot.png\" width=\"70%\" caption=\"잘 동작한다\" />\n\n## Slottable 구현하기\n\n그럼 이번에는 `Slottable` 개념을 구현해보자.\n\n```jsx\n/**\n * Slottable.jsx\n */\n\nexport const Slottable = ({ children }) => {\n  return <>children</>;\n}\n```\n\n사실 `Slottable` 컴포넌트는 따로 하는 게 없다. 그저 스스로 `Slottable`라는 것을 알려줄 수만 있으면 되기에 위와 같이 구현하면 된다. 대신 기존에 구현했던 Slot 컴포넌트의 로직을 변경할 필요가 있다. 이 부분이 조금 어려울 수 있다.\n\n```jsx\n/**\n * Slot.jsx\n */\n\nimport React from \"react\";\nimport { Slottable } from \"./Slottable\";\n\nexport const Slot = ({ children, ...props }) => {\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find((child) => {\n    return React.isValidElement(child) && child.type === Slottable\n  });\n\n  if (slottable) { // Slottable이 있다면\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map((child) => {\n      // Slottable이 아닌 것은 그대로 반환\n      if (child !== slottable) return child;\n\n      // Slottable이라면 해당 영역을 자식 컴포넌트의 children으로 교체\n      if (React.isValidElement(newElement)) {\n        return newElement.props.children;\n      } else {\n        console.warn(\n          \"Slot component should have only one React element as a child\"\n        );\n      }\n\n      return null;\n    });\n\n    // 새로운 요소를 렌더링\n    return React.isValidElement(newElement)\n      ? React.cloneElement(\n          newElement, \n          { ...props, ...newElement.props }, \n          newChildren\n        )\n      : null\n  }\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...props,\n      ...children.props,\n    });\n  }\n\n  console.warn(\"Slot component should have only one React element as a child\");\n\n  return null;\n};\n```\n\n기존 코드에서 달라진 점은 Slottable이 있는지 확인하고 있다면 이에 대해 처리해 주는 부분이다. 이 부분을 제외하면 기존 코드와 동일하다. 이렇게 만들어진 Slot과 Slottable을 이용하여 이전에 사용했던 예제로 실행해 보면 잘되는 것을 확인할 수 있다.\n\n<Image src=\"/images/2024-02-18-render-delegation-react-component/handmade-slottable.png\" width=\"70%\" caption=\"아주 잘 동작한다\" />\n\n# TypeScript에서 구현\n\n이제 TypeScript에서 구현해 보자. 타입을 신경써야 해서 구현이 복잡하지 않을까 싶지만 Render Delegation 컴포넌트는 Polymorphic 컴포넌트와 다르게 변형할 컴포넌트가 코드에서 분리되기 때문에 타입 추론이 쉽다. 그래서 TypeScript에서 구현하는 것은 JavaScript 구현과 크게 다르지 않다.\n\n먼저 Slot 컴포넌트에 타입을 붙이면서 다시 구현해 보자.\n\n```tsx\n/**\n * Slot.tsx\n */\n\nimport React from \"react\";\n\nexport interface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children: React.ReactNode;\n}\n\nexport type RenderDelegationProps<T> = T & {\n  asChild?: boolean;\n};\n\nexport const Slot = ({ children, ...props }: SlotProps) => {\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...props,\n      ...children.props,\n    });\n  }\n\n  console.warn(\"Slot component should have only one React element as a child\");\n\n  return null;\n};\n```\n\n타입을 상식적인 수준 정도로만 붙였는데 벌써 완성됐다. 코드 중 `RenderDelegationProps`는 Render Delegation을 사용할 컴포넌트에 붙일 수 있는 타입이다. 이 타입을 이용하면 `asChild` 속성을 사용할 수 있게 된다.\n\n이어서 `Slottable` 개념과 관련된 로직에 타입을 붙이면서 다시 구현해 보자.\n\n```tsx\n/**\n * Slottable.tsx\n */\n\nimport React from \"react\";\n\nexport interface SlottableProps {\n  children: React.ReactNode;\n}\n\nexport const Slottable = ({ children }: SlottableProps) => {\n  return <>children</>;\n};\n```\n\n마찬가지로 아주 간단하게 구현할 수 있다. 이제 `Slot` 컴포넌트의 로직을 변경하면서 타입을 붙이면 된다.\n\n```tsx\n/**\n * Slot.tsx\n */\n\nimport React from \"react\";\nimport { Slottable, SlottableProps } from \"./Slottable\";\n\nexport interface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children: React.ReactNode;\n}\n\nexport type AsChildProps<T> = T & {\n  asChild?: boolean;\n};\n\nexport const Slot = ({ children, ...props }: SlotProps) => {\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find((child) => {\n    return React.isValidElement(child) && child.type === Slottable;\n  }) as React.ReactElement<SlottableProps>;\n\n  if (slottable) {\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map((child) => {\n      if (child !== slottable) return child;\n\n      if (React.isValidElement(newElement)) {\n        return newElement.props.children;\n      } else {\n        console.warn(\n          \"Slot component should have only one React element as a child\"\n        );\n      }\n\n      return null;\n    });\n\n    return React.isValidElement(newElement)\n      ? React.cloneElement(\n          newElement,\n          { ...props, ...newElement.props },\n          newChildren\n        )\n      : null;\n  }\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...props,\n      ...children.props,\n    });\n  }\n\n  console.warn(\"Slot component should have only one React element as a child\");\n\n  return null;\n};\n```\n\n마찬가지로 기존 코드와 크게 다른 점이 없다. 딱 한 라인이 추가되었는데 이는 `Slottable` 컴포넌트를 찾은 후 어떤 타입인지 명시해 주는 것뿐이다. 만약 TypeScript의 [사용자 정의 타입 가드 문법](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates)을 사용하면 다음과 같이 작성하는 것도 가능하다.\n\n```tsx\n/**\n * Slot.tsx\n */\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nexport const Slot = ({ children, ...props }: SlotProps) => {\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n  \n  // ...\n}\n```\n\n{/*\n\n<!--\n\n# 추가 구현\n\n여기까지 구현했다면 아주 기초적인 Render Delegation 컴포넌트를 완성했다고 볼 수 있다. 다만, 몇 가지 특수한 상황을 해결하기 위해 추가적인 기능을 구현할 필요가 있다.\n\n## ref 받아오기\n\n특수한 상황 중 하나는 `ref`를 사용하는 경우다. Polymorphic 컴포넌트와 다르게 Render Delegation 컴포넌트는 어디에 `ref`를 붙여야할지 애매할 수 있다.\n\n```tsx\n<Button asChild ref={???}>\n  <a href=\"https://kciter.so\" ref={???}>\n    Click me!\n  </a>\n</Button>\n```\n<figcaption>어디에 `ref`를 넣어야할까?</figcaption>\n\n이런 경우 정답은 없다. 정답이 되도록 규칙을 만드는 것이 더 좋은 방법이다. 참고로 Radix에서는 부모 컴포넌트에 `ref`를 붙이도록 규칙을 정했다. 이 글에서도 Radix와 같은 규칙을 따를 것이다.\n\n## prop 병합 문제\n\n또 다른 특수한 상황은 부모 컴포넌트와 자식 컴포넌트의 `prop` 명칭이 같은 경우다.\n\n```tsx\n<Button type=\"primary\" asChild>\n  <Anchor varient=\"\" href=\"https://kciter.so\">\n    Click me!\n  </Anchor>\n</Button>\n```\n\n# 고급 사용법\n\n## 다중 결합\n\n# Polymorphic vs Render Delegation\n\nhttps://sandroroth.com/blog/react-polymorphic-components/\nhttps://github.com/ariakit/ariakit/issues/1245\nhttps://www.bekk.christmas/post/2023/01/polymorphism-in-react\n\n## 모호성 문제\n\n## 자동 완성 성능\n\n## 타입 추론 문제\n\n-->\n*/}\n\n# 마치며\n\n이전에 포스팅한 `as`를 이용한 Polymorphic 컴포넌트와 `asChild`를 이용하는 Slottable 컴포넌트는 각각 장단점이 있다. 따라서 무엇이 더 좋다면서 추종하는 것보단 다양한 패턴이 있음을 인지하고 상황에 따라 적절한 방법을 선택하여 사용하는 것이 중요하다. 참고로 이 포스팅을 통해 만들어진 최종적인 코드는 [GitHub 저장소](https://github.com/kciter/render-delegation-react-component-sample)에서 확인할 수 있다.\n\n[^1]: 렌더링을 다른 컴포넌트에 맡기기 때문에 Render Delegation이라 부른다.\n","tableOfContents":{"items":[{"url":"#문제-인식하기","title":"문제 인식하기"},{"url":"#살펴보기","title":"살펴보기","items":[{"url":"#엿보기","title":"엿보기"},{"url":"#slot-사용하기","title":"Slot 사용하기"},{"url":"#slottable-사용하기","title":"Slottable 사용하기"}]},{"url":"#javascript에서-구현하기","title":"JavaScript에서 구현하기","items":[{"url":"#slot-구현하기","title":"Slot 구현하기"},{"url":"#slottable-구현하기","title":"Slottable 구현하기"}]},{"url":"#typescript에서-구현","title":"TypeScript에서 구현"},{"url":"#마치며","title":"마치며"}]},"excerpt":"이전에 Polymorphic한 React 컴포넌트 만들기라는 글을 통해 컴포넌트에 다형성을 적용하는 방법을 소개했었다. 해당 글에서는  속성을 이용하여 컴포넌트를 변형시키는 것을 소개하는 데 이를 이용하면 하나의 컴포넌트로 여러 요소(Element…","fields":{"slug":"/posts/render-delegation-react-component","date":"2024-02-18"},"frontmatter":{"title":"Render Delegation하는 React 컴포넌트 만들기","categories":"dev","tags":["react","ui","component","frontend"],"image":"/images/2024-02-18-render-delegation-react-component/thumbnail.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2021-02-23","slug":"/posts/first-post"},"frontmatter":{"title":"첫 포스트를 작성하며","image":"/images/2021-02-23-first-post/mountains.jpg"}}},{"node":{"fields":{"date":"2021-02-25","slug":"/posts/about-mongodb"},"frontmatter":{"title":"MongoDB 이해하기","image":"/images/2021-02-25-about-mongodb/thumbnail.png"}}},{"node":{"fields":{"date":"2021-03-14","slug":"/posts/effective-atomic-design"},"frontmatter":{"title":"Effective Atomic Design","image":"/images/2021-03-14-effective-atomic-design/thumbnail.png"}}},{"node":{"fields":{"date":"2021-03-20","slug":"/posts/deep-dive-into-datetime"},"frontmatter":{"title":"Deep Dive into DateTime","image":"/images/2021-03-20-deep-dive-into-datetime/thumbnail.png"}}},{"node":{"fields":{"date":"2022-08-05","slug":"/posts/programmers-brain-book-report"},"frontmatter":{"title":"올바른 코드를 위한 끝없는 고찰","image":"/images/2022-08-05-programmers-brain-book-report/thumbnail.png"}}},{"node":{"fields":{"date":"2022-08-16","slug":"/posts/polymorphic-react-component"},"frontmatter":{"title":"Polymorphic한 React 컴포넌트 만들기","image":"/images/2022-08-16-polymorphic-react-component/thumbnail.png"}}},{"node":{"fields":{"date":"2022-08-31","slug":"/posts/the-nature-of-software-development-book-report"},"frontmatter":{"title":"우리 팀은 어떻게 일 해야할까?","image":"/images/2022-08-31-the-nature-of-software-development-book-report/thumbnail.png"}}},{"node":{"fields":{"date":"2021-02-28","slug":"/posts/basic-web-hacking"},"frontmatter":{"title":"웹 개발을 위해 꼭 알아야하는 보안 공격","image":"/images/2021-02-28-basic-web-hacking/thumbnail.png"}}},{"node":{"fields":{"date":"2022-09-18","slug":"/posts/crafting-esolang"},"frontmatter":{"title":"난해한 프로그래밍 언어 만들어보기","image":"/images/2022-09-18-crafting-esolang/thumbnail.png"}}},{"node":{"fields":{"date":"2022-09-08","slug":"/posts/software-master-book-report"},"frontmatter":{"title":"나는 프로답게 일했는가?","image":"/images/2022-09-08-software-master-book-report/thumbnail.png"}}},{"node":{"fields":{"date":"2023-05-03","slug":"/posts/spring-multi-module-architecture"},"frontmatter":{"title":"IoC와 DI를 이용한 Spring 멀티 모듈 아키텍처","image":"/images/2023-05-03-spring-multi-module-architecture/thumbnail.png"}}},{"node":{"fields":{"date":"2023-07-10","slug":"/posts/effective-work"},"frontmatter":{"title":"갓생사는 방법론","image":"/images/2023-07-10-effective-work/thumbnail.png"}}},{"node":{"fields":{"date":"2023-07-17","slug":"/posts/railway-oriented-programming"},"frontmatter":{"title":"Railway-Oriented Programming","image":"/images/2023-07-17-railway-oriented-programming/thumbnail.png"}}},{"node":{"fields":{"date":"2023-07-24","slug":"/posts/functional-data-structure"},"frontmatter":{"title":"함수형 자료구조","image":"/images/2023-07-24-functional-data-structure/thumbnail.png"}}},{"node":{"fields":{"date":"2023-12-05","slug":"/posts/what-is-beautiful-code"},"frontmatter":{"title":"아름다운 코드에 대하여","image":"/images/2023-12-05-what-is-beautiful-code/thumbnail.png"}}},{"node":{"fields":{"date":"2024-01-21","slug":"/posts/type-driven-development"},"frontmatter":{"title":"Type-Driven Development","image":"/images/2024-01-21-type-driven-development/thumbnail.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/developers-learning-and-growth"},"frontmatter":{"title":"개발자의 학습과 성장","image":"/images/2023-12-24-developers-learning-and-growth/thumbnail.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/render-delegation-react-component"},"frontmatter":{"title":"Render Delegation하는 React 컴포넌트 만들기","image":"/images/2024-02-18-render-delegation-react-component/thumbnail.png"}}},{"node":{"fields":{"date":"2024-03-16","slug":"/posts/principles-of-debugging"},"frontmatter":{"title":"디버깅 원칙","image":"/images/2024-03-16-principles-of-debugging/thumbnail.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/ascii-3d-renderer"},"frontmatter":{"title":"ASCII 3D 렌더러 만들기","image":"/images/2024-03-03-ascii-3d-renderer/thumbnail.png"}}},{"node":{"fields":{"date":"2024-04-14","slug":"/posts/encrypted-vault-system"},"frontmatter":{"title":"비밀 관리를 위한 금고 시스템 만들기","image":"/images/2024-04-14-encrypted-vault-system/thumbnail.png"}}}]}},"pageContext":{"slug":"/posts/render-delegation-react-component","series":{"title":"리액트 컴포넌트 시리즈","items":[{"title":"Polymorphic한 React 컴포넌트 만들기","url":"/posts/polymorphic-react-component"},{"title":"Render Delegation하는 React 컴포넌트 만들기","url":"/posts/render-delegation-react-component"}]},"frontmatter":{"series":"리액트 컴포넌트 시리즈","title":"Render Delegation하는 React 컴포넌트 만들기","categories":"dev","tags":["react","ui","component","frontend"],"image":"/images/2024-02-18-render-delegation-react-component/thumbnail.png","comments":true,"draft":false}}},"staticQueryHashes":["63159454"],"slicesMap":{}}