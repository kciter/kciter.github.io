"use strict";(self.webpackChunkkciter_so=self.webpackChunkkciter_so||[]).push([[8432],{991:function(n,s,a){a.r(s);var t=a(6494),p=a(9128),o=a(5799);function e(n){const s=Object.assign({p:"p",strong:"strong",a:"a",h1:"h1",h2:"h2",blockquote:"blockquote",span:"span",ol:"ol",li:"li",ul:"ul"},(0,p.R)(),n.components);return(0,t.FD)(t.FK,{children:[(0,t.FD)(s.p,{children:["자료구조란 전기 신호의 나열로 이루어진 컴퓨터 세계의 ",(0,t.Y)(s.strong,{children:"데이터를 다차원으로 표현"}),"하는 것이라 볼 수 있다. 우리는 보통 전산화를 할 때 현상을 표현하기 위한 데이터 구조를 정의하고 이를 이용해 알고리즘을 구현한다."]}),"\n",(0,t.FD)(s.p,{children:["그렇지만 우리가 일반적으로 학생 때 배우는 자료구조는 절차적으로 설계된 구조들이 대부분이다. 이러한 자료구조는 상태가 존재하지않는 순수한 함수형 언어에서는 사용할 수 없기 때문에 기존에 알고있던 지식을 활용할 수가 없다. 따라서 함수형 프로그래밍을 하고싶다면 그에 맞는 방식으로 데이터를 표현할 수 있어야 하고 이를 ",(0,t.Y)(s.a,{href:"https://en.wikipedia.org/wiki/Purely_functional_data_structure",rel:"nofollow noopener noreferrer",children:"순수 함수형 자료구조"}),"라고 부른다."]}),"\n",(0,t.FD)(s.p,{children:["사실 이 함수형 자료구조를 꼭 익혀야하는가라고 묻는다면 사실 그렇지는 않다. 요즘은 대부분의 언어들이 ",(0,t.Y)(s.a,{href:"https://ko.wikipedia.org/wiki/%EB%8B%A4%EC%A4%91_%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4",rel:"nofollow noopener noreferrer",children:"멀티 패러다임"}),"을 지향하고 있고 ",(0,t.Y)(s.strong,{children:"성능적인 이슈"}),"도 있기 때문에 순수 함수형 언어에서만 사용하는 자료구조들을 익힐 필요는 없다. 그렇지만 이런 일반적이지 않은 것을 공부하는 것은 개발자로서 큰 즐거움아닐까?"]}),"\n",(0,t.Y)(s.h1,{id:"함수형-사고",children:(0,t.Y)(s.a,{href:"#함수형-사고",children:"함수형 사고"})}),"\n",(0,t.FD)(s.p,{children:["함수형 프로그래밍은 많은 개발자들이 관심을 가지며 업무에 활용하고 싶어하는 패러다임이다. 필자도 강의를 할 때 관련하여 많은 질문을 받기도하고 함수형 프로그래밍을 사용하는 회사는 ",(0,t.Y)(s.strong,{children:"힙한 기술 스택을 가진 멋진 회사"}),"로 인용되기도 한다. 이쯤되면 개발자에게 일종의 로망으로 자리잡았다고 생각된다."]}),"\n",(0,t.Y)(s.p,{children:"이 포스팅을 이해하기 위해서는 우선적으로 함수형 프로그래밍에 대한 이해가 필요하다. 이를 위해 우리는 프로그래밍 패러다임이 무엇인지, 함수형으로 사고하는 방법을 알아야 한다."}),"\n",(0,t.Y)(s.h2,{id:"프로그래밍과-패러다임-방법론",children:(0,t.Y)(s.a,{href:"#프로그래밍과-패러다임-방법론",children:"프로그래밍과 패러다임, 방법론"})}),"\n",(0,t.FD)(s.blockquote,{children:["\n",(0,t.FD)(s.p,{children:["💡 이 부분에 대한 설명은 ",(0,t.Y)(s.strong,{children:"필자의 생각"}),"이 듬뿍 담겨있다. 대체로 프로그래밍 패러다임과 방법론은 동일시 되는 경우가 많지만 이 글에서는 분리하여 표현한다."]}),"\n"]}),"\n",(0,t.FD)(s.p,{children:["프로그래밍 패러다임은 프로그램의 구성 요소와 프로그래밍을 하는 방법에 관한 ",(0,t.Y)(s.strong,{children:"사고 방식"}),"이라 볼 수 있다. 이는 프로그래밍 언어의 문법과 여러 기술과는 별개로 개발을 바라보는 시각이다. 이 말이 이해하기 어려울 수 있다. 예를 들어, 객체지향 프로그래밍은 ",(0,t.Y)(s.strong,{children:"프로그램은 객체들의 유기적인 통신을 통해 이루어지기에 객체를 올바르게 만들어 서로 상호작용하도록 해야한다"}),"라고 바라본다고 할 수 있다. 반면, 이 글에서 언급되는 함수형 프로그래밍은 ",(0,t.Y)(s.strong,{children:"프로그램은 하나의 함수이며 복잡한 연산을 위해 여러 함수의 합성을 통해 프로그램을 만들 수 있도록 해야한다"}),"라고 바라본다고 할 수 있다."]}),"\n",(0,t.FD)(s.p,{children:["즉, 패러다임은 ",(0,t.Y)(s.strong,{children:"프로그램을 바라보는 시각을 통해 프로그래밍을 하는 방법을 결정"}),"한다. 이는 ",(0,t.Y)(s.strong,{children:"추상적인 사고"}),"와도 연관이 있다. 같은 프로그램을 만들더라도 바라보는 시각에 따라 ",(0,t.Y)(s.strong,{children:"뽑아내는 요소"}),"가 다르기 때문이다. 예를 들어, 이 글을 읽는 독자 여러분이 객체지향 프로그래밍에 익숙하다면 어떠한 문제를 해결할 때 객체를 만들기 위해 클래스 설계부터 할 것이고 함수형 프로그래밍에 익숙하다면 어떠한 문제를 해결할 때 문제를 분해하고 함수 합성을 할 수 있도록 설계부터 할 것이다."]}),"\n",(0,t.FD)(s.p,{children:["그렇다면 방법론은 무엇일까? 프로그래밍 패러다임이 프로그램의 구성 요소를 바라보는 것이라면 방법론은 그러한 시각에 따라 ",(0,t.Y)(s.strong,{children:"문제를 해결하는 방법"}),"이라 볼 수 있다."]}),"\n",(0,t.Y)(o.A,{src:"/images/2023-07-24-functional-data-structure/methodology.png",caption:"패러다임에 기반한 방법론은 여러 가지가 존재한다"}),"\n",(0,t.FD)(s.p,{children:["예를 들어, 이전에 작성했던 글인 ",(0,t.Y)(s.a,{href:"https://kciter.so/posts/railway-oriented-programming",rel:"nofollow noopener noreferrer",children:"Railway-Oriented Programming"}),"은 함수형 프로그래밍을 기반으로 한 방법론이라고 볼 수 있다. 객체지향 프로그래밍도 마찬가지로 여러 방법론을 가진다. 객체를 만들어 내는 방법을 클래스로 할 것인가, 프로토타입으로 할 것인가로 나뉘기도 하며 Go 언어처럼 상속을 지원하지 않는 경우도 있다. 이처럼 프로그램의 구성 요소를 바라보는 시각은 같아도 ",(0,t.Y)(s.strong,{children:"해결하는 방법"}),"은 달라질 수 있다."]}),"\n",(0,t.Y)(s.h2,{id:"함수형-프로그래밍은-좋은가",children:(0,t.Y)(s.a,{href:"#함수형-프로그래밍은-좋은가",children:"함수형 프로그래밍은 좋은가?"})}),"\n",(0,t.FD)(s.p,{children:["물론 함수형 프로그래밍 좋다. ",(0,t.Y)(s.strong,{children:"교과서적으로"})," 대답하자면 안전한 프로그램을 작성하고 재사용성이 높아지며 테스트하기 쉽고, 불변성을 지키기 때문에 예측하기 쉽다. 이는 유지보수가 중요한 소프트웨어에서 매우 중요하다 할 수 있다. 물론 이러한 것들은 전부 ",(0,t.Y)(s.strong,{children:"적합한 상황에서 잘 만들었을 때만"})," 해당한다. 당연히 함수형 프로그래밍도 다른 패러다임과 마찬가지로 ",(0,t.Y)(s.strong,{children:"많은 장점과 더불어 많은 단점이 존재"}),"한다."]}),"\n",(0,t.FD)(s.p,{children:["함수형 프로그래밍을 포함하여 유명인이 언급하거나 큰 기업에서 사용하는 특정 방법론은 흔히 완벽한 방법으로서 맹신되기도 하는데 이런 생각은 위험하다. 방법론의 사전적인 의미를 보면 ",(0,t.Y)(s.strong,{children:"철학이나 과학 연구에서 진리에 도달하기 위한 방법을 연구하는 이론"}),"이라 나와있다. 이 말은 추상적이니 구체적인 예시를 들어보자."]}),"\n",(0,t.FD)(s.p,{children:["가령 필자가 급한 출장으로 인해 서울에서 부산으로 이동해야 한다면 어떤 방법을 선택할 수 있을까? 먼저 비행기를 타는 방법을 선택할 수 있다. 이는 비용이 많이 드는 대신 빠르게 이동할 수 있다는 장점이 있다. 혹은 버스를 타는 방법이 있다. 이는 비행기보다 오래 걸리지만 비용이 더 저렴하다는 장점이 있다. 이 두 가지를 비행기 방법론과 버스 방법론이라고 할 때 상황에 따라 방법론을 선택할 수 있다. 만약 필자가 최대한 빠른 시간 내에 부산에 가야한다면 비행기 방법론을 택할 것이고 금전이 부족한 상황에선 버스 방법론을 택할 것이다. 이처럼 ",(0,t.Y)(s.strong,{children:"상황에 맞게 방법론을 선택"}),"하는 것이 가장 최선이라 볼 수 있다."]}),"\n",(0,t.Y)(o.A,{src:"/images/2023-07-24-functional-data-structure/simpson.png",caption:"필자가 좋아하지 않는 이미지. 패러다임 사이엔 우열이 없다고 믿는다."}),"\n",(0,t.FD)(s.p,{children:["프로그래밍 패러다임과 방법론도 마찬가지로 가령 성능이 정말 중요한 낮은 계층의 소프트웨어를 만든다면 최소한의 명령어와 메모리만을 이용하기 위해 꼭 필요한 코드만을 순차적으로 작성할 수도 있다. 그리고 조금 더 큰 범위에서 아키텍처를 바라볼 때 MSA처럼 역할에 따라 서버를 분리하고 서로 통신하게끔 만든다면 이를 함수로 바라보는 것보다는 객체로 바라보는 것이 더 적합할 것이다. 이처럼 패러다임과 방법론은 어디에도 적용될 수 있지만 그에 따른 ",(0,t.Y)(s.strong,{children:"부작용이 있을 수 있기에 상황에 맞게 선택하는 것이 중요하다는 점"}),"을 꼭 명심해야 한다."]}),"\n",(0,t.Y)(s.h1,{id:"함수형-자료구조-개론",children:(0,t.Y)(s.a,{href:"#함수형-자료구조-개론",children:"함수형 자료구조 개론"})}),"\n",(0,t.FD)(s.p,{children:["여기서 함수형 프로그래밍에 대해 깊게 다루는 것은 이 글의 범위를 벗어나기에 생략한다. 함수형 자료구조는 우리가 지금까지 배웠던 자료구조와는 달리 ",(0,t.Y)(s.strong,{children:"불변성"}),"을 가진다. 이는 상태를 지니지 않기에 값을 변경하지 않는다는 것을 의미한다. 여기서는 정말로 ",(0,t.Y)(s.strong,{children:"함수만을 이용하여 자료구조를 구현"}),"한다. 이를 위해 기본적으로 ",(0,t.Y)(s.strong,{children:"함수가 일급 객체인 언어"}),"여야 한다."]}),"\n",(0,t.FD)(s.p,{children:["또한, 함수형 프로그래밍을 위한 여러 기술 중 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Recursive Data Type</code>'}}),"이 필요하다. 이는 Lisp, Haskell, Scala 등 함수형 프로그래밍 언어나 TypeScript 등의 언어에서 지원한다. 혹은 JavaScript 같이 Duck Typing을 지원하는 언어에서 가능하다. 이 글에서는 상대적으로 이해하기 쉽고 타입도 나타낼 수 있는 ",(0,t.Y)(s.strong,{children:"TypeScript를 기준으로 설명"}),"한다."]}),"\n",(0,t.Y)(s.h2,{id:"recursive-data-type",children:(0,t.Y)(s.a,{href:"#recursive-data-type",children:"Recursive Data Type"})}),"\n",(0,t.FD)(s.p,{children:["함수형 자료구조를 본격적으로 들어가기 전에 앞서 필요하다 말한 기술인 Recursive Data Type에 대해 간단히 살펴보자. Recursive Data Type은 이름처럼 ",(0,t.Y)(s.strong,{children:"재귀적인 타입 선언"}),"이다. 이는 타입을 정의할 때 타입 자신을 참조하는 것을 의미한다. 이는 다음과 같이 표현할 수 있다."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">RecursiveType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token operator">:</span> RecursiveType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",(0,t.Y)(s.p,{children:"Recursive Data Type은 좀 더 유용한 사용 방법이 있지만 위 코드처럼 함수 타입으로 사용하는 것도 가능하다. 참고로 Recursive Data Type을 지원하지 않는 언어는 위와 같은 코드를 작성할 수 없다."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// Kotlin</span>\n<span class="token keyword">typealias</span> RecursiveType <span class="token operator">=</span> <span class="token punctuation">(</span>RecursiveType<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token comment">// 컴파일 에러 발생</span></code></pre></div>'}}),"\n",(0,t.Y)("figcaption",{style:{marginTop:-16},children:"Kotlin에선 이런 타입을 선언할 수 없다"}),"\n",(0,t.Y)(s.p,{children:"다른 언어에서는 타입을 정의할 때 자기 자신에 대한 정의를 할 수 없는 경우가 있다. 반면 TypeScript는 가능하다. 이는 함수형 자료구조를 만들 때 유용하다."}),"\n",(0,t.Y)(s.h2,{id:"함수로-구조를-어떻게-표현할까",children:(0,t.Y)(s.a,{href:"#함수로-구조를-어떻게-표현할까",children:"함수로 구조를 어떻게 표현할까?"})}),"\n",(0,t.Y)(s.p,{children:"언뜻 함수로 구조를 나타낸다는 것이 이상하게 느껴질 수 있다. 하지만 잘 생각해보면 함수로도 충분히 데이터 구조를 나타낼 수 있다. 다음 코드를 살펴보자."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Pair</span><span class="token punctuation">(</span>left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["위 코드에서 매개 변수인 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">left</code>'}}),"와 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">right</code>'}}),"를 통해 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Pair</code>'}})," 함수가 두 개의 데이터를 받을 수 있다는 것을 알 수 있다. 그럼 위 함수를 조금 더 확장시켜보자."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Pair</span><span class="token punctuation">(</span>left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token punctuation">(</span>left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["추가로 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Pair</code>'}})," 함수에서 다시 함수를 반환하도록 코드를 작성했다. 여기서 갑자기 머리가 아파올 수 있다. 천천히 코드를 뜯어보자. ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Pair</code>'}})," 함수는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">left</code>'}}),"와 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">right</code>'}}),"를 매개 변수로 받는다. 그리고 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Pair</code>'}})," 함수는 함수를 반환한다. 이 함수는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">f</code>'}}),"라는 매개 변수를 받는다. 이 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">f</code>'}}),"는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">left</code>'}}),"와 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">right</code>'}}),"를 매개 변수로 받아 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">number</code>'}}),"를 반환한다. 정리하여 순서대로 나타내면 다음과 같다."]}),"\n",(0,t.FD)(s.ol,{children:["\n",(0,t.Y)(s.li,{children:"Pair가 숫자 두 개를 입력 받는다."}),"\n",(0,t.Y)(s.li,{children:"Pair는 숫자 두 개를 입력 받아 숫자를 반환하는 함수를 반환한다. 이때, 숫자 두 개는 클로저(혹은 람다 캡처링)로 인해 메모리 상에 남아있다."}),"\n",(0,t.Y)(s.li,{children:"반환된 함수는 숫자 두 개를 입력 받아 적절한 처리 후 숫자를 반환한다."}),"\n"]}),"\n",(0,t.Y)(s.p,{children:"설명보다 코드가 더 이해하기 쉬울 수 있다. 실제로 사용하는 코드를 살펴보자."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> pair <span class="token operator">=</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">pair</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">=></span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["첫 번째 줄 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pair</code>'}}),"는 함수다. 이 함수는 다시 함수를 인자로 받을 수 있다. 그리고 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pair</code>'}})," 함수가 실행될 때 인자로 받은 함수를 실행시키며 값을 반환한다. 이때 중요한 것은 앞서 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Pair</code>'}})," 함수를 통해 받은 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">left</code>'}}),"와 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">right</code>'}}),"가 클로저로 인해 ",(0,t.Y)(s.strong,{children:"메모리 상에 남아있다"}),"는 것이다. 이를 통해 ",(0,t.Y)(s.strong,{children:"데이터를 담아두고 사용할 수 있다"}),"는 것을 알 수 있다. 데이터를 담아두고 사용할 수 있다면 ",(0,t.Y)(s.strong,{children:"구조체 혹은 클래스처럼 데이터를 담아두고 꺼내 쓸 수 있다"}),"고 볼 수 있다."]}),"\n",(0,t.Y)(s.h2,{id:"선형-자료구조-구현",children:(0,t.Y)(s.a,{href:"#선형-자료구조-구현",children:"선형 자료구조 구현"})}),"\n",(0,t.FD)(s.p,{children:["앞서 함수로도 충분히 데이터를 담아두고 꺼낼 수 있다는 것을 알았다. 이번에는 이를 이용하여 선형 자료구조를 구현해보자. 먼저 ",(0,t.Y)(s.strong,{children:"대표적인 선형 자료구조인 단일 연결 리스트를 구현"}),"해볼 것이다."]}),"\n",(0,t.Y)(s.p,{children:"일반적으로 TypeScript에서 단일 연결 리스트를 구현할 때는 다음과 같이 데이터 타입을 정의한다."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token keyword">public</span> next<span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> head<span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... </span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["위 코드는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Node</code>'}}),"와 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">LinkedList</code>'}}),"라는 두 개의 클래스를 정의한다. ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Node</code>'}}),"는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">value</code>'}}),"와 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">next</code>'}}),"를 가지며 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">LinkedList</code>'}}),"는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">head</code>'}}),"를 가진다. 이를 함수형 자료구조로 표현한다면 어떨까?"]}),"\n",(0,t.Y)(o.A,{src:"/images/2023-07-24-functional-data-structure/functional-linked-list.png",caption:"함수형 단일 연결 리스트"}),"\n",(0,t.Y)(s.p,{children:"참고로 함수형 자료구조에선 요소를 Cons라고 표현하며 비어있는 값을 Nil이라 표현한다. 이는 Lisp에서 유래된 표현으로 Cons는 Construct(결합)를 줄여쓴 표현이다."}),"\n",(0,t.Y)(s.p,{children:"이어서 단일 연결 리스트를 더 이상 분해가 불가능할 때까지 분해한다고 생각해 보자. 그렇다면 head와 tail만 남은 Node 하나로 구성된 단일 연결 리스트가 남을 것이다. 이를 함수로 표현하고 tail은 다음 연결 리스트 혹은 null을 반환하도록 구현할 수 있다. 먼저 타입을 분해하여 정의할 필요가 있다. 필요한 타입은 다음과 같다."}),"\n",(0,t.FD)(s.ul,{children:["\n",(0,t.Y)(s.li,{children:"단일 연결 리스트를 나타내는 타입"}),"\n",(0,t.Y)(s.li,{children:"단일 연결 리스트의 요소를 표현하는 타입"}),"\n",(0,t.Y)(s.li,{children:"단일 연결 리스트를 분해하는 타입"}),"\n"]}),"\n",(0,t.Y)(s.p,{children:"생각보다 정의할 타입이 많다. 코드로 한 번 살펴보자."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ListNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> tail<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span> <span class="token operator">|</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">DestructureCons</span> <span class="token operator">=</span> <span class="token punctuation">(</span>destructureCons<span class="token operator">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">=></span> ReturnType<span class="token operator">&lt;</span>ListNode<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">LinkedList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> tail<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> DestructureCons<span class="token punctuation">;</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["생각보다 타입 정의가 복잡하다. 여기서 앞서 설명한 Recursive Data Type이 사용된다. 직접 자기 자신을 참조하지는 않지만 ",(0,t.Y)(s.strong,{children:"상호 재귀"}),"로 서로를 참조하고 있다. 각 정의를 살펴보면 다음과 같다."]}),"\n",(0,t.FD)(s.ul,{children:["\n",(0,t.FD)(s.li,{children:["단일 연결 리스트를 나타내는 타입","\n",(0,t.FD)(s.ul,{children:["\n",(0,t.Y)(s.li,{children:"LinkedList"}),"\n"]}),"\n"]}),"\n",(0,t.FD)(s.li,{children:["단일 연결 리스트의 요소를 표현하는 함수 타입","\n",(0,t.FD)(s.ul,{children:["\n",(0,t.Y)(s.li,{children:"ListNode"}),"\n"]}),"\n"]}),"\n",(0,t.FD)(s.li,{children:["단일 연결 리스트를 분해하는 타입","\n",(0,t.FD)(s.ul,{children:["\n",(0,t.Y)(s.li,{children:"DestructureCons"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.FD)(s.p,{children:["타입 중 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">LinkedList</code>'}}),"와 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DestructureCons</code>'}}),"는 합치면 앞서 살펴본 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Pair</code>'}}),"와 유사하므로 어렵지 않을 것이다. ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ListNode</code>'}}),"는 head와 tail을 인자로 받아 head를 반환하거나 다음 요소를 반환하는 타입이다. 위 타입을 이용하여 단일 연결 리스트를 구성하는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Cons</code>'}})," 함수를 만들어보자."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> Cons<span class="token operator">:</span> <span class="token function-variable function">LinkedList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>destructureCons<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">destructureCons</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["앞서 구현한 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Pair</code>'}})," 함수와 똑같다. 실제로 사용할 때는 다음과 같다."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> head<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre></div>'}}),"\n",(0,t.Y)(s.p,{children:"만약 두 번째 요소의 값을 받아오고 싶다면 다음과 같이 작성할 수 있다."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> head<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre></div>'}}),"\n",(0,t.Y)(s.p,{children:"솔직히 매우 불편하다. 이를 해결하기 위해 유용한 함수를 만들 수 있다."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> \n  list <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Out of bound\'</span><span class="token punctuation">)</span> <span class="token operator">:</span>\n    <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> \n      index <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> head <span class="token operator">:</span> <span class="token function">get</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Out of bound</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["함수 내용이 조금 복잡할 수 있다. ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get</code>'}}),"은 인덱스를 받아 해당 인덱스의 값을 반환한다. 만약 인덱스가 리스트의 길이보다 크다면 에러를 반환한다. 이를 구현하기 위해 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get</code>'}})," 함수는 재귀적으로 호출한다. 이를 통해 인덱스가 0이 될 때까지 리스트를 분해하고 0이 되면 위치에 해당하는 요소를 반환한다. 추가로 함수를 더 만들어보자. 함수에 대한 설명은 주석을 참고하면 된다."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 리스트의 가장 첫 번째 요소의 값을 반환하는 함수</span>\n<span class="token keyword">const</span> <span class="token function-variable function">head</span> <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Empty list\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=></span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 요소 중 index에 해당하는 값을 반환하는 함수</span>\n<span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Out of bound\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> \n    index <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> head <span class="token operator">:</span> <span class="token function">get</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 리스트 마지막에 값을 추가하는 함수</span>\n<span class="token keyword">const</span> <span class="token function-variable function">append</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  list <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> \n    <span class="token function">Cons</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">:</span>\n    <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> \n      tail <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">Cons</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Cons</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 리스트 앞쪽에 값을 추가하는 함수</span>\n<span class="token keyword">const</span> <span class="token function-variable function">prepend</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Cons</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 리스트 첫 번째 요소를 제거하는 함수</span>\n<span class="token keyword">const</span> shift <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> DestructureCons <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Empty list\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> tail<span class="token punctuation">)</span> <span class="token keyword">as</span> DestructureCons<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 리스트를 뒤집는 함수</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> DestructureCons<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> \n    tail <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">Cons</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">append</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">reverse</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 리스트 요소의 값을 업데이트하는 함수</span>\n<span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Out of bound\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span>\n    index <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">Cons</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Cons</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 리스트를 배열로 변환하는 함수</span>\n<span class="token keyword">const</span> <span class="token function-variable function">toArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> DestructureCons <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> \n  list <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",(0,t.Y)(s.p,{children:"이제 이를 이용하여 리스트를 조작해보자."}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token function">shift</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 3, 4]</span></code></pre></div>'}}),"\n",(0,t.Y)(s.p,{children:"위 코드처럼 함수 합성을 통해 리스트를 조작할 수 있다. 결과적으로 불변성을 지니고 함수만을 이용하여 단일 연결 리스트를 구현하는데 성공했다! 이제 이를 응용하면 스택, 큐, 트리 등 다양한 자료구조를 구현하는 것도 가능하다."}),"\n",(0,t.Y)(s.h2,{id:"커링을-이용한-파이프라인",children:(0,t.Y)(s.a,{href:"#커링을-이용한-파이프라인",children:"커링을 이용한 파이프라인"})}),"\n",(0,t.FD)(s.p,{children:["함수형 자료구조를 만드는 것에는 성공했지만 코드를 보다시피 사용하기에는 많이 불편하다. 함수 합성은 이전에 작성했던 코드 외에도 메서드 체이닝, 파이프라인 등 다양한 방법으로 사용할 수 있다. 여기서는 파이프라인을 구현해보자. 파이프라인은 함수를 연속적으로 실행하는 것을 의미한다. Elixir와 같은 언어는 파이프 연산자(",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">|></code>'}}),")를 제공해주기도 하지만 TypeScript는 제공해주지 않는다. 그래서 직접 구현할 필요가 있다."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["구현은 어렵지 않다. ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pipe</code>'}})," 함수도 고차 함수기 때문에 복잡할 수 있지만 내용을 보면 단순히 함수 배열을 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reduce</code>'}}),"를 통해 순회하면서 함수를 실행해줄 뿐이다. 문제는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pipe</code>'}})," 함수는 인자를 하나만 받기 때문에 앞서 작성한 함수 중 인자를 2개 이상 받는 함수는 수정이 필요하다. 이를 해결하기 위해서는 커링을 이용해야 한다. 커링은 함수를 인자를 하나만 받는 함수로 변환하는 것을 의미한다. 직접 앞서 구현한 여러 함수를 리팩토링 할 수도 있지만 여기서는 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">curry</code>'}}),"라는 함수를 만들어 변환해보자."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">curryFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">curryFn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> curryFn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["위 함수를 사용하면 기존에 만들어진 함수를 조각낼 수 있다. 예를 들어 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">append</code>'}})," 함수는 인자를 2개 받는 함수이다. 이를 커링을 이용하여 인자를 하나만 받는 함수로 변환해보자."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> curriedAppend <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>append<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">curriedAppend</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cons(1, Cons(2, Cons(3, Cons(4, null))))</span></code></pre></div>'}}),"\n",(0,t.FD)(s.p,{children:["이제 ",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pipe</code>'}})," 함수를 수정하여 인자를 2개 이상 받는 함수를 사용할 수 있도록 해보자."]}),"\n",(0,t.Y)(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// ... 앞서 구현한 함수들</span>\n<span class="token keyword">const</span> curriedAppend <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>append<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> curriedUpdate <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> curriedShift <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>shift<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>\n  <span class="token function">curriedAppend</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  curriedShift<span class="token punctuation">,</span>\n  <span class="token function">curriedUpdate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  toArray<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 3, 4]</span></code></pre></div>'}}),"\n",(0,t.Y)(s.p,{children:"코드를 선형적이고 더 읽기 쉽게 만들어졌다."}),"\n",(0,t.Y)(s.h1,{id:"마치며",children:(0,t.Y)(s.a,{href:"#마치며",children:"마치며"})}),"\n",(0,t.FD)(s.p,{children:["필자에게 함수형 자료구조가 필요할까?라는 질문을 한다면 ",(0,t.Y)(s.strong,{children:"실무적인 부분에서 필요없다"}),"라고 답할 수 있다. 필자가 쉽게 설명하지 못하는 탓도 있지만 기존 자료구조보다 훨씬 더 복잡하고 어렵기까지 하다. 하지만 이 내용을 이해한다면 조금 더 코드를 작성하는 것에 재미를 붙일 수 있을 것이라 믿는다."]})]})}s.default=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,p.R)(),n.components);return s?(0,t.Y)(s,Object.assign({},n,{children:(0,t.Y)(e,n)})):e(n)}},5799:function(n,s,a){var t=a(9474),p=a(1615),o=a(6494);s.A=n=>{let{src:s,caption:a,width:e,expandable:c}=n;const{0:l,1:u}=(0,t.useState)(!1);return(0,o.FD)("figure",{children:[(0,o.Y)("img",{src:s,width:e,style:{cursor:c?"zoom-in":"default"},onClick:c?()=>u(!0):void 0}),a&&(0,o.Y)("figcaption",{dangerouslySetInnerHTML:{__html:a}}),l&&p.createPortal((0,o.Y)("div",{style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"zoom-out",backgroundColor:"rgba(0, 0, 0, 0.7)"},onClick:()=>u(!1),children:(0,o.Y)("div",{style:{borderRadius:8,maxWidth:1200,width:"80%",position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white"},children:(0,o.Y)("img",{src:s,width:"100%"})})}),document.body)]})}}}]);
//# sourceMappingURL=fd0ccd94fed539b3812eda3829230361820eae86-42b209f2c2d04f2e2fdd.js.map