{"version":3,"file":"component---src-posts-2024-06-15-log-7-mdx-38e3f22d47d5988c0d8a.js","mappings":"+NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,2GAA4G,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,sKAAuK,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,2MAA4M,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,qKACxsB,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECeA,MAAMU,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://kciter.so/./src/posts/2024-06-15-log-7.mdx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"일에 대한 많은 방법론과 프레임워크가 피드백 루프를 강조합니다. 피드백 루프란 한 이터레이션을 거친 후 회고를 통해 고쳐야 할 점을 찾고 다음엔 더 잘해보자 같은 거라 볼 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"개선할 수 있는 기회를 만들어준다는 측면에서 피드백 루프는 중요합니다. 그렇지만 중요한 건 ‘루프’가 아닌 ‘피드백’이라는 점을 잊으면 안 됩니다. 많은 조직이 피드백 루프를 사용하지만 큰 효과를 못 보는 경우가 많습니다. 이는 ‘피드백을 통한 개선’보다 ‘루프’에 더 집중했기 때문입니다.\"), \"\\n\", React.createElement(_components.p, null, \"피드백은 가설에 대한 평가이자 다음 가설을 정하는 과정입니다. 그렇기 때문에 피드백은 짧지만 가장 중요한 순간이라 할 수 있습니다. 한 루프를 끝낼 때 우리는 ‘오늘도 열심히 일했다’라는 성취감을 느끼게 됩니다. 그래서 피드백 파트가 제대로 이뤄지지 않더라도 유야무야 넘어갈 때가 많습니다. 이런 부분이 ‘피드백 루프’의 가장 큰 함정이라 할 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"본질에 집중한다면 피드백을 주고받고 새로운 가설을 세우는 것에 많은 노력을 들여야 합니다. 서로에게 적절한 긴장감을 부여하고 적절한 피드백이 나올 수 있도록 유도해야 합니다. 저 또한 쉽게 말했지만 잘 해내기 어렵다고 느낍니다. 말뿐이 아닌 정말 제대로 할 수 있는 사람이 되어야겠습니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}