{"version":3,"file":"afe66de984a9397e0e7b7d951f68cb2f67c5e927-1968a66f9b2102a127fe.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2021-03-14-effective-atomic-design.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource @emotion/react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"@emotion/react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    span: \"span\",\n    h3: \"h3\",\n    sup: \"sup\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    section: \"section\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"소프트웨어 개발 중 설계에서 가장 중요한 것은 \", _jsx(_components.strong, {\n        children: \"모듈화와 추상화\"\n      }), \" 두 가지라고 할 수 있다. 웹 프론트엔드 업계는 이미 React, Vue.js, Angular와 같은 오픈소스 프레임워크를 통해 끝을 달리는 추상화와 모듈화를 보여주고 있다. 특히 모듈화 측면에서 세 프레임워크는 컴포넌트 인터페이스를 매우 쉽게 제공하기 때문에 프레임워크 사용자는 효율적인 재사용이 가능하고 캡슐화된 컴포넌트를 아주 간단하게 만들 수 있다. 그렇기에 우리는 좋은 컴포넌트를 만들기 위해 올바른 방법과 규칙을 정하기만 하면 된다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이번 포스팅의 핵심 키워드인 \", _jsx(_components.a, {\n        href: \"https://bradfrost.com/blog/post/atomic-web-design/\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Atomic Design\"\n      }), \"은 좀 더 효과적인 컴포넌트를 구성하기 위한 방법론이다. 최근들어 크게 유행하고 많은 기업이 도입하는 방법론이지만 Brad Frost가 2013년에 처음 공개했으니 생각보다 오래된 방법론이다. 아마 본격적인 컴포넌트 주도 개발 방식이 자리 잡게 된 후 주목을 받은 것 같다. Brad Frost가 직접 쓴 \", _jsx(_components.a, {\n        href: \"https://shop.bradfrost.com/\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"책\"\n      }), \"을 따로 $10에 판매하기도 하니 관심이 있다면 구매해보는 것도 괜찮을 것 같다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"본론으로 돌아와 이번 포스트에서 다룰 이야기는 \", _jsx(_components.strong, {\n        children: \"Atomic Design을 더 잘 쓰기 위한 방법\"\n      }), \"에 대해 소개한다. 물론 그전에 Atomic Design이 무엇인지 간단히 알아보고 진행하도록 하자.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"atomic-design이란\",\n      children: _jsx(_components.a, {\n        href: \"#atomic-design이란\",\n        children: \"Atomic Design이란?\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Atomic design is methodology for creating design systems. \", _jsx(\"br\", {}), \"- Brad Frost\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Atomic Design은 그 이름처럼 화학 용어를 이용하여 설명하는 컴포넌트 관리(디자인 시스템) 방법론이다.\"\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/atomic-design.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"좌측부터 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Atom(원자), Molecule(분자), Organism(유기체), Template, Page</code>\"\n        }\n      }), \"로 이루어져있다. 기초적인 화학 내용이 기억 안나는 사람들을 위해 간단히 설명하자면 원자는 물질을 구성하는 가장 작은 입자고 원자가 모여 분자가 구성된다. 유기체는 활동하는 생명체를 의미하므로 훨씬 큰 개념이라 볼 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"어떻게보면 과거부터 우리가 해왔던 컴포넌트 구성 방법과 크게 다르지 않다. 보통 개발자들은 Atomic Design을 모르던 시절에도 본능적으로 작은 단위부터 큰 단위로 컴포넌트 단위를 나누고 상향식 접근을 통해 컴포넌트를 구성해왔다. 결국 Atomic Design은 우리가 본능적으로 해왔던 것을 \", _jsx(_components.strong, {\n        children: \"직관적인 용어와 문서로 정리\"\n      }), \" 한 것이라고 볼 수 있다.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"atom\",\n      children: _jsx(_components.a, {\n        href: \"#atom\",\n        children: \"Atom\"\n      })\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/atoms.png\",\n      caption: \"더 이상 쪼갤 수 없는 단위\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Atom은 더 이상 쪼갤 수 없는 단위에 해당하는 요소에 해당한다. 혹은 애니메이션, 폰트, 색상 등과 같이 요소가 아닌 속성도 Atom에 해당된다. 가장 작은 단위인 만큼 가장 많이 재사용된다고 볼 수 있다.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"molecule\",\n      children: _jsx(_components.a, {\n        href: \"#molecule\",\n        children: \"Molecule\"\n      })\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/molecule.png\",\n      caption: \"여러 개의 Atom이 모여 Molecule이 된다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Molecule은 여러 개의 Atom이 모여 목적성이 있는 하나의 컴포넌트가 된다. 가급적 많은 곳에서 재사용되도록 컴포넌트를 구성하되 \\\"한 가지 일을 한다\\\"라는 원칙을 지키며 만드는 것이 좋다.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"organism\",\n      children: _jsx(_components.a, {\n        href: \"#organism\",\n        children: \"Organism\"\n      })\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/organism.png\",\n      caption: \"Organism은 사용자에게 의미있는 단계라고 할 수 있다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Molecule까지는 사용자에게 크게 의미 있는 인터페이스라고 볼 수는 없었다. Organism은 사용자에게 의미 있는 정보를 제공하거나 인터렉션 할 수 있는 UI를 제공하는 등 서비스로서 의미를 가지는 인터페이스라고 볼 수 있다. 이 단계부터 재사용성이 크게 줄어든다.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"template\",\n      children: _jsx(_components.a, {\n        href: \"#template\",\n        children: \"Template\"\n      })\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/template.png\",\n      caption: \"Template은 와이어 프레임과 비슷한 개념이다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Template은 흔히 사용해왔던 Layout과 비슷한 개념으로 볼 수도 있다. 더 정확하게 말하자면 실제 콘텐츠가 입혀지기 전 UI 요소, 레이아웃, 기능이 어떻게 배치될지 정하는 와이어 프레임이라고 볼 수 있다. 따라서 자주 재사용되는 컴포넌트가 된다.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"page\",\n      children: _jsx(_components.a, {\n        href: \"#page\",\n        children: \"Page\"\n      })\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/page.png\",\n      caption: \"Page는 실제 데이터가 입혀진 화면 컴포넌트다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Page는 사용자가 볼 수 있는 최종 콘텐츠가 보이는 화면이다. 사용자와 인터렉션이 발생하거나 API 호출 등을 통해 사이드 이펙트가 발생 할 수 밖에 없는 컴포넌트기도 하다. 일반적으론 하나의 URI 당 하나의 Page 컴포넌트만 존재한다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"why-effective\",\n      children: _jsx(_components.a, {\n        href: \"#why-effective\",\n        children: \"Why Effective?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Atomic Design에 대한 설명만 본다면 컴포넌트를 나누는 단계가 명확해보이기에 크게 문제가 없어보인다. 하지만 실제 구현을 하다보면 애매모호한 부분이 생기고 팀 내에서도 해석이 달라지기에 결국 규칙을 만들게 된다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그 원인을 보자면 Atomic Design은 방법론이지만 \", _jsx(_components.strong, {\n        children: \"레이어 아키텍처 패턴으로 이루어진 컨셉\"\n      }), \"으로도 볼 수 있기 때문이다. 우리는 이러한 컨셉을 구현하는 과정에서 개발 환경, 구성원 등 다양한 고려 사항이 생기기 때문에 컨셉을 여러 방법으로 해석할 수 있고 심한 경우 컨셉을 잘못 이해할 수도 있다. 예를 들어, 유명한 아키텍처 패턴인 MVC(Model-View-Controller) 패턴을 구현하더라도 다양한 해석이 존재하고 애플이 iOS에 적합하도록 CocoaMVC\", _jsx(_components.sup, {\n        children: _jsx(_components.a, {\n          href: \"#user-content-fn-1\",\n          id: \"user-content-fnref-1\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"1\"\n        })\n      }), \"로 완전한 재해석한 것처럼 컨셉을 크게 바꿔버릴 수도 있다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"따라서 우리는 아키텍처를 올바르게 구현하기 위해 컨셉을 잘 이해하고 원칙을 정해야 한다. 필자는 Atomic Design을 적용하며 겪은 시행착오를 통해 나름 보완점과 설명이 필요한 부분을 정리하여 7가지 표준적인 규칙을 정했다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"atom의-범위\",\n      children: _jsx(_components.a, {\n        href: \"#atom의-범위\",\n        children: \"Atom의 범위\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"앞서 Atom은 눈에 보이는 요소를 포함하여 애니메이션, 폰트, 색상 등과 같이 요소가 아닌 속성도 Atom에 해당된다고 설명했다. 최소 범위는 HTML 요소 혹은 속성 하나로 정할 수 있지만 최대 범위는 어디까지 정해야 할까? Atom의 경우 최대한 재사용이 가능하도록 만들어야 하지만 지나치면 오히려 사용하기 힘들어질 뿐이다. 필자의 경우 요소와 속성을 포함하여 \", _jsx(_components.strong, {\n        children: \"UI가 시각적으로 하나의 덩어리이며 한 가지 역할을 한다면 Atom\"\n      }), \"으로 인정하기로 규칙을 정했다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/facebook-atom-example.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어, 페이스북 게시물을 본다면 프로필 이미지가 보이는 아바타와 링크에 대한 정보를 볼 수 있는 아이콘 버튼은 여러 요소가 중첩되고 다양한 속성이 추가되었지만 시각적으로 하나의 덩어리로 포함되고 각각 프로필 이미지를 보여주는 것과 버튼이라는 한 가지 목적을 지니고 있기에 Atom이라 볼 수 있다.\"\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/button-example.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Atom의 범위는 디자인 원칙과 크게 맞닿아있다. 위에 첨부된 사진을 보면 디자인 원칙에 따라 어떤 역할이든 통일된 버튼을 사용할 수 있고 역할별로 다른 버튼을 사용할 수도 있다. 전자의 경우 적합한 Atom 컴포넌트를 하나 만들면 되지만 후자의 경우 역할 별로 Atom을 만들지 Atom 하나가 옵션에 따라 변할지 정해야 한다. 좋은 선택을 하기 위해선 확장 가능성, 수정될 가능성 등 디자인 관점에서 여러 가지 상황을 고려해야 한다. 그렇기 때문에 우리가 Atom 컴포넌트를 잘 만들기 위해선 어느 정도 서비스에 적용되는 \", _jsx(_components.strong, {\n        children: \"디자인 원칙을 이해할 필요\"\n      }), _jsx(_components.sup, {\n        children: _jsx(_components.a, {\n          href: \"#user-content-fn-2\",\n          id: \"user-content-fnref-2\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"2\"\n        })\n      }), \"가 있다.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"이-컴포넌트는-molecule-organism-어느-쪽\",\n      children: _jsx(_components.a, {\n        href: \"#이-컴포넌트는-molecule-organism-어느-쪽\",\n        children: \"이 컴포넌트는 Molecule, Organism 어느 쪽?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Atomic Design 방법론으로 컴포넌트 시스템을 구성하다 보면 어느 순간 반드시 Molecule로 둘지 Organism에 둘지 고민하는 순간이 온다. 그런 경우 무의식적으로 컴포넌트가 차지하는 영역이 크다면 Organism에 넣고 아닌 경우 Molecule에 넣을 때가 많지만 별로 좋은 방법은 아니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"다른 사례를 보면 React 용 Atomic Design 기반 Starter Kit인 \", _jsx(_components.a, {\n        href: \"https://arc.js.org/\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"ARc\"\n      }), \"는 일단 너무 고민하지 말고 \", _jsx(_components.a, {\n        href: \"https://github.com/diegohaz/arc/wiki/Atomic-Design#do-not-worry\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"아무 곳에 넣고\"\n      }), \" 추후 어떤 레이어에 속해야 하는지 알게 되면 정리하라고 권한다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"소프트웨어 개발자는 항상 바쁘기 때문에 ARc의 구분 방법도 괜찮다고 생각한다. 하지만 필자가 생각하는 구분법은 다음과 같다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Molecule은 데이터를 표시하고 이벤트를 받을 수 있지만 \\\"하나의 역할\\\"만을 가진다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Organism은 사용자에게 의미를 가지는 \", _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/User_story\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"기능적 요구사항\"\n        }), \"에 포함되는 경우에 해당되는 컴포넌트다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"네이버 메인을 필자 기준대로 분석한다면 다음과 같다. 파란색이 Organism 주황색이 Molecule이다.\"\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/naver-main.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"컴포넌트의 복잡성이나 크기로만 생각한다면 광고 영역은 Organism이 아닌 Molecule로 들어갈 것이다. 하지만 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">사용자는 광고를 본다</code>\"\n        }\n      }), \", \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">광고는 주기적으로 변경된다</code>\"\n        }\n      }), \"라는 기능적 요구사항을 가지는 컴포넌트기 때문에 필자는 Organism에 포함시켰다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"한편 날씨 정보를 보여주는 곳은 작은 영역을 차지하기에 Molecule처럼 보일 수 있다. 여기서 중요한 것은 해당 컴포넌트가 날씨 정보를 보여주는, 단순히 데이터에 맞춰 UI를 표시하는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">하나의 역할</code>\"\n        }\n      }), \"을 가진 컴포넌트라는 점이다. 이런 컴포넌트는 주입받은 데이터가 어제 날씨인지 오늘 날씨인지 심지어 아무렇게나 넣은 데이터인지 알 수 없다. 따라서 Molecule에 속한다. 하지만 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">현재 날씨 정보를 실시간으로 업데이트하며 보여준다</code>\"\n        }\n      }), \"는 요구사항은 컴포넌트를 감싸는 Organism이 처리하게 된다. 이처럼 \", _jsx(_components.strong, {\n        children: \"기능적 요구사항\"\n      }), \" 관점에서 본다면 대부분은 결정할 수 있다. 하지만 그럼에도 불구하고 결정하기 어려운 컴포넌트가 등장한다면 ARc처럼 일단 아무곳이나 넣고 나중에 고민해보자.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"순수한-컴포넌트\",\n      children: _jsx(_components.a, {\n        href: \"#순수한-컴포넌트\",\n        children: \"순수한 컴포넌트\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"일반적으로 컴퓨터 공학 세계에서 Side Effect는 컨텍스트가 외부의 영향으로 상태가 변경되는 것을 의미한다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> tax <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">a<span class=\\\"token punctuation\\\">,</span> b</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// add 함수는 외부 변수 tax에 영향을 받기 때문에</span>\\n  <span class=\\\"token comment\\\">// Side Effect가 발생하는 함수라고 할 수 있다.</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b <span class=\\\"token operator\\\">+</span> tax<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">a<span class=\\\"token punctuation\\\">,</span> b</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// minus 함수는 외부에 의해 로직이 변경되지 않기에</span>\\n  <span class=\\\"token comment\\\">// Side Effect가 없는 함수라고 할 수 있다.</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Side Effect가 발생하는 요소로 위 처럼 글로벌 변수를 함수 내에 포함시키나 외부 이벤트가 개입되는 등 다양한 원인이 있지만 일반적으로 볼 수 있는 원인은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">네트워크 통신</code>\"\n        }\n      }), \"이라고 할 수 있다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/api'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 어떤 결과일지는 미지수</span>\\n  <span class=\\\"token keyword\\\">return</span> response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드처럼 네트워크 통신을 통해 데이터를 받아올 경우 여러 상황이 발생할 수 있다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"정상적으로 데이터를 받는다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"서버에 에러가 발생한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"통신이 불가능한 환경이다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"통신 도중 회선이 끊겼다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"...\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"통신이 실패할 수 있는 원인은 무수히 많다. 이처럼 외부 요인에 의해 로직의 결과가 달라질 수 있기에 네트워크 통신은 대표적인 Side Effect라고 할 수 있다. 우리는 효율적인 재사용과 안정적인 컴포넌트를 만들기 위해 Side Effect가 존재하지 않는 컴포넌트로 만들 필요가 있다. 필자는 사내에서 이러한 컴포넌트를 순수 컴포넌트\", _jsx(_components.sup, {\n        children: _jsx(_components.a, {\n          href: \"#user-content-fn-3\",\n          id: \"user-content-fnref-3\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"3\"\n        })\n      }), \"라고 부른다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/layer.png\",\n      caption: \"필자가 사용하는 Atomic Design 레이어\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Page 컴포넌트는 외부 데이터를 받아 사용자에게 보여줘야 하기 때문에 어쩔 수 없이 Side Effect가 발생한다. 하지만 Atom, Molecule, Organism은 Page로부터 데이터를 주입받을 수 있기에 Side Effect 없이 순수한 컴포넌트를 만들 수 있다. 순수 컴포넌트는 외부 개입이 없어도 독립적으로 존재할 수 있기 때문에 Storybook 등을 통한 테스트도 편리하다. 참고로 순수 컴포넌트로 유지되기 위해선 상태 관리 라이브러리를 통해 데이터를 전달받는 것도 금지한다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"때로는-더러운-컴포넌트도-필요하다\",\n      children: _jsx(_components.a, {\n        href: \"#때로는-더러운-컴포넌트도-필요하다\",\n        children: \"때로는 더러운 컴포넌트도 필요하다\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"필자는 Side Effect가 발생하는 컴포넌트를 더러운 컴포넌트라고 부른다. 어감이 조금 강한 듯한 기분도 들지만 실제로 Side Effect가 발생하는 로직이 포함되면 코드가 더러워지기 때문에 적합하다는 생각이 든다. 여하튼, 세상엔 때때로 때묻은 사람도 필요한 법이다. 마찬가지로 상황에 따라 컴포넌트 세상에도 더러운 컴포넌트가 필요하다.\"\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/layer-dependency.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Atomic Design 설계 원칙대로 작업한다면 Page에서 시작하여 Atom까지 데이터를 주입받게 된다. 때문에, 데이터를 전달하기 위해 매번 깊게 들어가야 하거나 매 페이지마다 호출해야 하는 API가 있다면 상당히 귀찮아진다.\"\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/naver-webtoon.png\",\n      caption: \"어떤 페이지여도 우측 하단의 인기급상승 만화는 보인다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"네이버 웹툰 페이지를 예로 들자면 내가 월요웹툰 페이지로 접속하던 목요웹툰 페이지로 접속하던 우측 아래 인기급상승 만화 영역은 항상 데이터를 받아와야 한다. 이런 경우 Layout에 해당하는 Template에서 데이터를 호출할 수도 있지만 우리는 Template 컴포넌트를 순수 컴포넌트로 사용하기로 약속했기 때문에 항상 Page를 통해 데이터를 주입받아야 한다.\"\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/layer-2.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그렇기 때문에 Page는 너무 많은 책임을 지고있다고 볼 수 있다. 따라서 책임을 분산하고 사용 편의성을 위한 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Wrapped</code>\"\n        }\n      }), \"라는 레이어를 하나 더 두기로 결정했다. Wrapped는 Side Effect를 허락한 컴포넌트로, 기존 순수 컴포넌트를 감싸서 Side Effect가 발생하는 새로운 컴포넌트로 만든다. 만약 다시 네이버 웹툰을 예로 들자면 Layout에 해당하는 Template을 감싸 인기급상승 웹툰 데이터를 받아오는 네트워크 로직을 추가하는 Wrapped 컴포넌트를 만들 수 있다. 혹은 하위 레이어까지 데이터를 전달하는 경우가 많아 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Redux</code>\"\n        }\n      }), \"나 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">MobX</code>\"\n        }\n      }), \"같은 상태 관리 라이브러리를 사용하거나 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Context API</code>\"\n        }\n      }), \"를 사용하는 경우에도 Wrapped 컴포넌트로 만들어서 사용할 수 있다.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"애매한-template-해석\",\n      children: _jsx(_components.a, {\n        href: \"#애매한-template-해석\",\n        children: \"애매한 Template 해석\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Atomic Design 설명을 볼 때 Template은 완전히 Layout의 용도로 사용되고 있다. 실제로 구현할 때도 Layout 용도로 사용될 때가 많지만 작업하다 보면 다음과 같은 의문을 품을 수 있다.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Template에 또 Template을 추가해도 괜찮은가?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Page에 대응되는 Template이 아닌 부분 영역에 대한 Template을 만들어도 되는가?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"결론부터 말하자면 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">1</code>\"\n        }\n      }), \"의 경우 Page 영역에서 조합하는 것을 추천하고 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">2</code>\"\n        }\n      }), \"의 경우 만드는 것을 추천한다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/slack.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Slack을 예로 들면 Template으로 사용될 수 있는 영역이 세 곳이나 존재한다. 각각 워크스페이스 목록 영역, 채널 목록 영역, 채팅 영역이다. 만약 이 구조를 코드로 구현한다면 다음처럼 될 것이다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Page</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token comment\\\">// 대충 이런 형태가 될 것이다</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">WorkspaceListTemplate</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">ChannelListTemplate</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">ChatRoomTemplate</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n        </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Content</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">ChatRoomTemplate</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">ChannelListTemplate</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">WorkspaceListTemplate</span></span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> Page<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"따라서 꼭 Page에 대응되지 않더라도 부분적으로 와이어 프레임을 구성할 수 있다면 Template으로 만드는 것을 권장한다. 그리고 만들어진 Template들은 Page에서 조합하여 사용하면 된다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"요소-반복-컴포넌트-사용법\",\n      children: _jsx(_components.a, {\n        href: \"#요소-반복-컴포넌트-사용법\",\n        children: \"요소 반복 컴포넌트 사용법\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포넌트 리스트를 보여줘야 하는 경우 또 다시 우리는 고민을 하게 된다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Organism 하위에 Molecule로 구현해야 할지\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Template에 Organism을 반복할지\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 정하더라도 결국 또 다시 고민에 빠지게 된다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Organism 하위에 Molecule을 두려했더니 Molecule치고 너무 큰 것 같다면?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Template에 Organism을 반복하려 했더니 재사용이 전혀 없어서 Template을 사용하기 애매하다면?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"결국 요소를 반복하는 컴포넌트를 구성할 때는 다음과 같이 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">재사용성</code>\"\n        }\n      }), \"을 고려하여 만들면 된다.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"재사용이-없는-컴포넌트의-경우\",\n      children: _jsx(_components.a, {\n        href: \"#재사용이-없는-컴포넌트의-경우\",\n        children: \"재사용이 없는 컴포넌트의 경우\"\n      })\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/naver-news-organism.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 뉴스 컴포넌트를 보면 리스트 요소로 표현되는 뉴스 하나가 Molecule로 처리하기엔 너무 크다. 오히려 사용자에게 의미를 가진다는 점에서 Organism에 적합하다. 그래서 Template을 사용하려 했지만 다른 곳에서 재사용되지 않는 경우 사용하기 애매해진다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그래서 다른 곳에서 재사용할 가능성이 없는 컴포넌트라면 Organism으로 작성하되 내부 리스트 아이템을 컴포넌트 종속적인 내부 컴포넌트로 만드는 것이 좋다. 이때 \", _jsx(_components.strong, {\n        children: \"내부 컴포넌트는 절대 외부에서 사용되지 않도록 주의\"\n      }), \"한다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">- Organisms\\n  - News\\n    - index.tsx\\n    - ListItem.tsx</code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> ListItem <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./ListItem.tsx'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">News</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> news <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token punctuation\\\">{</span>news<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">item</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">ListItem</span></span> <span class=\\\"token attr-name\\\">data</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>item<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token plain-text\\\">\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> News<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디렉토리 구조나 코드는 위와 같이 작성할 수 있다.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"재사용되는-컴포넌트의-경우\",\n      children: _jsx(_components.a, {\n        href: \"#재사용되는-컴포넌트의-경우\",\n        children: \"재사용되는 컴포넌트의 경우\"\n      })\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2021-03-14-effective-atomic-design/naver-news-template.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 내부 리스트 아이템이 여러 곳에서 재사용된다면 Template을 이용하여 감싸고 내부 리스트 아이템은 Organism이나 Molecule 컴포넌트로 만들어 사용하는 것이 좋다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"modal-tooltip과-같은-ui-처리\",\n      children: _jsx(_components.a, {\n        href: \"#modal-tooltip과-같은-ui-처리\",\n        children: \"Modal, Tooltip과 같은 UI 처리\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"컴포넌트 레이어를 결정할 때 가장 애매모호한 컴포넌트는 Modal과 Tooltip, Popover와 같은 사용자 인터렉션에 의해 등장하는 컴포넌트다. 특히 Modal같은 경우 내용이 복잡할 수 있는데 이런 경우 레이어 의존성이 역전되어 버린다. 따라서 필자가 추천하는 방법은 Modal, Popover와 같은 컴포넌트는 \", _jsx(_components.strong, {\n        children: \"더러운 컴포넌트에서 주입\"\n      }), \"하는 방식이다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// Bad : 컴포넌트에서 직접 사용하는 대신</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>visible<span class=\\\"token punctuation\\\">,</span> setVisible<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setVisible</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click me</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Modal</span></span> <span class=\\\"token attr-name\\\">visible</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>visible<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n        </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Content</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">Modal</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// Good : 더러운 컴포넌트에서 주입하는 것을 추천</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Component</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> onClick<span class=\\\"token punctuation\\\">,</span> modal <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>onClick<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click me</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token punctuation\\\">{</span>modal<span class=\\\"token punctuation\\\">}</span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Wrapped</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>visible<span class=\\\"token punctuation\\\">,</span> setVisible<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">ModalComponent</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> visible <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Modal</span></span> <span class=\\\"token attr-name\\\">visible</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>visible<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Content</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">Modal</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">handleClick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setVisible</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>visible<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Component</span></span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">modal</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">ModalComponent</span></span> <span class=\\\"token attr-name\\\">visible</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>visible<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> Wrapped</code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고로 Modal, Popover는 Template과 같은 역할을 하기 때문에 별도 구현한다면 Template 레이어에 위치한다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"마치며\",\n      children: _jsx(_components.a, {\n        href: \"#마치며\",\n        children: \"마치며\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"필자는 사내에서 효율적으로 작업하기 위해 위와 같은 규칙을 만들었지만 여러분이 규칙을 꼭 따라야 하는 것은 아니다. 위 규칙은 필자가 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">React</code>\"\n        }\n      }), \"로 업무를 하며 필요하다고 느낀 규칙이기 때문에 다른 팀에서 위 규칙을 이용하여 작업할 땐 안 맞는 부분이 생길 수도 있다. 실제로 Atomic Design을 재해석하여 사용하는 여러 방식이 존재하며 필자의 해석과는 다르지만 잘 사용하고 있는 사람들이 많다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/diegohaz/arc\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"ARc\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.youtube.com/watch?v=33yj-Q5v8mQ\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Line Entry의 Atomic Design 적용기\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://seunghyun.dev/development/abem/\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"ABEM\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"중요한 것은 Atomic Design을 포함하여 다양한 방법론이나 패턴을 팀에 적용할 때 맹목적으로 따르면 안된다는 것이다. 주로 대중적으로 알려진 것은 범용성을 위해 핵심적인 것만 다루기 때문에 이를 업무에 적용하기 위해선 팀 구성원에 맞는 규칙을 새롭게 정의해야 한다. 꼭 Atomic Design이 아니더라도 이 사실을 꼭 기억해두길 바란다.\"\n    }), \"\\n\", _jsxs(_components.section, {\n      \"data-footnotes\": true,\n      className: \"footnotes\",\n      children: [_jsx(_components.h2, {\n        className: \"sr-only\",\n        id: \"footnote-label\",\n        children: _jsx(_components.a, {\n          href: \"#footnote-label\",\n          children: \"Footnotes\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          id: \"user-content-fn-1\",\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"MVC라는 이름이 붙었지만 사실상 MVP 패턴과 동일하다. \", _jsx(_components.a, {\n              href: \"#user-content-fnref-1\",\n              \"data-footnote-backref\": true,\n              className: \"data-footnote-backref\",\n              \"aria-label\": \"Back to content\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          id: \"user-content-fn-2\",\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"그렇기에 커뮤니케이션을 위한 디자인 시스템이 등장하게 되었다. \", _jsx(_components.a, {\n              href: \"#user-content-fnref-2\",\n              \"data-footnote-backref\": true,\n              className: \"data-footnote-backref\",\n              \"aria-label\": \"Back to content\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          id: \"user-content-fn-3\",\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"React의 PureComponent를 말하는 것은 아니다. \", _jsx(_components.a, {\n              href: \"#user-content-fnref-3\",\n              \"data-footnote-backref\": true,\n              className: \"data-footnote-backref\",\n              \"aria-label\": \"Back to content\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","a","h2","blockquote","span","h3","sup","ul","li","ol","section","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","rel","id","Image","src","dangerouslySetInnerHTML","__html","caption","className","wrapper","MDXLayout","_ref","width","expandable","isExpanded","toggleExpanded","useState","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body"],"sourceRoot":""}