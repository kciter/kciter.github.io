{"version":3,"file":"component---src-pages-bookshelf-tsx-247fbd23c9ac628bc916.js","mappings":"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","sources":["webpack://kciter.so/./src/components/SEO/index.tsx","webpack://kciter.so/./src/pages/bookshelf.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SEOProps {\n  children?: React.ReactNode;\n  title?: string;\n  description?: string;\n  imagePath?: string;\n}\n\nconst SEO = ({ children, title, description }: SEOProps) => {\n  const { site } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n        }\n      }\n    }\n  `);\n\n  const metaDescription = description || site.siteMetadata.description;\n  const metaTitle = title || site.siteMetadata?.title;\n\n  return (\n    <>\n      <html lang=\"ko\" />\n      <title>{metaTitle} | kciter.so</title>\n      <meta id=\"description\" name=\"description\" content={metaDescription} />\n      <meta id=\"og:title\" property=\"og:title\" content={metaTitle} />\n      <meta id=\"og:description\" property=\"og:description\" content={metaDescription} />\n      <meta id=\"og:type\" property=\"og:type\" content=\"website\" />\n      <meta id=\"og:site_name\" property=\"og:site_name\" content=\"kciter.so\" />\n      <meta id=\"og:locale\" property=\"og:locale\" content=\"ko_KR\" />\n      <meta id=\"twitter:card\" name=\"twitter:card\" content=\"summary\" />\n      <meta id=\"twitter:creator\" name=\"twitter:creator\" content=\"Sunhyoup Lee\" />\n      <meta id=\"twitter:title\" name=\"twitter:title\" content={metaTitle} />\n      <meta id=\"twitter:description\" name=\"twitter:description\" content={metaDescription} />\n      <meta id=\"og:image\" property=\"og:image\" content=\"https://kciter.so/images/og.png\" />\n      {children}\n\n      {/* <Helmet\n        htmlAttributes={{\n          ko: 'ko'\n        }}\n        title={metaTitle}\n        titleTemplate={title ? `%s | kciter.so` : undefined}\n        meta={[\n          {\n            name: `description`,\n            content: metaDescription\n          },\n          {\n            property: `author`,\n            content: `Lee Sun-Hyoup`\n          },\n          {\n            property: `og:title`,\n            content: metaTitle\n          },\n          {\n            property: `og:description`,\n            content: metaDescription\n          },\n          {\n            property: `og:type`,\n            content: `website`\n          },\n          {\n            property: `og:site_name`,\n            content: `kciter.so`\n          },\n          {\n            property: `og:locale`,\n            content: `ko_KR`\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`\n          },\n          {\n            name: `twitter:creator`,\n            content: 'Sunhyoup Lee'\n          },\n          {\n            name: `twitter:title`,\n            content: metaTitle\n          },\n          {\n            name: `twitter:description`,\n            content: metaDescription\n          },\n          {\n            property: `og:image`,\n            content:\n              meta.find((item: any) => item.property === 'og:image')?.content ??\n              'https://kciter.so/images/og.png'\n          }\n        ].concat(meta)}\n      /> */}\n    </>\n  );\n};\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n","import React from 'react';\nimport DefaultTemplate from '@templates/default';\nimport SEO from '@components/SEO';\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport styled from '@emotion/styled';\n\nconst BookshelfPage = () => {\n  const result = useStaticQuery(graphql`\n    {\n      allMdx(\n        sort: { fields: { date: DESC } }\n        filter: {\n          fields: { type: { eq: \"post\" } }\n          frontmatter: {\n            draft: { ne: true }\n            hide: { ne: true }\n            categories: { eq: \"book-report\" }\n          }\n        }\n      ) {\n        edges {\n          node {\n            excerpt\n            fields {\n              timeToRead {\n                minutes\n              }\n              date\n              slug\n            }\n            frontmatter {\n              tags\n              title\n              cover\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const posts = result.allMdx.edges;\n\n  return (\n    <DefaultTemplate>\n      <Container>\n        {posts.map((post: any) => (\n          <BookItem link={post.node.fields.slug} coverImage={post.node.frontmatter.cover} />\n        ))}\n      </Container>\n    </DefaultTemplate>\n  );\n};\n\nexport default BookshelfPage;\n\nexport const Head = () => {\n  return <SEO title=\"Bookshelf\" />;\n};\n\nconst Container = styled.div`\n  display: grid;\n  width: 90%;\n  margin: 0 auto;\n  position: relative;\n  grid-template-columns: repeat(3, 1fr);\n  column-gap: 12px;\n  padding: 4px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n\ninterface Props {\n  link: string;\n  coverImage: string;\n}\n\nconst BookItem = ({ link, coverImage }: Props) => {\n  return (\n    <ItemContainer>\n      <BookPage>\n        <BookPage>\n          <Inner />\n          <BookCover to={link}>\n            <img src={coverImage} />\n            <Effect />\n            <Light />\n          </BookCover>\n        </BookPage>\n      </BookPage>\n    </ItemContainer>\n  );\n};\n\nconst ItemContainer = styled.div`\n  position: relative;\n  cursor: default;\n  padding: 16px;\n  margin: 0;\n`;\n\nconst Inner = styled.div`\n  position: absolute;\n  width: 90%;\n  height: 96%;\n  top: 1%;\n  left: 16px;\n  border: 1px solid grey;\n  border-radius: 2px 6px 6px 2px;\n  background: white;\n  box-shadow:\n    10px 40px 40px -10px #00000030,\n    inset -2px 0 0 grey,\n    inset -3px 0 0 #dbdbdb,\n    inset -4px 0 0 white,\n    inset -5px 0 0 #dbdbdb,\n    inset -6px 0 0 white,\n    inset -7px 0 0 #dbdbdb,\n    inset -8px 0 0 white,\n    inset -9px 0 0 #dbdbdb;\n`;\n\nconst BookPage = styled.div`\n  position: relative;\n`;\n\nconst BookCover = styled(Link)`\n  display: block;\n  line-height: 0;\n  position: relative;\n  border-radius: 2px 6px 6px 2px;\n  box-shadow:\n    6px 6px 18px -2px rgba(0, 0, 0, 0.2),\n    24px 28px 40px -6px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease-in-out;\n  transform: perspective(2000px) rotateY(-15deg) translateX(-10px) scaleX(0.94);\n  cursor: pointer;\n\n  &:hover {\n    transform: perspective(2000px) rotateY(0deg) translateX(0px) scaleX(1);\n    transform-style: preserve-3d;\n    box-shadow:\n      6px 6px 12px -1px rgba(0, 0, 0, 0.1),\n      20px 14px 16px -6px rgba(0, 0, 0, 0.1);\n  }\n\n  img {\n    grid-row: 1 / -1;\n    grid-column: 1;\n    width: 100%;\n    border-radius: 2px 6px 6px 2px;\n  }\n`;\n\nconst Effect = styled.div`\n  position: absolute;\n  width: 20px;\n  height: 100%;\n  margin-left: 8px;\n  top: 0;\n  border-left: 2px solid rgba(0, 0, 0, 0.04);\n  background-image: linear-gradient(\n    90deg,\n    rgba(255, 255, 255, 0.2) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  transition: all 0.5s ease;\n  z-index: 5;\n\n  &:hover {\n    margin-left: 14px;\n  }\n`;\n\nconst Light = styled.div`\n  width: 95%;\n  height: 100%;\n  position: absolute;\n  border-radius: 3px;\n  background-image: linear-gradient(\n    90deg,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.2) 100%\n  );\n  top: 0;\n  right: 0;\n  opacity: 0.1;\n  transition: all 0.5s ease;\n  z-index: 4;\n`;\n"],"names":["SEO","_ref","_site$siteMetadata","children","title","description","site","useStaticQuery","metaDescription","siteMetadata","metaTitle","___EmotionJSX","React","lang","id","name","content","property","defaultProps","meta","BookshelfPage","posts","allMdx","edges","DefaultTemplate","Container","map","post","BookItem","link","node","fields","slug","coverImage","frontmatter","cover","Head","_styled","target","styles","ItemContainer","BookPage","Inner","BookCover","to","src","Effect","Light","Link"],"sourceRoot":""}