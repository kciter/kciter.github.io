{"version":3,"file":"8d0bdb405a0b0b3c7f7cc5146dcfaf0c94edb9cf-7137350ad6cceb0e03b5.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2022-08-16-polymorphic-react-component.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource @emotion/react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"@emotion/react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h1: \"h1\",\n    sup: \"sup\",\n    h2: \"h2\",\n    section: \"section\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"들어가기에 앞서 \", _jsx(_components.strong, {\n        children: \"Polymorphism\"\n      }), \"은 한국어로 다형성이라고 부르는데, \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">여러 개의 형태를 가진다</code>\"\n        }\n      }), \"라는 의미를 가진 그리스어에서 유래된 단어다. 그럼 이 글의 제목에 포함된 \", _jsx(_components.strong, {\n        children: \"Polymorphic\"\n      }), \"은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">다형의</code>\"\n        }\n      }), \" 혹은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">다양한 형태의</code>\"\n        }\n      }), \" 등으로 표현할 수 있을 것이다. 컴퓨터 과학에서 다형성은 프로그래밍적인 요소가 여러 형태로 표현 될 수 있는 것을 의미하는데 보통은 객체가 여러 자료형으로 나타날 수 있음을 표현할 때 사용한다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그럼 Polymorphic한 UI 컴포넌트는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">다양한 형태의 UI 컴포넌트</code>\"\n        }\n      }), \"라고 바꿔 말할 수 있을 것이다. 필자는 이 말이 다음과 같은 내용을 담고 있다고 생각한다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"다양한 Semantic을 표현할 수 있는 UI 컴포넌트\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다양한 속성을 가질 수 있는 UI 컴포넌트\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다양한 스타일을 가질 수 있는 UI 컴포넌트\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"좀 더 풀어서 설명하자면 웹 프론트엔드에서의 Polymorphic 컴포넌트는 코드에 따라 어떠한 요소(Element)도 될 수 있고 그에 따른 속성(Attribute)도 사용할 수 있다. 즉, 상황에 맞는 Semantic을 사용할 수 있고 앵커 태그처럼 특수한 용도로 사용되는 컴포넌트가 될 수도 있다. 결국 \", _jsx(_components.strong, {\n        children: \"無의 형태\"\n      }), \"에서 \", _jsx(_components.strong, {\n        children: \"무엇이든지 될 수 있는 컴포넌트\"\n      }), \"가 되는 것이 Polymorphic 컴포넌트고 가장 추상화된 형태의 컴포넌트라고 볼 수 있다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2022-08-16-polymorphic-react-component/step.png\",\n      caption: \"최종적으로 사용자에게 보이는 컴포넌트는 이러한 구현 과정을 거친다\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그래서 Polymorphic 컴포넌트는 React와 관련된 UIKit을 뜯어보면 높은 확률로 사용되고 있는 패턴이다. 예를 들면, MUI의 \", _jsx(_components.a, {\n        href: \"https://mui.com/material-ui/react-box/\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Box\"\n      }), \" 컴포넌트나 Mantine의 \", _jsx(_components.a, {\n        href: \"https://mantine.dev/core/box/\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Box\"\n      }), \" 컴포넌트를 예시로 들 수 있다. 두 UI 라이브러리는 Box라는 Polymorphic한 컴포넌트를 이용하여 재사용성을 높이고 다양한 컴포넌트를 확장성 있게 구현하고 있다. 굉장히 유용한 컴포넌트기 때문에 필자가 재직 중인 회사에서 만들고 사용하는 \", _jsx(_components.a, {\n        href: \"https://github.com/cobaltinc/co-design\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"디자인 시스템\"\n      }), \"에도 View 컴포넌트를 구현하여 비슷하게 사용하고 있다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아쉽게도 Polymorphic 컴포넌트와 관련된 자료는 한국어로 작성된 자료가 거의 없고 영문으로도 구체적인 설명한 자료는 찾기 힘들어 이번 기회에 관련된 내용을 포스팅 해보기로 했다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"문제-인식하기\",\n      children: _jsx(_components.a, {\n        href: \"#문제-인식하기\",\n        children: \"문제 인식하기\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"실제 사례를 보지 않는다면 이 컴포넌트가 왜 필요한지 모를 수 있다. 다음 코드를 살펴보자.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">/**\\n * Button.jsx\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> \\n      <span class=\\\"token attr-name\\\">style</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">backgroundColor</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'black'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">color</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'white'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span> \\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> \\n    <span class=\\\"token punctuation\\\">/></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * App.jsx\\n */</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Button <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Button'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Button</span></span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Good!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click Me!</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">Button</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"설명이 필요 없을 정도로 간단한 코드다. 단순하게 표현했지만 위 코드처럼 스타일만 적용한 컴포넌트는 실제로도 많이 사용된다. Button 컴포넌트는 prop으로 넘기는 값을 button 태그의 속성으로 전부 넘기기 때문에 꽤 확장성 있게 사용할 수 있는 컴포넌트라고 생각할 수 있다. 그런데 만약 버튼에 페이지 링크를 추가하고 싶다면 어떻게 해야 할까?\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Button <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Button'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://kciter.so<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n        </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Button</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click Me!</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">Button</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 처럼 작성할 수도 있겠지만 재사용성 측면에선 그다지 좋은 방법은 아니다. 추후 재사용을 고려하여 새로운 컴포넌트를 만들 수도 있다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">/**\\n * Button.jsx\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> \\n      <span class=\\\"token attr-name\\\">style</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">backgroundColor</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'black'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">color</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'white'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span> \\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> \\n    <span class=\\\"token punctuation\\\">/></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * LinkButton.jsx\\n */</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Button <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Button'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">LinkButton</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> href<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>href<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Button</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * App.jsx\\n */</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> LinkButton <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./LinkButton'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">LinkButton</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://kciter.so<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click Me!</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">LinkButton</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위와 같이 작성할 수도 있지만 이 경우 a 태그가 확장되지 않는다는 문제점이 있고 컴포넌트의 의존 관계가 새롭게 추가된다는 문제점이 있다. 그리고 만약 react-router나 Next.js를 사용하여 SPA를 위한 Link 컴포넌트를 사용한다면 또 새로운 컴포넌트를 만들어줄 수 밖에 없다. 이 문제의 해결법으로 Polymorphic 컴포넌트를 사용할 수 있다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"javascript에서-구현하기\",\n      children: _jsx(_components.a, {\n        href: \"#javascript에서-구현하기\",\n        children: \"JavaScript에서 구현하기\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사실 JavaScript에선 Type-safe에 자유롭기 때문에 Polymorphic 컴포넌트를 구현하는 것이 어렵지 않다. 이런 부분은 JavaScript 약점이지만 한편으로는 구현의 편리함으로서 강점이 될 수도 있다. 다음과 같이 아주 간단하게 Polymorphic한 컴포넌트를 만들 수 있다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> View <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">forwardRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> ref</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> Element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Element</span></span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ref<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기서 구현한 View 컴포넌트는 React에서 가장 추상적인 컴포넌트다. \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">as</code>\"\n        }\n      }), \"를 통해 기본 내장된 컴포넌트를 포함하여 어떠한 컴포넌트로도 될 수 있다. 만약 생략한다면 기본적으로 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">div</code>\"\n        }\n      }), \"를 사용하게 된다. 이때, 필요한 속성이 있다면 자유롭게 넘길 수 있도록 컴포넌트를 작성하고 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">forwardRef</code>\"\n        }\n      }), \"를 통해 부모 컴포넌트에서 요소에 접근할 수 있도록 만들었다. 이 컴포넌트는 다음과 같이 사용할 수 있다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> View <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./View'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">View</span></span> <span class=\\\"token attr-name\\\">as</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>a<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://kciter.so<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click Me!</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">View</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"코드를 살펴보면 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">as</code>\"\n        }\n      }), \"를 통해 View 컴포넌트에 사용되는 요소를 a 태그로 변경하고 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">href</code>\"\n        }\n      }), \" 속성을 사용한 것을 볼 수 있다. 그럼 이 코드를 실행하면 \", _jsx(_components.a, {\n        href: \"https://kciter.so\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Click Me!\"\n      }), \"라는 링크가 보이게 된다. 사실 이렇게만 사용하면 왜 사용하는지 이해가 안가는 것이 당연하다. 그냥 바로 a 태그를 쓰면 되니 번거롭게 컴포넌트를 만들 필요가 없기 때문이다. 그렇지만 위 코드를 응용하여 다음과 같이 사용하는 것도 가능하다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">/**\\n * Button.jsx\\n */</span>\\n<span class=\\\"token keyword\\\">import</span> View <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./View'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token comment\\\">// 위에서 만들어둔 View 컴포넌트를 이용했다.</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">View</span></span> <span class=\\\"token attr-name\\\">as</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'button'</span><span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token attr-name\\\">style</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">backgroundColor</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'black'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">color</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'white'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span> \\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> \\n    <span class=\\\"token punctuation\\\">/></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 혹은 다음과 같이 작성할 수 있다.</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> Element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'button'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Element</span></span>\\n      <span class=\\\"token attr-name\\\">style</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">backgroundColor</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'black'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">color</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'white'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span> \\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> \\n    <span class=\\\"token punctuation\\\">/></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * App.jsx\\n */</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Button <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Button'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      // 마치 앵커 태그처럼 사용할 수 있다.\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Button</span></span> <span class=\\\"token attr-name\\\">as</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>a<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://kciter.so<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">Click Me!</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">Button</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"다시 \", _jsx(_components.a, {\n        href: \"#%EB%AC%B8%EC%A0%9C-%EC%9D%B8%EC%8B%9D%ED%95%98%EA%B8%B0\",\n        children: \"문제 인식하기\"\n      }), \" 부분을 살펴보면 이때는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">LinkButton</code>\"\n        }\n      }), \"이라는 컴포넌트를 만드는 것으로 요구사항을 충족했었다. 만약 위 코드처럼 Polymorphic 하도록 컴포넌트를 작성한다면 중복 코드를 제거하고 조금 더 유연하게 컴포넌트를 사용할 수 있게 된다. 생각보다 이런 사례가 많고 구현이 간단하기 때문에 좋은 컴포넌트 설계라고 볼 수 있다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"typescript에서-구현하기\",\n      children: _jsx(_components.a, {\n        href: \"#typescript에서-구현하기\",\n        children: \"TypeScript에서 구현하기\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JavaScript를 쓸 때 아쉬운 점은 IntelliSense\", _jsx(_components.sup, {\n        children: _jsx(_components.a, {\n          href: \"#user-content-fn-1\",\n          id: \"user-content-fnref-1\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"1\"\n        })\n      }), \"를 사용할 수 없다는 점이다. 어느 정도 자동 완성을 해주긴 하지만 TypeScript의 강력함에 비하면 좀 아쉽다. 위 코드도 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">as</code>\"\n        }\n      }), \"를 통해 다른 요소를 사용하도록 변경했지만 어떤 속성을 넘길 수 있을지는 개발자가 잘 판단하여야 한다. 혹은 개발자가 오타를 내어 잘못된 값을 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">as</code>\"\n        }\n      }), \"로 전달할 수도 있다. 이런 문제점은 TypeScript를 통해 Type-safe한 Polymorphic 컴포넌트를 구현하면 해결할 수 있다.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"요소와-속성-표현하기\",\n      children: _jsx(_components.a, {\n        href: \"#요소와-속성-표현하기\",\n        children: \"요소와 속성 표현하기\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript에서 사용한 코드와 똑같이 사용할 수 있도록 만들면서 자동 완성 기능까지 사용하려면 타입 정의가 필요하다. 우선 다음 코드를 확인해보자.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">/**\\n * View.tsx\\n */</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">as</span><span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> View <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React</span><span class=\\\"token punctuation\\\">.</span>ElementType <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token operator\\\">...</span>props\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">:</span> ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> Element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Element</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * App.tsx\\n */</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> View <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./components/View\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token comment\\\">// 컴포넌트 부분에 에러가 발생한다.</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">View</span></span> <span class=\\\"token attr-name\\\">as</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>a<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://kciter.so<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      Link\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">View</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">React.ElementType</code>\"\n        }\n      }), \"은 JSX 내장 컴포넌트 또는 사용자 정의 컴포넌트를 둘 다 받을 수 있는 타입으로 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">string | React.ComponentType&lt;any></code>\"\n        }\n      }), \"로 정의되어있다. 이 타입과 제네릭을 사용하면 위 JavaScript 코드에서 했던 것처럼 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">as</code>\"\n        }\n      }), \"를 통해 사용하려는 요소를 바꿀 수 있게 된다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"하지만 위와 같이 View 컴포넌트를 작성하면 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">as</code>\"\n        }\n      }), \"를 통해 사용하려한 요소가 어떤 것인지 알 수가 없다. 따라서 다음과 같은 에러가 발생하게 된다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2022-08-16-polymorphic-react-component/error-message-1.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"에러 메시지를 살펴보면 prop으로 넘긴 값들이 타입에 맞지 않는다는 것을 알 수 있다. 이를 위해 다음과 같이 View 컴포넌트를 수정할 수 있다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token operator\\\">></span></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">as</span><span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">&amp;</span> React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithoutRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> View <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React</span><span class=\\\"token punctuation\\\">.</span>ElementType <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token operator\\\">...</span>props\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">:</span> ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> Element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Element</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">React.ComponentPropsWithoutRef</code>\"\n        }\n      }), \"은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ref</code>\"\n        }\n      }), \"를 제외한 나머지 속성을 정의할 수 있게 해주는 타입이다. 이 타입을 이용하면 제네릭을 통해 나머지 속성에 대한 것을 알 수 있게 된다. 하지만 아직 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ref</code>\"\n        }\n      }), \"는 받아올 수 없다.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"ref-받아오기\",\n      children: _jsx(_components.a, {\n        href: \"#ref-받아오기\",\n        children: \"ref 받아오기\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기까지는 이해하는 것이 어렵지는 않았을 것이다. 코드 양이 많은 것도 아니기 때문에 생각보다 쉽게 구현할 수 있다. 그렇지만 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ref</code>\"\n        }\n      }), \"까지 사용하게 된다면 조금 복잡해진다. 일단 다음 코드를 살펴보자.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token operator\\\">></span></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">as</span><span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">&amp;</span> React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithoutRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> View <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">forwardRef</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React</span><span class=\\\"token punctuation\\\">.</span>ElementType <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">:</span> ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n    ref<span class=\\\"token operator\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ref\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// ref만 받아오도록</span>\\n  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> Element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Element</span></span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ref<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"만약 위에와 같이 이미 제공되는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">React.ComponentPropsWithRef</code>\"\n        }\n      }), \" 타입을 사용하면 쉽게 해결됐다고 생각할 수 있겠지만 다음과 같이 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">unknown</code>\"\n        }\n      }), \"으로 타입을 알 수 없다는 것을 알 수 있다. 이러면 제대로된 타입이 아니어도 에러가 발생하지 않는다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2022-08-16-polymorphic-react-component/ref-unknown-type.png\",\n      caption: \"잘못된 타입인 ref가 들어갔음에도 에러가 발생하지 않는다\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이런 일이 발생한 이유는 아직 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">forwardRef</code>\"\n        }\n      }), \"에 대한 타입이 모호하기 때문이다. 제대로 정의된 것 처럼 보이지만 제네릭은 함수 파라메터에만 적용되었을 뿐 함수 자체엔 적용되지 않았다. 따라서 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">forwardRef</code>\"\n        }\n      }), \"에 대한 제네릭 타입 정의가 필요하다. 타입 정의를 위해 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">forwardRef</code>\"\n        }\n      }), \" 함수가 어떻게 정의되었는지 확인해보자.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">forwardRef</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">P</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>render<span class=\\\"token operator\\\">:</span> ForwardRefRenderFunction<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">P</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> ForwardRefExoticComponent<span class=\\\"token operator\\\">&lt;</span>PropsWithoutRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">&amp;</span> RefAttributes<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">>></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">ForwardRefExoticComponent<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">NamedExoticComponent<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\n  defaultProps<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> Partial<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span>\\n  propTypes<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> WeakValidationMap<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">NamedExoticComponent<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">ExoticComponent<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\n  displayName<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">ExoticComponent<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">P</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">P</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>ReactElement<span class=\\\"token operator\\\">|</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">readonly</span> $$<span class=\\\"token keyword\\\">typeof</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">symbol</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기서 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">forwardRef</code>\"\n        }\n      }), \" 함수의 반환 타입을 살펴보면 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ForwardRefExoticComponent&lt;PropsWithoutRef&lt;P> &amp; RefAttributes&lt;T>></code>\"\n        }\n      }), \"으로 되어있다. \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ForwardRefExoticComponent</code>\"\n        }\n      }), \"는 최종적으로 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ExoticComponent</code>\"\n        }\n      }), \" 인터페이스를 상속받는데 내용을 살펴보면 결국 함수 컴포넌트의 형태가 되는 것을 알 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"따라서 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">PropsWithoutRef&lt;P> &amp; RefAttributes&lt;T></code>\"\n        }\n      }), \"를 View 컴포넌트의 타입으로 만들어주면 된다. \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">RefAttributes</code>\"\n        }\n      }), \"는 다음과 같이 정의되어 있다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">RefAttributes<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Attributes</span> <span class=\\\"token punctuation\\\">{</span>\\n  ref<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> Ref<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ComponentPropsWithRef</code>\"\n        }\n      }), \"에는 이미 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">RefAttributes</code>\"\n        }\n      }), \"이 결합되어 있기 때문에 다음과 같이 선언하여 View 컴포넌트를 완성할 수 있다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token operator\\\">></span></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">as</span><span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">&amp;</span> React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithoutRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">ViewComponent</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">C</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React</span><span class=\\\"token punctuation\\\">.</span>ElementType <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n  props<span class=\\\"token operator\\\">:</span> ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">C</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span>\\n    ref<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">C</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ref\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> React<span class=\\\"token punctuation\\\">.</span>ReactElement <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> View<span class=\\\"token operator\\\">:</span> ViewComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">forwardRef</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React</span><span class=\\\"token punctuation\\\">.</span>ElementType <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">:</span> ViewProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n    ref<span class=\\\"token operator\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ref\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> Element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"div\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Element</span></span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ref<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위 코드를 반영하고나서 다시 App 컴포넌트를 확인하면 ref의 타입을 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">HTMLDivElement</code>\"\n        }\n      }), \"로 사용하여 컴포넌트 타입과 일치하지 않기 때문에 에러가 발생하는 것을 확인할 수 있다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2022-08-16-polymorphic-react-component/error-message-2.png\",\n      caption: \"잘못된 ref가 들어가 에러가 발생한다\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이제 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">useRef</code>\"\n        }\n      }), \"의 제네릭 타입을 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">HTMLAnchorElement</code>\"\n        }\n      }), \"로 변경해주면 정상적으로 실행되는 것을 볼 수 있다.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"범용성-있게-사용하기\",\n      children: _jsx(_components.a, {\n        href: \"#범용성-있게-사용하기\",\n        children: \"범용성 있게 사용하기\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기까지 왔으면 대체로 복잡한 내용은 끝난 셈이다. 지금까지는 View 컴포넌트만을 위하여 타입을 정의했는데 타입을 한 단계 더 추상화하여 조금 더 범용적으로 쓸 수 있게 만들어보자.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// 기존 작성한 ViewProps에서 as를 분리한다.</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">AsProp<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token operator\\\">></span></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">as</span><span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 직관적인 이름을 붙여서 타입으로 만들어준다.</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">PolymorphicRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token operator\\\">></span></span> <span class=\\\"token operator\\\">=</span>\\n  React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ref\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 결합 타입을 만든다.</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">PolymorphicComponentProps<span class=\\\"token operator\\\">&lt;</span>\\n  <span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token punctuation\\\">,</span>\\n  Props <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span></span> <span class=\\\"token operator\\\">=</span> AsProp<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">&amp;</span> React<span class=\\\"token punctuation\\\">.</span>ComponentPropsWithoutRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">&amp;</span> Props <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span>\\n  ref<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> PolymorphicRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기존 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">ViewProps</code>\"\n        }\n      }), \" 타입을 분해하고 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">PolymorphicComponentProps</code>\"\n        }\n      }), \"라는 제네릭 타입을 만들어서 필요한 속성을 추가할 수 있도록 만들었다. 이렇게 만든 타입을 통해 새로운 컴포넌트를 만들어보자.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">_TextProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  size<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  color<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">TextProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>ElementType<span class=\\\"token operator\\\">></span></span> <span class=\\\"token operator\\\">=</span> \\n  PolymorphicComponentProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> _TextProps<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">TextComponent</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React</span><span class=\\\"token punctuation\\\">.</span>ElementType <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"span\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n  props<span class=\\\"token operator\\\">:</span> TextProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> React<span class=\\\"token punctuation\\\">.</span>ReactElement <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> Text<span class=\\\"token operator\\\">:</span> TextComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">forwardRef</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React</span><span class=\\\"token punctuation\\\">.</span>ElementType <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"span\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">,</span> size<span class=\\\"token punctuation\\\">,</span> color<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>props <span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">:</span> TextProps<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n    ref<span class=\\\"token operator\\\">:</span> PolymorphicRef<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ref\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> Element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"span\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// size와 color를 style로 적용</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Element</span></span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ref<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">style</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">fontSize</span><span class=\\\"token operator\\\">:</span> size<span class=\\\"token punctuation\\\">,</span> color <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">PolymorphicComponentProps</code>\"\n        }\n      }), \"를 통해 속성 확장 가능한 Polymorphic 컴포넌트를 아주 쉽게 만들어냈다. 여기서는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">size</code>\"\n        }\n      }), \"와 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">color</code>\"\n        }\n      }), \"를 새롭게 추가했다. 다음과 같이 사용할 수 있다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">View</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">View</span></span> <span class=\\\"token attr-name\\\">as</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>a<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://kciter.so<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n        Link\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">View</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Text</span></span> <span class=\\\"token attr-name\\\">as</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>div<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">color</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>red<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">size</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n        Text\\n      </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">Text</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token plain-text\\\">\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token class-name\\\">View</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"결과 화면을 살펴보면 다음과 같이 제대로 적용된 것을 확인할 수 있다.\"\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2022-08-16-polymorphic-react-component/result.png\",\n      caption: \"업데이트가 거슬리는 분께는 심심한 사과를 드린다\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"마치며\",\n      children: _jsx(_components.a, {\n        href: \"#마치며\",\n        children: \"마치며\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이렇게 꽤 다양한 곳에서 활용 가능한 Polymorphic 컴포넌트를 구현할 수 있다. 이런 컴포넌트를 만드는 패턴은 요즘 유행하는 UI 라이브러리에선 대부분 사용하고 있기 때문에 알아두면 도움이 될 것이다. 이 포스팅을 통해 만들어진 최종적인 코드는 \", _jsx(_components.a, {\n        href: \"https://github.com/kciter/polymorphic-react-component-sample\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"GitHub 저장소\"\n      }), \"에서 확인할 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"아직 글 서두에서 소개한 MUI의 \", _jsx(_components.a, {\n        href: \"https://mui.com/material-ui/react-box/\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Box\"\n      }), \" 컴포넌트나 Mantine의 \", _jsx(_components.a, {\n        href: \"https://mantine.dev/core/box/\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Box\"\n      }), \" 컴포넌트처럼 \", _jsx(_components.strong, {\n        children: \"스타일 확장 가능한 컴포넌트\"\n      }), \"까지는 다루지 못했다. 원래 이 부분까지 다루는 것이 필자의 목표였으나 너무 길어져서 완성하는데 오래걸릴 것 같아 쓰지 못했지만 빠른 시일 내에 추가로 글을 작성할 예정이다.\"]\n    }), \"\\n\", _jsxs(_components.section, {\n      \"data-footnotes\": true,\n      className: \"footnotes\",\n      children: [_jsx(_components.h2, {\n        className: \"sr-only\",\n        id: \"footnote-label\",\n        children: _jsx(_components.a, {\n          href: \"#footnote-label\",\n          children: \"Footnotes\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          id: \"user-content-fn-1\",\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Visual Studio 계열 IDE에서 제공하는 자동 완성 기능 \", _jsx(_components.a, {\n              href: \"#user-content-fnref-1\",\n              \"data-footnote-backref\": true,\n              className: \"data-footnote-backref\",\n              \"aria-label\": \"Back to content\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","span","ul","li","a","h1","sup","h2","section","ol","_provideComponents","components","_jsxs","_Fragment","children","_jsx","dangerouslySetInnerHTML","__html","Image","src","caption","href","rel","id","className","wrapper","MDXLayout","_ref","width","expandable","isExpanded","toggleExpanded","useState","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body"],"sourceRoot":""}