{"version":3,"file":"9d942d332d2b1a7172c422b32f64b6c427dc50ca-9a5cd90c358a5c965f79.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2025-02-06-data-oriented-programming.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    a: \"a\",\n    sup: \"sup\",\n    span: \"span\",\n    section: \"section\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"저는 패러다임에 대한 이야기를 좋아합니다. 같은 문제를 두고 여러 사상을 통한 해결 방법을 비교하고, 그 중에서 가장 적합한 방법을 찾아내는 것이 재미있기 때문입니다. 그런 관점에서 데이터 지향 프로그래밍이라는 책이 출판됐을 때 굉장히 흥미로웠습니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-02-06-data-oriented-programming/data-oriented-programming.jpg\",\n    caption: \"데이터 지향 프로그래밍의 원리\"\n  }), \"\\n\", React.createElement(_components.h1, {\n    id: \"데이터와-동작의-분리\"\n  }, React.createElement(_components.a, {\n    href: \"#데이터와-동작의-분리\"\n  }, \"데이터와 동작의 분리\")), \"\\n\", React.createElement(_components.p, null, \"기본적으로 데이터 지향 프로그래밍은 데이터와 동작을 분리하는 것부터 시작합니다. 참고로 책에서는 동작이 아닌 코드라고 표현했지만 조금 혼란이 있을 수 있으니 저는 로직이라 표현하겠습니다.\"), \"\\n\", React.createElement(_components.p, null, \"객체 지향 프로그래밍에서는 데이터와 동작을 하나의 객체로 묶어서 관리합니다. 이는 데이터와 동작이 서로 의존하고 있기 때문입니다. 하지만 데이터 지향 프로그래밍에서는 데이터와 동작을 분리하여 데이터를 중심으로 프로그래밍 합니다. 데이터와 동작을 분리함으로서 설계 관점도 달라지게 됩니다. 객체 지향 프로그래밍에서는 객체의 책임과 역할을 중심으로 설계하지만 데이터 지향 프로그래밍에서는 데이터의 구조와 흐름을 중심으로 설계합니다.\"), \"\\n\", React.createElement(_components.p, null, \"이와 같은 방식은 과거 프로시저적 프로그래밍\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-1\",\n    id: \"user-content-fnref-1\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"1\")), \"과 유사하다는 생각이 들었습니다. 보통 서버 웹 애플리케이션을 작성할 때 풍부한 도메인 모델을 만들어 객체지향적으로 설계하고자 하지만 요청과 반환이라는 웹 서버의 특징과 단순성을 고려하여 프로시저적 프로그래밍으로 작성되는 경우가 많습니다. 이를 생각하면 데이터 지향 프로그래밍은 웹 서버 애플리케이션을 작성할 때 유용할 것 같습니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"범용-자료구조-사용\"\n  }, React.createElement(_components.a, {\n    href: \"#범용-자료구조-사용\"\n  }, \"범용 자료구조 사용\")), \"\\n\", React.createElement(_components.p, null, \"이 책의 저자는 데이터 지향 프로그래밍을 할 때 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Map</code>\"\n    }\n  }), \"과 같은 범용 자료구조 사용을 권장합니다. 이 말은 서버에서 데이터 응답을 위한 객체\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-2\",\n    id: \"user-content-fnref-2\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"2\")), \"를 만드는 대신 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Map</code>\"\n    }\n  }), \"에 담으라는 뜻 입니다. 예를 들어 자바로 코드를 작성한다면 다음과 같습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Map</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">getPerson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token class-name\\\">Map</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">></span></span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">HashMap</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Sunhyoup Lee\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"email\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"kciter@naver.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"role\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"developer\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> person<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"정적 타입 언어를 사용하는 개발자라면 대부분 놀랄만한 코드입니다. 아니 타입이 없다면 그러면 뭘 믿고 코딩해야 하는지 모르겠습니다. 하지만 이 책에서는 이렇게 하는 것이 더 좋다고 주장합니다. 이유는 유연성(Flexibility)과 일반성(Genericity) 때문입니다. 우리가 우려했던 것처럼 안정성(Safety)은 떨어진다고\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-3\",\n    id: \"user-content-fnref-3\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"3\")), \" 말합니다. 이렇게 코드를 작성하면 수정에 유연하고, 데이터를 조작하는 것이 더 편리해진다고 합니다. 여기서 데이터 조작을 할 때는 map, filter, reduce와 같은 함수형 프로그래밍의 기법을 사용합니다.\"), \"\\n\", React.createElement(_components.p, null, \"안정성은 어떻게 보장할까요? 이 책에서는 검증 함수를 사용하는 것을 권장합니다. 다음은 검증 함수를 사용한 예시입니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">isValidPerson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Map</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">></span></span> person<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">containsKey</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">containsKey</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"age\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">containsKey</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"email\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">isDeveloper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Map</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">></span></span> person<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"role\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"developer\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"실제로 로직을 구현할 때는 다음과 같이 사용합니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">Map</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">></span></span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getPerson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 실제로는 DB에서 데이터를 가져올 것</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isValidPerson</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">isDeveloper</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// do something</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이를 통해 어느정도 안정성을 챙기고 데이터와 로직을 완전히 분리함으로서 유연성을 높일 수 있다고 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"데이터와 로직을 분리하는 것으로 데이터에 좀 더 집중하고 유연성을 높이는 것은 이해했습니다. 그렇지만 굳이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Map</code>\"\n    }\n  }), \"과 같은 범용 자료구조를 이용하는 것이 맞을까요? 저는 이 부분에선 큰 의문을 느꼈습니다. \", React.createElement(_components.a, {\n    href: \"https://www.infoq.com/articles/data-oriented-programming-java\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Data Oriented Programming in Java\"), \"라는 글에선 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Map</code>\"\n    }\n  }), \" 대신 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">record</code>\"\n    }\n  }), \" 문법을 사용하고 있습니다. 저 또한 이 의견에 공감합니다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Map</code>\"\n    }\n  }), \"은 범용 자료구조기 때문에 어떤 데이터든 담을 수 있습니다. 하지만 이는 데이터의 구조를 알 수 없기 때문에 가독성 측면에서 많은 문제가 있다고 생각합니다. 또한, 책에서 제시한 검증 함수를 이용하는 것은 실수의 위험이 큽니다. 컴파일러에게 맡길 수 있는 방법이 있다면 이를 사용하는 것이 더 좋다고 생각합니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"통칭해서 서비스라 부르는 소프트웨어에서 가장 중요하게 여겨지는 것은 결국 데이터입니다. 원천 데이터를 이용하여 사용자에게 가치를 제공하고 쌓인 데이터를 통해 새로운 비즈니스 기회를 발굴할 수도 있기 때문입니다. 그래서 이 책에서 말하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">데이터 지향</code>\"\n    }\n  }), \"이라는 것이 어떤 의미인지 이해는 갑니다. 어쩌면 개발자는 비즈니스의 근간이 되는 데이터를 등한시 했을 지도 모릅니다. 객체지향적인 개발을 한다고 하여 많은 객체를 만들고 함수형적인 개발을 한다고하여 순수하고 함수 조합을 중요시하는 것이 데이터를 중요시하는 것은 아니기 때문입니다. 오히려 비즈니스가 아닌 다른 가치에 매몰되어 간단하게 해결할 수 있는 문제를 복잡하게 만들기도 합니다. 그래서 원 데이터를 어떻게 취급하고, 어떻게 가공하여 사용자에게 제공할지에 대한 고민이 결국 비즈니스 로직의 핵심이라는 것을 깨달으면 데이터 지향 프로그래밍이라는 개념이 등장한 것도 자연스러운 일이라고 생각합니다.\"), \"\\n\", React.createElement(\"figure\", {\n    style: {\n      position: 'relative',\n      paddingBottom: '48.625%'\n    }\n  }, React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: \"100%\",\n    src: \"https://www.youtube.com/embed/Lx-lK0cUczQ\",\n    title: \"YouTube video player\",\n    frameborder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n    allowfullscreen: true,\n    style: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      position: 'absolute'\n    }\n  }), React.createElement(\"figcaption\", null, \"조금은 공감되는 영상\")), \"\\n\", React.createElement(_components.p, null, \"당연하겠지만 이책에서 소개하는 데이터 지향 프로그래밍이 모든 문제에 대한 해결책은 아닙니다. 객체의 책임과 역할을 부여하고 그에 맞는 클래스를 만드는 것, 순수한 함수를 만들고 조합하는 것 등은 더욱 안전하고 유지보수하기 좋은 소프트웨어를 만드는 데에 필요합니다. 중요한 것은 더 잘만들기 위한 방법을 찾는 것이라고 생각합니다. 그리고 그 방법을 찾기 위해 다양한 패러다임을 접하고, 적용해보는 것이 중요하다고 생각합니다.\"), \"\\n\", React.createElement(_components.section, {\n    \"data-footnotes\": true,\n    className: \"footnotes\"\n  }, React.createElement(_components.h2, {\n    className: \"sr-only\",\n    id: \"footnote-label\"\n  }, React.createElement(_components.a, {\n    href: \"#footnote-label\"\n  }, \"Footnotes\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-1\"\n  }, \"\\n\", React.createElement(_components.p, null, \"보통 절차적 프로그래밍이라 번역됩니다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-1\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-2\"\n  }, \"\\n\", React.createElement(_components.p, null, \"책에서는 데이터를 위한 객체를 전용 자료구조라 표현합니다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-2\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-3\"\n  }, \"\\n\", React.createElement(_components.p, null, \"책에서는 '양보'한다고 표현합니다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-3\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  console.log(isExpanded);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              zIndex: 1000\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <img\n              src={src}\n              width=\"100%\"\n              style={{\n                display: 'block',\n                borderRadius: 8,\n                width: 'auto',\n                height: 'auto',\n                maxWidth: 1440,\n                maxHeight: '80vh',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            />\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","a","sup","span","section","h2","ol","li","_provideComponents","components","React","Image","src","caption","id","href","dangerouslySetInnerHTML","__html","rel","style","position","paddingBottom","width","height","title","frameborder","allow","allowfullscreen","top","left","right","bottom","className","wrapper","MDXLayout","_ref","maxWidth","expandable","isExpanded","toggleExpanded","useState","console","log","___EmotionJSX","cursor","onClick","undefined","ReactDOM","backgroundColor","zIndex","display","borderRadius","maxHeight","transform","document","body"],"sourceRoot":""}