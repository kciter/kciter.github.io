{"version":3,"file":"component---src-posts-2024-07-11-log-9-mdx-738fd483ecec1c0681ed.js","mappings":"wQAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,8GAA+G,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0UAA2U,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,wZAAyZ,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,4NAA6N,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,gGACx0C,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECeA,MAAMU,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://kciter.so/./src/posts/2024-07-11-log-9.mdx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"연구에 따르면 우리의 몸은 새로운 정보를 받아들일 때 도파민을 생성한다고 합니다. 맛있는 음식을 먹거나 여행지에 갔을 때처럼 내가 모르는 무언가를 알게 됐을 때 또한 쾌락을 느낀다는 것이죠.\"), \"\\n\", React.createElement(_components.p, null, \"과거엔 흔히 지식욕이라고도 불렀던 이 현상은 정보를 쉽게 접할 수 있게 됨으로써 주변에서 흔히 볼 수 있게 됐습니다. 저 또한 쇼츠나 릴스와 같은 숏폼 컨텐츠를 끊임없이 보거나 SNS에서 정리된 자료를 끊임없이 읽는 등 해야 할 일을 못 하고 금세 다른 정보에 집중하곤 했습니다. 정작 나에게 필요한 일을 다른 정보에 집중하느라 못 하게 되는 경우도 많았습니다. 이런 현상을 끊어내지 못하니 중독이라고 부를만하다고 생각합니다. 정말 큰 문제는 담배나 술과는 다르게 ‘좋은 것 아닌가?’라는 생각이 들어 더 끊기 힘들다는 점입니다. 저도 이 정보 중독을 해결하기 위해 꽤 고생했습니다.\"), \"\\n\", React.createElement(_components.p, null, \"생각해 보면 정보 중독은 좋은 일이 아닙니다. 우리가 접한 대부분의 정보가 정말 필요한 정보가 아닐 확률이 높습니다. 웹상에서 주어진 정보는 나의 호기심으로 찾아낸 정보가 아닌 ‘무작위로 주어진 정보’입니다. 그렇게 주어진 정보에 흥미가 생기면 기존 나의 호기심을 사라지고 새로운 호기심으로 덮어씌워집니다. 즉, 내가 하려 했던 중요한 일에 흥미가 사라지는 셈입니다. 그리고 재밌게도 이렇게 계속 정보를 흡수하면 ‘지적 비만’이 생긴다고 합니다. 몸에 안 좋은 자극적인 음식이 맛있게 느껴지는 것처럼 자극적이고 쓸모없는 정보가 더 재밌게 느껴지고 혈관이 막히는 것처럼 의식 흐름이 막힌다고 합니다. 이런 현상이 지속되면 결국 정말 필요한 정보는 피하게 되고 자극적이고 나에게 필요 없는 정보만을 원하는 악순환이 반복됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"지적 비만을 위한 다이어트로 한 번 더 생각해 보기, 디지털 디톡스하기, 운동하기, 글쓰기 등 다양한 방법을 제시하고 있습니다. 어떤 게 제일 효율적인지는 모르겠습니다. 아마 사람마다 맞는 방법이 다르지 않을까 싶습니다. 저 같은 경우는 미리 체크리스트를 만들어 이를 벗어나지 않는 식으로 해결하고 있습니다. 이 또한 여러 부작용이 있지만… 최소한 다른 정보로 엇나가는 것은 막아줍니다.\"), \"\\n\", React.createElement(_components.p, null, \"많은 정보를 낮은 비용으로 얻을 수 있는 세상이 나쁠 리가 없습니다. 하지만 그렇기 때문에 나 자신에게 정말 중요한 것이 무엇인지를 되물을 필요가 있다고 생각합니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}