{"version":3,"file":"c7a5200cdf864589a58380262393f8157c8c0e17-5ceb339355d2da486dd6.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2025-04-23-modeling-series-conditional-tree.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    sup: \"sup\",\n    h2: \"h2\",\n    ol: \"ol\",\n    section: \"section\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"들어가며\"\n  }, React.createElement(_components.a, {\n    href: \"#들어가며\"\n  }, \"들어가며\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"회원 A가 장바구니에 상품 X를 담고 있을 때 첫 구매자거나 최근 한 달 내 구매 금액이 10만 원 이상이면서 등급이 VIP라면 쿠폰을 노출하라\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위와 같이 복잡한 조건을 평가해야 한다면 어떻게 구현 해야할까? 요구사항이 많지 않을 때는 간단히 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">if</code>\"\n    }\n  }), \"를 사용하여 빠르게 구현할 수 있지만, 제품이 성숙해질수록 요구사항이 복잡해지기 마련이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"다양한 상황에 대한 조건을 평가해야 한다.\"), \"\\n\", React.createElement(_components.li, null, \"관리자가 개발자에 의존하지 않고 편집할 수 있길 원한다.\"), \"\\n\", React.createElement(_components.li, null, \"런타임 도중에 조건을 변경할 수 있어야 한다.\"), \"\\n\", React.createElement(_components.li, null, \"평가 데이터는 실시간으로 변할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이런 요구사항을 충족하기 위해선 단순히 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">if</code>\"\n    }\n  }), \" 문을 사용해 조건을 평가하는 것만으로는 부족하다. 이를 해결하기 위한 강력한 패턴 중 하나가 바로 조건 트리(Condition Tree)라고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이번 글에서는 조건 트리가 무엇인지, 어떻게 설계하고 구현할 수 있는지에 대해 설명할 것이다. 조건 트리는 마케팅, 개인화, 권한 관리 등 다양한 곳에서 사용될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어, 마케팅에서는 특정 조건을 만족하는 사용자에게만 쿠폰을 발급하거나, 개인화된 추천 상품을 제공하는 데 사용될 수 있다. 또한, 권한 관리에서는 특정 조건을 만족하는 사용자에게만 특정 기능이나 리소스에 대한 접근 권한을 부여하는 데 사용될 수 있다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"조건을-추상화-하는-방법\"\n  }, React.createElement(_components.a, {\n    href: \"#조건을-추상화-하는-방법\"\n  }, \"조건을 추상화 하는 방법\")), \"\\n\", React.createElement(_components.p, null, \"언뜻 복잡한 조건을 추상화한다는 것이 매우 복잡하고 어려운 일처럼 보일 수 있다. 하지만 침착하게 접근하면 생각보다 간단하다. 모든 추상화는 \", React.createElement(_components.strong, null, \"필요한 것을 찾아 필요한 것을 뽑아내는 것\"), \"부터 시작한다. 다음 조건이 있다고 가정해보자.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"나이가 18세 이상이면서 첫 구매거나 VIP인 경우\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위 조건은 복잡해 보이지만, 사실 '조건식'과 '조건 연산자' 두 가지 요소로 나눌 수 있다. 문장에서 조건식만 추상화 한다면 다음과 같다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"[나이가 18세 이상]\", React.createElement(\"span\", {\n    style: {\n      color: '#999'\n    }\n  }, \"이면서\"), \" [첫 구매]\", React.createElement(\"span\", {\n    style: {\n      color: '#999'\n    }\n  }, \"거나\"), \" [VIP]\", React.createElement(\"span\", {\n    style: {\n      color: '#999'\n    }\n  }, \"인 경우\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"나이가 18세 이상 (age >= 18)\"), \"\\n\", React.createElement(_components.li, null, \"첫 구매 (purchaseCount == 0)\"), \"\\n\", React.createElement(_components.li, null, \"VIP (level == VIP)\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"그럼 이번에는 조건 연산자만 추상화 해보자.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(\"span\", {\n    style: {\n      color: '#999'\n    }\n  }, \"나이가 18세 이상\"), \"이면서(AND) \", React.createElement(\"span\", {\n    style: {\n      color: '#999'\n    }\n  }, \"첫 구매\"), \"거나(OR) \", React.createElement(\"span\", {\n    style: {\n      color: '#999'\n    }\n  }, \"VIP인 경우\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"AND\"), \"\\n\", React.createElement(_components.li, null, \"OR\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"두 관점을 결합하여 문장을 추상화하면 다음과 같다\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"age >= 18 AND (purchaseCount == 0 OR level == VIP)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이제 조건을 평가하기만 하면 된다. 하지만 조건 연산자엔 우선 순위가 있을 수 있다. 이런 경우 어떻게 처리할까?\"), \"\\n\", React.createElement(_components.p, null, \"알고리즘을 열심히 공부했다면 수식을 트리 형태로 표현하고 재귀 호출로 계산하는 방법을 본적이 있을 것이다. 이와 비슷한 방법으로 조건을 트리 형태로 표현할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">        AND\\n    ┌────┴─────────┐\\n(age ≥ 18)        OR\\n          ┌────────┴─────────┐\\n  (purchaseCount == 0) (level == VIP)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같이 트리를 만들었다면 재귀적으로 평가할 수 있다. 트리의 각 노드는 조건식과 조건 연산자로 구성되어 있으며, 자식 노드를 가질 수 있다. 자식 노드가 없을 경우 Leaf 노드라고 부르며, 자식 노드가 있을 경우 Composite 노드라고 부른다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Composite 노드\"), React.createElement(\"br\"), \"AND, OR, NOT과 같은 복합 조건을 나타내며 자식 노드를 가질 수 있다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Leaf 노드\"), React.createElement(\"br\"), \"단일 조건을 나타내며 자식 노드를 가지지 않는다. 특정 속성(attribute)과 연산자(operator), 값(value)이 결합된 식을 포함한다. 예를 들어 \\\"사용자의 나이 >= 18\\\"과 같은 조건을 표현할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이러한 구조는 \", React.createElement(_components.a, {\n    href: \"https://refactoring.guru/design-patterns/composite\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Composite 패턴\"), \"을 활용한 것으로, 단순한 조건부터 복잡한 조건까지 일관된 방식으로 표현하는 것이 가능하다.\"), \"\\n\", React.createElement(_components.p, null, \"앞서 문장을 추상화하고 트리라는 구조로 표현한 것처럼 추상적, 구조적인 사고는 다양한 곳에 활용할 수 있다. 이러한 감각을 익혀나가면 복잡한 문제를 해결하는 데 큰 도움이 되므로 기회가 된다면 연습해보길 권장한다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"모델-설계\"\n  }, React.createElement(_components.a, {\n    href: \"#모델-설계\"\n  }, \"모델 설계\")), \"\\n\", React.createElement(_components.p, null, \"조건 트리에 대해 이해했다면 모델 설계와 구현은 어렵지 않다. 조건 트리는 Composite 패턴을 활용했기 때문에 거의 그대로 설계할 수 있다. 다만, Leaf 노드에서 속성과 식을 어떻게 표현할지만 고민하면 된다. 그리고 조건 트리를 평가하기 위한 로직도 필요하다.\"), \"\\n\", React.createElement(_components.p, null, \"먼저 조건 트리에 대한 도식을 그려보자.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-23-modeling-series-conditional-tree/conditional-tree-uml.png\",\n    caption: \"조건 트리 도식\",\n    expandable: true\n  }), \"\\n\", React.createElement(_components.p, null, \"위 도식은 조건 트리의 기본 구조를 나타낸다. 각 모델이 어떤 역할을 하는지 살펴보자.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionNode</code>\"\n    }\n  }), \": 조건 트리의 기본 노드로, Leaf 노드와 Composite 노드에 대한 인터페이스다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LeafCondition</code>\"\n    }\n  }), \": Leaf 노드로, 단일 조건을 나타낸다. 속성(attribute), 연산자(operator), 값(value)을 포함한다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CompositeCondition</code>\"\n    }\n  }), \": Composite 노드로, 복합 조건을 나타낸다. 자식 노드를 가질 수 있으며, AND, OR, NOT과 같은 논리 연산자를 포함한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위와 같이 조건 트리 모델을 설계할 수 있다. 하지만 해당 모델은 데이터베이스 환경이 고려되지 않았다. 만약 RDB를 사용한다면 \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Object%E2%80%93relational_impedance_mismatch\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"객체-관계 불일치\"), React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-1\",\n    id: \"user-content-fnref-1\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"1\")), \"로 인해 별도로 엔티티 모델을 설계해야 한다.\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-2\",\n    id: \"user-content-fnref-2\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"2\")), \" 다음은 조건 트리 모델을 데이터베이스에 저장하기 위한 엔티티 모델이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-23-modeling-series-conditional-tree/conditional-tree-entity-uml.png\",\n    caption: \"조건 트리 엔티티 도식\",\n    expandable: true\n  }), \"\\n\", React.createElement(_components.p, null, \"조건 트리 자체가 크게 복잡하지 않으므로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionNodeEntity</code>\"\n    }\n  }), \" 하나로 모든 노드를 표현할 수 있다. Leaf 노드와 Composite 노드를 구분하기 위해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">NodeType</code>\"\n    }\n  }), \"을 추가했고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">parent_id</code>\"\n    }\n  }), \"를 통해 부모 노드를 참조할 수 있도록 했다. 이를 통해 트리 구조를 표현할 수 있다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"구현\"\n  }, React.createElement(_components.a, {\n    href: \"#구현\"\n  }, \"구현\")), \"\\n\", React.createElement(_components.p, null, \"설계는 일종의 계획이다. 계획을 세웠으니 이제 실제 구현을 해보자. 이 글에서는 Kotlin을 사용하여 조건 트리를 구현할 것이다. 그리고 특정 프레임워크를 고려하지 않으므로 일종의 의사 코드라고 생각하고 보는 것을 추천한다. 실제 구현은 사용하는 프레임워크에 맞게 조정해야 한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"모델-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#모델-구현\"\n  }, \"모델 구현\")), \"\\n\", React.createElement(_components.p, null, \"앞서 소개한 예시처럼 사용자 정보에 대한 속성을 기반으로 조건 트리 모델을 만들어보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">interface</span> ConditionalNode<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token operator\\\">?</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">LeafCondition</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> attribute<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> <span class=\\\"token keyword\\\">operator</span><span class=\\\"token operator\\\">:</span> ConditionOperator<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> valueType<span class=\\\"token operator\\\">:</span> String\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> ConditionalNode <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> ConditionOperator <span class=\\\"token punctuation\\\">{</span>\\n    EQ<span class=\\\"token punctuation\\\">,</span>\\n    NEQ<span class=\\\"token punctuation\\\">,</span>\\n    GT<span class=\\\"token punctuation\\\">,</span>\\n    GTE<span class=\\\"token punctuation\\\">,</span>\\n    LT<span class=\\\"token punctuation\\\">,</span>\\n    LTE\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">CompositeCondition</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> logic<span class=\\\"token operator\\\">:</span> LogicalOperator<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> children<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>ConditionalNode<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> ConditionalNode <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> LogicalOperator <span class=\\\"token punctuation\\\">{</span>\\n    AND<span class=\\\"token punctuation\\\">,</span>\\n    OR<span class=\\\"token punctuation\\\">,</span>\\n    NOT\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 조건 트리의 기본 구조를 나타낸다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionalNode</code>\"\n    }\n  }), \"를 인터페이스로 정의하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LeafCondition</code>\"\n    }\n  }), \"과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CompositeCondition</code>\"\n    }\n  }), \"을 구현했다. 앞서 설계한 내용과 크게 다르지 않다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"evaluator-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#evaluator-구현\"\n  }, \"Evaluator 구현\")), \"\\n\", React.createElement(_components.p, null, \"이어서 조건 트리를 평가하기 위한 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionEvaluator</code>\"\n    }\n  }), \"를 구현해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token keyword\\\">interface</span> AttributeResolver <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>attribute<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Any<span class=\\\"token operator\\\">?</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> ConditionEvaluator <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">evaluate</span><span class=\\\"token punctuation\\\">(</span>condition<span class=\\\"token operator\\\">:</span> ConditionalNode<span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token operator\\\">:</span> AttributeResolver<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>condition<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> LeafCondition <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">evaluateLeaf</span><span class=\\\"token punctuation\\\">(</span>condition<span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">is</span> CompositeCondition <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">val</span> results <span class=\\\"token operator\\\">=</span> condition<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">evaluate</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>condition<span class=\\\"token punctuation\\\">.</span>logic<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          CompositeCondition<span class=\\\"token punctuation\\\">.</span>LogicalOperator<span class=\\\"token punctuation\\\">.</span>AND <span class=\\\"token operator\\\">-></span> results<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token punctuation\\\">}</span>\\n          CompositeCondition<span class=\\\"token punctuation\\\">.</span>LogicalOperator<span class=\\\"token punctuation\\\">.</span>OR <span class=\\\"token operator\\\">-></span> results<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">any</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token punctuation\\\">}</span>\\n          CompositeCondition<span class=\\\"token punctuation\\\">.</span>LogicalOperator<span class=\\\"token punctuation\\\">.</span>NOT <span class=\\\"token operator\\\">-></span> results<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">singleOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">not</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?:</span> <span class=\\\"token boolean\\\">false</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionEvaluator</code>\"\n    }\n  }), \"는 조건 트리를 평가하는 역할을 한다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">evaluate</code>\"\n    }\n  }), \" 메서드는 조건 노드의 타입에 따라 적절한 평가 로직을 호출한다. Leaf 노드인 경우 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">evaluateLeaf</code>\"\n    }\n  }), \" 메서드를 호출하여 조건식을 평가하고, Composite 노드인 경우 자식 노드를 재귀적으로 평가한다.\"), \"\\n\", React.createElement(_components.p, null, \"여기서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">AttributeResolver</code>\"\n    }\n  }), \"는 평가할 속성에 대한 값을 제공하는 인터페이스다. 이를 통해 조건 트리에서 사용되는 속성(attribute)을 동적으로 제공할 수 있다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">evaluateLeaf</code>\"\n    }\n  }), \" 메서드는 다음과 같이 구현할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> ConditionEvaluator <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Suppress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"UNCHECKED_CAST\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">evaluateLeaf</span><span class=\\\"token punctuation\\\">(</span>leaf<span class=\\\"token operator\\\">:</span> LeafCondition<span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token operator\\\">:</span> AttributeResolver<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 1. 평가할 속성 값을 조회하고 속성이 없다면 조건을 만족하지 않음</span>\\n    <span class=\\\"token keyword\\\">val</span> <span class=\\\"token keyword\\\">actual</span> <span class=\\\"token operator\\\">=</span> resolver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>leaf<span class=\\\"token punctuation\\\">.</span>attribute<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n\\n    <span class=\\\"token comment\\\">// 2. String 타입인 조건 값을 변환</span>\\n    <span class=\\\"token keyword\\\">val</span> expected<span class=\\\"token operator\\\">:</span> Any<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">convertValue</span><span class=\\\"token punctuation\\\">(</span>leaf<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">,</span> leaf<span class=\\\"token punctuation\\\">.</span>valueType<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token operator\\\">:</span> Exception<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 3. 변환된 조건 값과 실제 속성 값을 비교 평가</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>leaf<span class=\\\"token punctuation\\\">.</span>operator<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>EQ <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">actual</span> <span class=\\\"token operator\\\">==</span> expected\\n      LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>NEQ <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">actual</span> <span class=\\\"token operator\\\">!=</span> expected\\n\\n      LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">,</span>\\n      LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>GTE<span class=\\\"token punctuation\\\">,</span>\\n      LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>LT<span class=\\\"token punctuation\\\">,</span>\\n      LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>LTE <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">actual</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">is</span> Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">||</span> expected <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">is</span> Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">actual</span><span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span> <span class=\\\"token operator\\\">!=</span> expected<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n\\n        <span class=\\\"token keyword\\\">val</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">actual</span> <span class=\\\"token keyword\\\">as</span> Comparable<span class=\\\"token operator\\\">&lt;</span>Any<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token keyword\\\">val</span> right <span class=\\\"token operator\\\">=</span> expected <span class=\\\"token keyword\\\">as</span> Comparable<span class=\\\"token operator\\\">&lt;</span>Any<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>leaf<span class=\\\"token punctuation\\\">.</span>operator<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>GT <span class=\\\"token operator\\\">-></span> left <span class=\\\"token operator\\\">></span> right\\n          LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>GTE <span class=\\\"token operator\\\">-></span> left <span class=\\\"token operator\\\">>=</span> right\\n          LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>LT <span class=\\\"token operator\\\">-></span> left <span class=\\\"token operator\\\">&lt;</span> right\\n          LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>LTE <span class=\\\"token operator\\\">-></span> left <span class=\\\"token operator\\\">&lt;=</span> right\\n          <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// String 타입인 조건 값을 변환하는 메서드</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">convertValue</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Any<span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span> type <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Long\\\"</span></span>   <span class=\\\"token operator\\\">-></span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLongOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Int\\\"</span></span>    <span class=\\\"token operator\\\">-></span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toIntOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Boolean\\\"</span></span> <span class=\\\"token operator\\\">-></span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBooleanStrictOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Double\\\"</span></span> <span class=\\\"token operator\\\">-></span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toDoubleOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"String\\\"</span></span> <span class=\\\"token operator\\\">-></span> value\\n      <span class=\\\"token keyword\\\">else</span>     <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Unsupported type: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">type</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"내용이 장황하지만 하나씩 살펴보면 어렵지 않다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">evaluateLeaf</code>\"\n    }\n  }), \" 메서드는 다음과 같은 순서로 진행된다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">AttributeResolver</code>\"\n    }\n  }), \"를 통해 평가할 속성 값을 조회한다. 만약 속성이 없다면 조건을 만족하지 않는 것으로 간주한다.\"), \"\\n\", React.createElement(_components.li, null, \"조건 값을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입으로 사용하므로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">convertValue</code>\"\n    }\n  }), \" 메서드를 통해 변환한다. 변환할 수 없다면 조건을 만족하지 않는 것으로 간주한다.\"), \"\\n\", React.createElement(_components.li, null, \"변환된 조건 값과 실제 속성 값을 비교하여 평가한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"여기까지 구현했다면 조건 트리를 평가할 수 있는 기본적인 구조는 완성됐다. 하지만 아직 부족한 점이 있다. 바로 조건 트리를 데이터베이스에 저장하고 불러오는 기능이다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"엔티티-모델-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#엔티티-모델-구현\"\n  }, \"엔티티 모델 구현\")), \"\\n\", React.createElement(_components.p, null, \"조건 트리를 RDB 데이터베이스에 저장하기 위해서는 엔티티 모델을 구현해야 한다. 앞서 설계한 도식에 따라 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionNodeEntity</code>\"\n    }\n  }), \"를 구현해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@Table</span><span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"condition_nodes\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">ConditionNodeEntity</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token annotation builtin\\\">@Id</span>\\n  <span class=\\\"token annotation builtin\\\">@GeneratedValue</span><span class=\\\"token punctuation\\\">(</span>strategy <span class=\\\"token operator\\\">=</span> GenerationType<span class=\\\"token punctuation\\\">.</span>IDENTITY<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> targetId<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 조건이 적용되는 대상 ID</span>\\n  <span class=\\\"token keyword\\\">val</span> parentId<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> type<span class=\\\"token operator\\\">:</span> NodeType<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// LEAF</span>\\n  <span class=\\\"token keyword\\\">val</span> attribute<span class=\\\"token operator\\\">:</span> String<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> <span class=\\\"token keyword\\\">operator</span><span class=\\\"token operator\\\">:</span> LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> valueType<span class=\\\"token operator\\\">:</span> String<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// COMPOSITE</span>\\n  <span class=\\\"token keyword\\\">val</span> logic<span class=\\\"token operator\\\">:</span> CompositeCondition<span class=\\\"token punctuation\\\">.</span>LogicalOperator<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> NodeType <span class=\\\"token punctuation\\\">{</span>\\n    LEAF<span class=\\\"token punctuation\\\">,</span>\\n    COMPOSITE\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"모델 자체가 간단하므로 쉽게 구현할 수 있다. 이제 이어서 데이터베이스에 저장된 조건 트리를 불러와 실제 조건 트리로 변환하는 로직을 구현해보자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"tree-loader-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#tree-loader-구현\"\n  }, \"Tree Loader 구현\")), \"\\n\", React.createElement(_components.p, null, \"조건 트리를 데이터베이스에서 불러와 트리를 구성하기 위해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionTreeLoader</code>\"\n    }\n  }), \"를 구현해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">ConditionTreeLoader</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">val</span> conditionNodeRepository<span class=\\\"token operator\\\">:</span> ConditionNodeRepository\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">load</span><span class=\\\"token punctuation\\\">(</span>targetId<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> ConditionalNode<span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 1. 대상에 걸린 모든 조건 노드를 조회</span>\\n    <span class=\\\"token keyword\\\">val</span> allNodes <span class=\\\"token operator\\\">=</span> conditionNodeRepository<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findByTargetId</span><span class=\\\"token punctuation\\\">(</span>targetId<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">val</span> nodeMap <span class=\\\"token operator\\\">=</span> allNodes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">associateBy</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 2. 부모 노드가 없는 조건 노드를 찾는다.</span>\\n    <span class=\\\"token keyword\\\">val</span> root <span class=\\\"token operator\\\">=</span> allNodes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">firstOrNull</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>parentId <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">?:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span>\\n    <span class=\\\"token comment\\\">// 3. 조건 트리를 구성하여 반환</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">buildTree</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">,</span> nodeMap<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 재귀적으로 트리를 구성하는 메서드</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">buildTree</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token operator\\\">:</span> ConditionNodeEntity<span class=\\\"token punctuation\\\">,</span> nodeMap<span class=\\\"token operator\\\">:</span> Map<span class=\\\"token operator\\\">&lt;</span>Long<span class=\\\"token punctuation\\\">,</span> ConditionNodeEntity<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> ConditionalNode <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      ConditionNodeEntity<span class=\\\"token punctuation\\\">.</span>NodeType<span class=\\\"token punctuation\\\">.</span>LEAF <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">LeafCondition</span><span class=\\\"token punctuation\\\">(</span>\\n          id <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n          attribute <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">.</span>attribute<span class=\\\"token operator\\\">!!</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">.</span>operator<span class=\\\"token operator\\\">!!</span><span class=\\\"token punctuation\\\">,</span>\\n          value <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token operator\\\">!!</span><span class=\\\"token punctuation\\\">,</span>\\n          valueType <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">.</span>valueType<span class=\\\"token operator\\\">!!</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">let</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Long\\\"</span></span> <span class=\\\"token operator\\\">-></span> Long<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n              <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Int\\\"</span></span> <span class=\\\"token operator\\\">-></span> Int<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n              <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Boolean\\\"</span></span> <span class=\\\"token operator\\\">-></span> Boolean<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n              <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Double\\\"</span></span> <span class=\\\"token operator\\\">-></span> Double<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n              <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"String\\\"</span></span> <span class=\\\"token operator\\\">-></span> String<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n              <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Unsupported type: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">it</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      ConditionNodeEntity<span class=\\\"token punctuation\\\">.</span>NodeType<span class=\\\"token punctuation\\\">.</span>COMPOSITE <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">val</span> children <span class=\\\"token operator\\\">=</span> nodeMap<span class=\\\"token punctuation\\\">.</span>values<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>parentId <span class=\\\"token operator\\\">==</span> root<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">CompositeCondition</span><span class=\\\"token punctuation\\\">(</span>\\n          id <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n          logic <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">.</span>logic<span class=\\\"token operator\\\">!!</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token comment\\\">// 재귀적으로 자식 노드를 구성</span>\\n          children <span class=\\\"token operator\\\">=</span> children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">buildTree</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> nodeMap<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"먼저 루트 노드를 찾고, 그 노드의 자식 노드를 재귀적으로 구성하여 트리를 만든다. 이때, 성능 최적화를 위해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nodeMap</code>\"\n    }\n  }), \"을 구성하면 부모 노드에 대한 자식 노드를 쉽게 찾을 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"사용-예시\"\n  }, React.createElement(_components.a, {\n    href: \"#사용-예시\"\n  }, \"사용 예시\")), \"\\n\", React.createElement(_components.p, null, \"이제 실제로 데이터베이스에서 조건 트리를 불러와 평가하는 예시를 살펴보자. 다음은 데이터베이스 없이 조건 트리를 평가하는 예시다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 1. 먼저 조건 트리를 구성한다.</span>\\n  <span class=\\\"token keyword\\\">val</span> condition <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">CompositeCondition</span><span class=\\\"token punctuation\\\">(</span>\\n    id <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n    logic <span class=\\\"token operator\\\">=</span> CompositeCondition<span class=\\\"token punctuation\\\">.</span>LogicalOperator<span class=\\\"token punctuation\\\">.</span>AND<span class=\\\"token punctuation\\\">,</span>\\n    children <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">LeafCondition</span><span class=\\\"token punctuation\\\">(</span>\\n        id <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n        attribute <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"age\\\"</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token operator\\\">=</span> LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>GTE<span class=\\\"token punctuation\\\">,</span>\\n        value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"18\\\"</span></span><span class=\\\"token punctuation\\\">,</span>\\n        valueType <span class=\\\"token operator\\\">=</span> Long<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token function\\\">LeafCondition</span><span class=\\\"token punctuation\\\">(</span>\\n        id <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n        attribute <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"purchaseCount\\\"</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token operator\\\">=</span> LeafCondition<span class=\\\"token punctuation\\\">.</span>ConditionOperator<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">,</span>\\n        value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"5\\\"</span></span><span class=\\\"token punctuation\\\">,</span>\\n        valueType <span class=\\\"token operator\\\">=</span> Long<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// 2. 평가할 속성 값을 제공하는 AttributeResolver를 생성한다.</span>\\n  <span class=\\\"token keyword\\\">val</span> resolver <span class=\\\"token operator\\\">=</span> AttributeResolver <span class=\\\"token punctuation\\\">{</span> attr <span class=\\\"token operator\\\">-></span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>attr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"age\\\"</span></span>           <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">20</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"purchaseCount\\\"</span></span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">10</span>\\n      <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"level\\\"</span></span>         <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"VIP\\\"</span></span>\\n      <span class=\\\"token keyword\\\">else</span>            <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">null</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 3. 조건 트리를 평가한다.</span>\\n  <span class=\\\"token keyword\\\">val</span> evaluator <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">ConditionEvaluator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> evaluator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">evaluate</span><span class=\\\"token punctuation\\\">(</span>condition<span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// 4. 평가 결과를 출력한다.</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Evaluation Result: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">result</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"다음으로 데이터베이스를 사용하여 조건 트리를 평가하는 예시를 살펴보자. 만약 Spring을 사용한다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionTreeLoader</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ConditionEvaluator</code>\"\n    }\n  }), \"를 Bean으로 등록하여 DI를 통해 사용할 수 있다. 다음 코드는 Spring을 사용한 예시다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@Service</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">CouponConditionService</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">val</span> conditionTreeLoader<span class=\\\"token operator\\\">:</span> ConditionTreeLoader<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">val</span> conditionEvaluator<span class=\\\"token operator\\\">:</span> ConditionEvaluator\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">canExpose</span><span class=\\\"token punctuation\\\">(</span>targetId<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 1. 조건 트리 로더를 통해 조건 트리를 불러온다.</span>\\n    <span class=\\\"token keyword\\\">val</span> conditionTree <span class=\\\"token operator\\\">=</span> conditionTreeLoader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">load</span><span class=\\\"token punctuation\\\">(</span>targetId<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\">// 2. 평가할 속성 값을 제공하는 AttributeResolver 구현</span>\\n    <span class=\\\"token keyword\\\">val</span> attributeResolver <span class=\\\"token operator\\\">=</span> AttributeResolver <span class=\\\"token punctuation\\\">{</span> attribute <span class=\\\"token operator\\\">-></span>\\n      <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>attribute<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"age\\\"</span></span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">20</span>\\n        <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"purchaseCount\\\"</span></span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">3</span>\\n        <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"level\\\"</span></span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"SILVER\\\"</span></span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">null</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 2. 조건 트리를 평가한다.</span>\\n    <span class=\\\"token keyword\\\">return</span> conditionEvaluator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">evaluate</span><span class=\\\"token punctuation\\\">(</span>conditionTree<span class=\\\"token punctuation\\\">,</span> attributeResolver<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, {\n    id: \"rule-engine과-차이점\"\n  }, React.createElement(_components.a, {\n    href: \"#rule-engine과-차이점\"\n  }, \"Rule Engine과 차이점\")), \"\\n\", React.createElement(_components.p, null, \"조건 트리는 얼핏 보면 Rule Engine과 유사해 보일 수 있다. 둘 다 어떤 조건을 평가하고, 그 결과를 바탕으로 후속 동작을 수행한다. 하지만 실제로는 구조도, 역할도, 활용 범위도 전혀 다르다.\"), \"\\n\", React.createElement(_components.p, null, \"조건 트리는 하나의 조건 트리만을 평가한다. 즉, 하나의 조건 트리는 하나의 Boolean 결과값(true 또는 false)을 반환한다. 반면, Rule Engine은 수십 개에서 수천 개의 규칙을 동시에 평가한다. Rule Engine은 여러 개의 규칙이 동시에 만족될 수 있기 때문에, 어떤 규칙을 우선 실행할지 결정하기 위한 우선순위(salience), agenda 그룹, 충돌 해소 전략(conflict resolution) 등의 개념이 필요하다.\"), \"\\n\", React.createElement(_components.p, null, \"그리고 조건 트리는 단순히 조건을 평가하는 데 중점을 두지만, Rule Engine IF 조건이 만족되면 THEN에 해당하는 액션을 실행한다는 형식을 따르며, Rule Engine은 이 조건들을 모두 탐색하고 실행 순서를 조율한다.\"), \"\\n\", React.createElement(_components.p, null, \"구현 난이도 측면에서도 다르다. 조건 트리는 보통 재귀적으로 트리를 순회하며 조건을 평가한다. 일반적인 DFS(깊이 우선 탐색) 알고리즘만으로 충분하다. 반면, Rule Engine은 Rete와 같은 전문적인 추론 알고리즘을 사용한다. 이 알고리즘은 조건 간 중복 연산을 최소화하고, 변경된 데이터(fact)에만 반응하여 필요한 규칙만 평가한다. 즉, 조건 트리는 간단한 자료구조이고, Rule Engine은 복잡한 추론 시스템이다.\"), \"\\n\", React.createElement(_components.p, null, \"정리하자면 조건 트리는 주로 다음과 같은 상황에서 사용된다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"단일 조건식으로 판단해야 할 때\"), \"\\n\", React.createElement(_components.li, null, \"복잡한 조건을 관리자 화면에서 간단히 조정하고 싶을 때\"), \"\\n\", React.createElement(_components.li, null, \"특정 시점에만 평가되며, 즉시 결과를 얻고 싶을 때\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"반면, Rule Engine은 다음과 같은 상황에서 유용하다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"수백 개 이상의 규칙을 동시에 평가해야 할 때\"), \"\\n\", React.createElement(_components.li, null, \"규칙 간의 의존성이나 추론(Chaining)이 필요한 경우\"), \"\\n\", React.createElement(_components.li, null, \"IF-THEN 구조로 규칙에 기반한 복잡한 비즈니스 로직을 구현해야 할 때\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"이번 글에서는 조건이라는 요구사항을 추상화하는 방법과 조건 트리 모델을 설계하는 방법에 대해 설명했다. 조건 트리는 복잡한 조건을 평가하기 위한 강력한 도구로, 다양한 분야에서 활용될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 조건 트리는 관리자가 직접 조건을 편집할 수 있는 유연성을 제공한다. 또한, 런타임 도중에 조건을 변경할 수 있어 다양한 상황에 대응할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이처럼 잘 설계된 모델은 제품을 좀 더 유연하고 확장 가능하게 만들어준다.\"), \"\\n\", React.createElement(_components.section, {\n    \"data-footnotes\": true,\n    className: \"footnotes\"\n  }, React.createElement(_components.h2, {\n    className: \"sr-only\",\n    id: \"footnote-label\"\n  }, React.createElement(_components.a, {\n    href: \"#footnote-label\"\n  }, \"Footnotes\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-1\"\n  }, \"\\n\", React.createElement(_components.p, null, \"임피던스 불일치라고도 하며, 객체 지향 프로그래밍 언어와 관계형 데이터베이스 간의 불일치를 의미한다. 객체 지향 프로그래밍 언어는 객체를 중심으로 설계되지만, 관계형 데이터베이스는 테이블을 중심으로 설계된다. 이로 인해 두 시스템 간의 데이터 표현 방식이 다르기 때문에 발생하는 문제를 의미한다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-1\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-2\"\n  }, \"\\n\", React.createElement(_components.p, null, \"만약 MongoDB와 같은 Document 기반 DB를 사용한다면 별도로 엔티티 모델을 만들 필요 없이 그대로 사용할 수 있다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-2\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  console.log(isExpanded);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              zIndex: 1000\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <img\n              src={src}\n              width=\"100%\"\n              style={{\n                display: 'block',\n                borderRadius: 8,\n                width: 'auto',\n                height: 'auto',\n                maxWidth: 1440,\n                maxHeight: '80vh',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            />\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","blockquote","p","span","ul","li","strong","sup","h2","ol","section","_provideComponents","components","React","id","href","dangerouslySetInnerHTML","__html","style","color","rel","Image","src","caption","expandable","className","wrapper","MDXLayout","_ref","width","maxWidth","isExpanded","toggleExpanded","useState","console","log","___EmotionJSX","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","zIndex","display","borderRadius","maxHeight","transform","document","body"],"sourceRoot":""}