{"version":3,"file":"2f6b0f5151db324ec13183f7179f3a59bd3cc438-3346906acf20ed12e555.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2024-01-21-type-driven-development.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource @emotion/react*/\n/*\n\n<!--\n\n## 도메인 반영하기\n\n## 유한 상태 기계 정의하기\n\n-->\n*/\n/*\n\n<!--\nTypeScript에선 위와 같이 타입을 정의할 수 없지만 Union Type을 사용하여 값 혹은 다른 타입을 조합할 수 있다.\n\n```typescript\ntype Result =\n| { status: \"success\", data: string }\n| { status: \"failure\", error: string };\n\nconst result = { status: \"failure\", error: \"something went wrong\" };\nconsole.log(result.data); // compile error\n``` -->\n*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"@emotion/react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\",\n    h1: \"h1\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    sup: \"sup\",\n    section: \"section\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"타입은 개발자에게 친숙하면서도 어색할 수 있는 개념이다. 특히 정적 타입 언어를 사용한다면 타입은 땔래야 땔 수 없는 존재다. 타입은 가끔씩 귀찮게 굴 때도 있지만 개발자에게 \", _jsx(_components.strong, {\n        children: \"막강한 무기\"\n      }), \"가 될 수 있다. \", _jsx(_components.strong, {\n        children: \"타입은 함수와 데이터가 준수해야 하는 엄격한 계약\"\n      }), \"이며 타입 시스템은 이를 어길 수 없게 만든다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"개발자는 타입 시스템 잘 활용하여 더 안정적인 프로그램을 만들거나 코드 중복을 제거하는 것이 가능하다. 반대로 개발자가 타입을 풍부하게 사용하지 않는다면 타입 시스템을 통해 얻을 수 있는 이점을 제대로 누릴 수 없다. 이 글에서 소개하는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">타입 주도 개발</code>\"\n        }\n      }), \"은 타입 시스템에 대해 공부하기 좋은 방법론이며 이를 통해 로직에 대한 새로운 관점을 익힐 수 있다.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"타입에-대한-재인식\",\n      children: _jsx(_components.a, {\n        href: \"#타입에-대한-재인식\",\n        children: \"타입에 대한 재인식\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"타입에 대해 깊게 생각해본 적이 없다면 단순히 언어에서 제공되는 원시 타입이나 정의된 클래스만을 생각할 수 있다. 하지만 타입 시스템을 잘 활용하면 좀 더 풍부한 타입을 정의할 수 있다. 앞서 말했듯이 이를 통해 코드의 안정성을 높이거나 코드 중복을 제거할 수 있다. 타입을 잘 활용하는 방법과 타입 주도 개발에 대해 알아보기 전에 타입이 무엇인지 다시 알아보도록하자.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"타입은-집합이다\",\n      children: _jsx(_components.a, {\n        href: \"#타입은-집합이다\",\n        children: \"타입은 집합이다\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"타입은 어떠한 값이 속할 수 있는 집합이며, 이 집합에 속하는 값은 타입을 준수한다고 말한다. 예를 들어 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입은 정수를 포함하는 집합이며, \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">String</code>\"\n        }\n      }), \" 타입은 문자열을 포함하는 집합이다. 예를 들어 표현하면 다음과 같다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">Int <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2147483648</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2147483647</span> <span class=\\\"token punctuation\\\">}</span>\\nBoolean <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span>\\nString <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"a\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"b\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"c\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"중요한 것은 타입은 무한하지 않고 제한적이라는 것이다. 예를 들어 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">-2147483648</code>\"\n        }\n      }), \"부터 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">2147483647</code>\"\n        }\n      }), \"까지의 정수만 포함한다. 이는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입이라는 집합에 속하는 값은 이 범위를 벗어날 수 없다는 것을 의미한다. 따라서 이제 인식을 바꿔 \", _jsx(_components.strong, {\n        children: \"타입은 범위를 제한한 집합\"\n      }), \"이라고 생각해보자. 이는 개발자에게 있어 타입이라는 개념을 더욱 풍부하게 만들어준다.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"타입의-변환\",\n      children: _jsx(_components.a, {\n        href: \"#타입의-변환\",\n        children: \"타입의 변환\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"타입에 속한 값은 변형을 통해 다른 타입으로 변환될 수 있다. 예를 들어 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 값은 대부분의 언어에서 제공하는 변환 함수를 통해 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">String</code>\"\n        }\n      }), \" 타입으로 변환될 수 있다. 혹은 같은 계열인 타입으로 변환하는 것도 가능하다. 예를 들어 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 값은 더 큰 범위인 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Long</code>\"\n        }\n      }), \" 타입으로 변환될 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"중요한 것은 변환을 할 때 \", _jsx(_components.strong, {\n        children: \"함수를 거친다\"\n      }), \"는 것이다. 수학적으로 함수는 정의역에 해당하는 값을 치역으로 변환하는 것이다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2024-01-21-type-driven-development/function-process.png\",\n      caption: \"수학 책에서 볼 수 있던 도식\",\n      width: \"50%\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이를 프로그래밍 언어의 함수에 대응하면 다음과 같다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">          ↓ 정의역  ↓ 치역<span class=\\\"token punctuation\\\">(</span>공역<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span> \\n  x<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"즉, 함수의 파라메터는 정의역에 해당하며, 반환값은 치역에 해당한다. 이 개념을 조금 더 확장하면 함수를 크게 세 가지로 나눌 수 있다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"단사 함수 (Injective Function)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"전사 함수 (Surjective Function)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"전단사 함수 (Bijective Function)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"단사 함수는 변환된 값의 집합이 공역과 치역이 일치하지 않는 경우를 말한다. 이를 조금 더 단순하게 표현하면 \", _jsx(_components.strong, {\n        children: \"범위가 작은 타입에서 큰 타입으로 변환하는 것\"\n      }), \"을 말한다. 예를 들어 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 값은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Long</code>\"\n        }\n      }), \" 타입으로 변환될 수 있다. 이는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 값이 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Long</code>\"\n        }\n      }), \" 타입의 값으로 변환될 때 값의 손실이 없기 때문이다. 하지만 반대는 문제가 생길 수 있다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2024-01-21-type-driven-development/injective-function.png\",\n      caption: \"단사 함수\",\n      width: \"50%\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간단한 코드 예시를 살펴보자.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">enum</span> Event <span class=\\\"token punctuation\\\">{</span>\\n  BIRTH_DAY<span class=\\\"token punctuation\\\">,</span>\\n  AWESOME_DAY<span class=\\\"token punctuation\\\">,</span>\\n  BEAUTIFUL_DAY\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getEventId</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>BIRTH_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">1</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>AWESOME_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">2</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">3</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위 코드는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Event</code>\"\n        }\n      }), \" 타입을 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입으로 변환하는 함수이다. 이 함수는 단사 함수라서 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Event</code>\"\n        }\n      }), \" 타입의 값은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 값으로 변환될 때 값의 손실이 없다. 하지만 반대로 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 값은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Event</code>\"\n        }\n      }), \" 타입의 값으로 변환될 때 값의 손실이 발생한다. 예를 들어 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">4</code>\"\n        }\n      }), \"라는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 값은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Event</code>\"\n        }\n      }), \" 타입으로 변환될 수 없다. 이는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Event</code>\"\n        }\n      }), \" 타입의 값은 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">1</code>\"\n        }\n      }), \", \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">2</code>\"\n        }\n      }), \", \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">3</code>\"\n        }\n      }), \"만 포함하기 때문이다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"반대로 전사 함수는 변환된 값의 집합이 공역과 치역이 일치하는 경우를 말한다. 이는 \", _jsx(_components.strong, {\n        children: \"범위가 큰 타입에서 작은 타입으로 변환하는 것\"\n      }), \"을 말한다. 앞서 들었던 예의 반대로 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Long</code>\"\n        }\n      }), \" 타입의 값을 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입으로 변환할 수는 있지만 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \" 타입의 범위를 벗어날 수 있기 때문에 이에 대한 처리가 필요하다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2024-01-21-type-driven-development/surjective-function.png\",\n      caption: \"전사 함수\",\n      width: \"50%\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앞서 작성한 코드의 반대를 작성해보자.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getEvent</span><span class=\\\"token punctuation\\\">(</span>eventId<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Event <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>eventId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BIRTH_DAY\\n    <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>AWESOME_DAY\\n    <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">eventId</code>\"\n        }\n      }), \"를 통해 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Event</code>\"\n        }\n      }), \"를 생성할 수 있지만 범위를 벗어나는 경우가 생기기 때문에 이에 대한 예외 처리를 추가해줬다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마지막으로 전단사 함수는 두 집합 사이를 중복 없이 일대일로 대응시키는 함수를 말한다. 항등 함수가 대표적이다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 1</span>\\n<span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">126</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 126</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 같은 함수가 불필요하게 보일 수 있지만 항등 함수는 0과 1이 필요한 것처럼 고차 함수를 사용할 때 유용하게 사용할 수 있다. 예를 들어, 변환 함수를 인자로 받는 고차 함수를 작성한다고 가정해보자. 이때 만약 변환이 필요없다면 항등 함수를 사용할 수 있다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> T <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token punctuation\\\">,</span> R<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">::</span>identity<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [1, 2, 3]</span>\\n<span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [2, 4, 6]</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드를 봤을 때 단순히 변환 함수를 사용하지 않으면 된다고 생각할 수 있다. 일반적으론 그렇지만 함수 파이프라인을 사용해서 분기 로직을 작성하기 애매하거나 가독성 등을 위해 항등 함수를 사용하는 경우가 있을 수 있다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"타입을-통한-추상화\",\n      children: _jsx(_components.a, {\n        href: \"#타입을-통한-추상화\",\n        children: \"타입을 통한 추상화\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"앞서 단사 함수와 전사 함수 이야기를 한 것은 \", _jsx(_components.strong, {\n        children: \"타입을 통해 집합이 바뀌고 범위가 바뀔 수 있다는 것\"\n      }), \"을 말하고 싶었기 때문이다. 개발자는 목적 달성을 위해 함수를 통해 값을 변형하거나 필터링하거나 좁히거나 늘릴 수 있다. 이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, \", _jsx(_components.strong, {\n        children: \"타입을 통해 로직을 추상화 하는 것이 가능하다\"\n      }), \"라는 뜻이다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2024-01-21-type-driven-development/logic.png\",\n      caption: \"로직은 입출력의 연속\",\n      width: \"100%\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"프로그램을 개발할 때 어떤 패러다임과 방법론을 사용하더라도 로직이 최종적으로 입력, 처리, 출력을 거친다는 것은 변하지 않는다. 타입을 통해 로직을 추상화 한다는 것은 \", _jsx(_components.strong, {\n        children: \"입력과 출력을 타입으로 나타내고 이를 통해 로직을 설계\"\n      }), \"한다는 것과 같다. 이는 뒤에서 조금 더 자세히 설명할 타입 주도 개발의 핵심이라 할 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"아주 간단한 예시를 들어보자. 만약 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">리스트 안에 있는 모든 숫자를 더하는 함수</code>\"\n        }\n      }), \"를 작성한다고 가정해보자. 그렇다면 다음과 같이 표현할 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"입력: \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">List&lt;Int></code>\"\n          }\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"출력: \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">Int</code>\"\n          }\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이를 함수로 표현하면 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">List&lt;Int> -> Int</code>\"\n        }\n      }), \"와 같이 표현할 수 있다. 이를 통해 로직을 처리하는 함수의 입력과 출력을 타입으로 나타내고 이를 통해 로직을 구현하는 것이 가능하다.\"]\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// TODO: List&lt;Int>를 목적에 맞게 처리하여 Int로 가공해야 한다.</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"가독성과-런타임-안정성-챙기기\",\n      children: _jsx(_components.a, {\n        href: \"#가독성과-런타임-안정성-챙기기\",\n        children: \"가독성과 런타임 안정성 챙기기\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"주요 목적은 아니지만 타입을 이용하면 가독성을 챙기는 것도 가능하다. 예를 들어 다음 코드를 살펴보자.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> String\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Int\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> String\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위 코드는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">User</code>\"\n        }\n      }), \" 클래스를 정의한 코드이다. 이 코드는 문제가 없어 보이지만 이후에 문제가 생길 수 있다. \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">User</code>\"\n        }\n      }), \" 클래스가 가지고 있는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">age</code>\"\n        }\n      }), \", \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">email</code>\"\n        }\n      }), \" 속성은 각각 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \", \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">String</code>\"\n        }\n      }), \" 타입을 가지고 있다. 따라서 정수와 문자열을 할당할 수 있지만 할당된 값이 정말로 나이와 이메일인지는 알 수 없다. 이는 타입 시스템이 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">User</code>\"\n        }\n      }), \" 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 없기 때문이다.\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/2024-01-21-type-driven-development/types-are-a-lie.png\",\n      caption: \"타입이 거짓말을 하고 있어요!\",\n      width: \"50%\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 문제를 해결하기 위해 검증 로직을 사용할 수 있다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> String\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Int\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> String\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>age <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"나이는 0보다 작을 수 없습니다.\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"@\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이메일 형식이 올바르지 않습니다.\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위와 같이 해결할 수도 있지만 타입을 풍부하게 사용하면 이를 좀 더 우아하게 해결할 수 있다. 다음 코드를 살펴보자.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@JvmInline</span>\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNotBlank</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이름은 공백일 수 없습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token annotation builtin\\\">@JvmInline</span>\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Age</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"나이는 0보다 작을 수 없습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token annotation builtin\\\">@JvmInline</span>\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Email</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"@\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이메일 형식이 올바르지 않습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> Name\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Age\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> Email\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> Name<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Age<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> Email<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이런 방식으로 타입을 별도로 정의하여 사용하면 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">User</code>\"\n        }\n      }), \" 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 있으므로 가독성에 더 좋다. 또한 이러한 타입은 다양한 곳에서 재사용할 수 있으므로 코드의 중복을 줄일 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"참고로 이 글에서는 코틀린의 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">value class</code>\"\n        }\n      }), \"를 사용헀지만 다른 언어에서도 클래스를 사용하여 똑같이 만들 수 있다. 마지막으로 정리하면 타입 시스템을 풍부하게 사용하는 것으로 다음과 같은 이점을 얻을 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"컴파일 타임에 오류를 발견할 수 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"타입을 통해 로직을 설계 할 수 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"코드의 가독성을 높일 수 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"코드의 안정성을 높일 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"타입-주도-개발\",\n      children: _jsx(_components.a, {\n        href: \"#타입-주도-개발\",\n        children: \"타입 주도 개발\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그럼 이번에는 앞서 배운 것을 활용하여 타입 시스템을 풍부하게 사용할 수 있도록 개발하는 \", _jsx(_components.strong, {\n        children: \"타입 주도 개발\"\n      }), _jsx(\"sup\", {\n        children: \"Type-Driven Development\"\n      }), \"에 대해 알아보자. 타입 주도 개발은 다른 무언가를 먼저 정의하고 시작하는 XXX 주도 개발과 마찬가지로 \", _jsx(_components.strong, {\n        children: \"타입을 먼저 정의하고 이를 통해 코드를 작성\"\n      }), \"하는 방법론이다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고로 타입 주도 개발은 함수 구현처럼 아주 작은 부분에 적용할 수 있는 방법론이다. 따라서 다른 테스트 주도 개발과 같은 다른 개발 방법론과 함께 사용할 수 있다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"타입을-먼저-정의하기\",\n      children: _jsx(_components.a, {\n        href: \"#타입을-먼저-정의하기\",\n        children: \"타입을 먼저 정의하기\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"프로그램은 일련의 절차를 통해 원하는 결과를 만들어 낸다. 이때 각 절차는 입력 데이터를 받아 특정 로직을 수행하고 결과를 반환한다. 다양한 패러다임으로 프로그램을 작성할 수 있지만 절차를 통해 원하는 결과를 만들어 낸다는 것 하나는 변하지 않는다. 따라서 타입 주도 개발은 원한다면 어디에도 적용할 수 있으며 각 절차에 대한 결과를 타입으로 정의하는 것으로 시작한다.\", _jsx(_components.sup, {\n        children: _jsx(_components.a, {\n          href: \"#user-content-fn-2\",\n          id: \"user-content-fnref-2\",\n          \"data-footnote-ref\": true,\n          \"aria-describedby\": \"footnote-label\",\n          children: \"1\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"타입을 먼저 정의한다는 것은 우리가 원하는 로직을 구체적으로 작성하기 전에 타입으로 추상화한다는 것과 같다. 연습을 위해 프로그래머스의 \", _jsx(_components.a, {\n        href: \"https://school.programmers.co.kr/learn/courses/30/lessons/120902\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"문자열 계산하기\"\n      }), \" 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, \", _jsx(_components.strong, {\n        children: \"타입을 통해 로직을 추상화 하는 것이 가능하다\"\n      }), \"라는 뜻이다. 이러한 사고가 타입 주도 개발의 핵심이라 볼 수 있다. 연습을 위해 프로그래머스의 \", _jsx(_components.a, {\n        href: \"https://school.programmers.co.kr/learn/courses/30/lessons/120902\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"문자열 계산하기\"\n      }), \" 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"문자열로 이루어진 수식을 입력으로 제공한다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"연산자는 \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">+</code>\"\n          }\n        }), \"와 \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">-</code>\"\n          }\n        }), \"만 존재한다.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"피연산자는 자연수만 존재한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"잘못된 수식은 주어지지 않는다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"숫자와 연산자는 공백으로 구분한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"먼저 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">String</code>\"\n        }\n      }), \" 타입을 받아 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">Int</code>\"\n        }\n      }), \"로 반환하는 함수가 필요하다는 것을 떠올릴 수 있다. 이는 \", _jsx(_components.span, {\n        dangerouslySetInnerHTML: {\n          __html: \"<code class=\\\"language-text\\\">(String) -> Int</code>\"\n        }\n      }), \"와 같이 표현이 가능하다. 요구사항을 기반으로 로직을 더 구체화 해보면 다음과 같은 로직이 필요하다는 것을 알 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"문자열을 숫자와 연산자로 분리한다.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"문자를 숫자로 변환한다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"문자를 연산자로 변환한다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"문자가 숫자인지 연산자인지 판단한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"문자열을 계산한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 각 키워드를 타입으로 추상화하면 다음과 같다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"문자열 → \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">String</code>\"\n          }\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"문자 → \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">Token</code>\"\n          }\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"숫자 → \", _jsx(_components.span, {\n              dangerouslySetInnerHTML: {\n                __html: \"<code class=\\\"language-text\\\">Number</code>\"\n              }\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"연산자 → \", _jsx(_components.span, {\n              dangerouslySetInnerHTML: {\n                __html: \"<code class=\\\"language-text\\\">Operator</code>\"\n              }\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"부호 → \", _jsx(_components.span, {\n              dangerouslySetInnerHTML: {\n                __html: \"<code class=\\\"language-text\\\">Sign</code>\"\n              }\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드로 나타내면 다음과 같다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 부호</span>\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> Sign <span class=\\\"token punctuation\\\">{</span>\\n  PLUS<span class=\\\"token punctuation\\\">,</span> MINUS\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 토큰</span>\\n<span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">interface</span> Token<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> T\\n\\n  <span class=\\\"token comment\\\">// 숫자 토큰</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Token<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token comment\\\">// 연산자 토큰</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Sign<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Token<span class=\\\"token operator\\\">&lt;</span>Sign<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이번에는 각 로직을 타입으로 추상화해보자.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"문자열을 숫자와 연산자로 분리한다. → \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">(String) -> List&lt;Token></code>\"\n          }\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"문자를 숫자로 변환한다. → \", _jsx(_components.span, {\n              dangerouslySetInnerHTML: {\n                __html: \"<code class=\\\"language-text\\\">(String) -> Number</code>\"\n              }\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"문자를 연산자로 변환한다. → \", _jsx(_components.span, {\n              dangerouslySetInnerHTML: {\n                __html: \"<code class=\\\"language-text\\\">(String) -> Operator</code>\"\n              }\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"문자가 숫자인지 연산자인지 판단한다. → \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">(String) -> Boolean</code>\"\n          }\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"문자열을 계산한다 → \", _jsx(_components.span, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">(String) -> Int</code>\"\n          }\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"분해한 로직을 합쳐 로직 파이프라인을 만들면 다음과 같다.\"\n    }), \"\\n\", _jsx(_components.span, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 문자가 숫자인지 연산자인지 판단한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token operator\\\">=</span>\\n  token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toIntOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span>\\n\\n<span class=\\\"token comment\\\">// 문자를 숫자로 변환한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span>\\n  token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 문자를 연산자로 변환한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Sign <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span> <span class=\\\"token operator\\\">-></span> Sign<span class=\\\"token punctuation\\\">.</span>PLUS\\n    <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span> <span class=\\\"token operator\\\">-></span> Sign<span class=\\\"token punctuation\\\">.</span>MINUS\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Unknown operator: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">token</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 문자열을 숫자와 연산자 문자로 분리한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Token<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\" \\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> token <span class=\\\"token operator\\\">-></span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 문자열을 계산한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> tokens <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n  <span class=\\\"token keyword\\\">var</span> sign <span class=\\\"token operator\\\">=</span> Sign<span class=\\\"token punctuation\\\">.</span>PLUS\\n\\n  tokens<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span> <span class=\\\"token punctuation\\\">{</span> token <span class=\\\"token operator\\\">-></span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> Token<span class=\\\"token punctuation\\\">.</span>Number <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>sign<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          Sign<span class=\\\"token punctuation\\\">.</span>PLUS <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n            result <span class=\\\"token operator\\\">+=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n          <span class=\\\"token punctuation\\\">}</span>\\n          Sign<span class=\\\"token punctuation\\\">.</span>MINUS <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n            result <span class=\\\"token operator\\\">-=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">is</span> Token<span class=\\\"token punctuation\\\">.</span>Operator <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        sign <span class=\\\"token operator\\\">=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"9 - 4 - 1 + 2 + 6\\\"</span></span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 12</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고로 함수 정의는 요구사항에 대한 해석이나 패러다임에 따라 다를 수 있다. 따라서 같은 로직을 작성하더라도 위 코드와 다른 로직이 나올 수 있으므로 틀렸다고 생각하지 말자.\"\n    }), \"\\n\", \"\\n\", _jsx(_components.h1, {\n      id: \"마치며\",\n      children: _jsx(_components.a, {\n        href: \"#마치며\",\n        children: \"마치며\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"타입 시스템은 개발자에게 있어 아낌없이 주는 든든한 친구다. 문제를 미연에 방지할 수 있게 해주며 가독성까지 챙길 수 있게 해준다. 타입이라는 개념과 친해질 수록 타입 시스템을 풍부하게 사용할 수 있게 되고, 이는 코드의 안정성과 가독성을 높여준다. 이 글에서 소개하는 타입 주도 개발은 타입과 친해지기 좋은 연습 방법이 될 수 있다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다만 일일히 타입의 정의하여 타입이 너무 많아지거나 타입의 정의가 복잡해지면 오히려 코드를 작성하기 힘들어지거나 가독성을 떨어뜨릴 수 있다. 따라서 항상 적절한 상태를 유지하는 것이 중요하다.\"\n    }), \"\\n\", \"\\n\", _jsxs(_components.section, {\n      \"data-footnotes\": true,\n      className: \"footnotes\",\n      children: [_jsx(_components.h2, {\n        className: \"sr-only\",\n        id: \"footnote-label\",\n        children: _jsx(_components.a, {\n          href: \"#footnote-label\",\n          children: \"Footnotes\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          id: \"user-content-fn-2\",\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"다만 기본적으로 매우 절차적이면서 불변형을 사용하며 사이드 이펙트도 일종의 타입으로 생각하는 함수형 패러다임과 궁합이 좋다 \", _jsx(_components.a, {\n              href: \"#user-content-fnref-2\",\n              \"data-footnote-backref\": true,\n              className: \"data-footnote-backref\",\n              \"aria-label\": \"Back to content\",\n              children: \"↩\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","span","h1","a","h2","ul","li","sup","section","ol","_provideComponents","components","_jsxs","_Fragment","children","_jsx","dangerouslySetInnerHTML","__html","id","href","Image","src","caption","width","rel","className","wrapper","MDXLayout","_ref","expandable","isExpanded","toggleExpanded","useState","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body"],"sourceRoot":""}