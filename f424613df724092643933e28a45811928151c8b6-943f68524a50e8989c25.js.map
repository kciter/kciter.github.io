{"version":3,"file":"f424613df724092643933e28a45811928151c8b6-943f68524a50e8989c25.js","mappings":"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","sources":["webpack://kciter.so/./src/materials/modeling-series-view-model/TableRenderer.tsx","webpack://kciter.so/./src/materials/modeling-series-view-model/TableExample.tsx","webpack://kciter.so/./src/posts/2025-04-18-modeling-series-view-model.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// 타입 정의\nexport interface ColumnDefinition {\n  id: string;\n  label: string;\n  type: 'TEXT' | 'NUMBER' | 'DATE';\n  align: 'LEFT' | 'CENTER' | 'RIGHT';\n  sortable: boolean;\n}\n\nexport interface TableCell<T> {\n  columnId: string;\n  value: T | null;\n}\n\nexport interface TableRow<T> {\n  cells: TableCell<T>[];\n}\n\nexport interface Pagination {\n  page: number;\n  totalPage: number;\n  pageSize: number;\n}\n\nexport interface SortInfo {\n  columnId: string;\n  direction: 'ASC' | 'DESC';\n}\n\nexport interface FilterInfo {\n  columnId: string;\n  type:\n    | 'EQUAL'\n    | 'NOT_EQUAL'\n    | 'IN'\n    | 'BETWEEN'\n    | 'LIKE'\n    | 'NOT_LIKE'\n    | 'GREATER_THAN'\n    | 'LESS_THAN';\n  value: any;\n}\n\nexport interface TableState {\n  filters?: FilterInfo[] | null;\n  sorting?: SortInfo[] | null;\n}\n\nexport interface TableViewModel<T> {\n  columns: ColumnDefinition[];\n  rows: TableRow<T>[];\n  sortable: boolean;\n  pagination?: Pagination | null;\n  state: TableState;\n}\n\nexport interface TableRequestParams {\n  page?: number;\n  pageSize?: number;\n  sortBy?: string;\n  sortDirection?: 'ASC' | 'DESC';\n  filters?: Record<string, any>;\n}\n\nexport interface TableRendererProps<T> {\n  viewModel: TableViewModel<T>;\n  onSortChange?: (sortInfo: SortInfo) => void;\n  onPageChange?: (page: number) => void;\n  onRowClick?: (row: TableRow<T>) => void;\n  loading?: boolean;\n  className?: string;\n}\n\n// 유틸리티 함수\nexport const formatCellValue = (value: any, type: string): string => {\n  if (value === null || value === undefined) return '';\n\n  switch (type) {\n    case 'NUMBER':\n      return Number(value).toLocaleString();\n    case 'DATE':\n      if (value instanceof Date) {\n        return value.toLocaleDateString();\n      } else if (typeof value === 'string') {\n        return new Date(value).toLocaleDateString();\n      }\n      return String(value);\n    default:\n      return String(value);\n  }\n};\n\n// 특정 컬럼의 셀 찾기\nexport const findCellByColumnId = <T,>(\n  row: TableRow<T>,\n  columnId: string\n): TableCell<T> | undefined => {\n  return row.cells.find(cell => cell.columnId === columnId);\n};\n\n// 정렬 아이콘 컴포넌트\ninterface SortIconProps {\n  columnId: string;\n  sortable: boolean;\n  sorting?: SortInfo[] | null;\n}\n\nconst SortIcon: React.FC<SortIconProps> = ({ columnId, sortable, sorting }) => {\n  if (!sortable) return null;\n\n  if (sorting && sorting.length > 0) {\n    const currentSort = sorting[0];\n    if (currentSort.columnId === columnId) {\n      return currentSort.direction === 'ASC' ? (\n        <span className=\"sort-icon\">↑</span>\n      ) : (\n        <span className=\"sort-icon\">↓</span>\n      );\n    }\n  }\n\n  return <span className=\"sort-icon sort-icon-none\">↕</span>;\n};\n\n// 테이블 헤더 컴포넌트\ninterface TableHeaderProps<T> {\n  columns: ColumnDefinition[];\n  sortable: boolean;\n  sorting?: SortInfo[] | null;\n  onSort: (columnId: string) => void;\n}\n\nconst TableHeader = <T,>({ columns, sortable, sorting, onSort }: TableHeaderProps<T>) => {\n  return (\n    <thead>\n      <tr>\n        {columns.map(column => (\n          <th\n            key={column.id}\n            className={`column-${column.align.toLowerCase()} ${column.sortable ? 'sortable' : ''}`}\n            onClick={() => (column.sortable ? onSort(column.id) : null)}\n          >\n            <div className=\"th-content\">\n              <span>{column.label}</span>\n              {column.sortable && (\n                <SortIcon columnId={column.id} sortable={sortable} sorting={sorting} />\n              )}\n            </div>\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n\n// 로딩 컴포넌트\ninterface LoadingRowProps {\n  colSpan: number;\n}\n\nconst LoadingRow: React.FC<LoadingRowProps> = ({ colSpan }) => (\n  <tr>\n    <td colSpan={colSpan} className=\"loading-cell\">\n      <div className=\"loading-spinner\"></div>\n    </td>\n  </tr>\n);\n\n// 빈 데이터 표시 컴포넌트\ninterface EmptyRowProps {\n  colSpan: number;\n  message?: string;\n}\n\nconst EmptyRow: React.FC<EmptyRowProps> = ({ colSpan, message = '데이터가 없습니다.' }) => (\n  <tr>\n    <td colSpan={colSpan} className=\"empty-table\">\n      {message}\n    </td>\n  </tr>\n);\n\n// 테이블 셀 컴포넌트\ninterface TableCellProps {\n  columnId: string;\n  columnType: string;\n  align: string;\n  value: any;\n}\n\nconst TableCellComponent: React.FC<TableCellProps> = ({ columnId, columnType, align, value }) => (\n  <td key={columnId} className={`column-${align.toLowerCase()}`}>\n    {formatCellValue(value, columnType)}\n  </td>\n);\n\n// 테이블 행 컴포넌트\ninterface TableRowProps<T> {\n  row: TableRow<T>;\n  columns: ColumnDefinition[];\n  onClick?: (row: TableRow<T>) => void;\n}\n\nconst TableRowComponent = <T,>({ row, columns, onClick }: TableRowProps<T>) => (\n  <tr className={onClick ? 'clickable-row' : ''} onClick={() => (onClick ? onClick(row) : null)}>\n    {columns.map(column => {\n      const cell = findCellByColumnId(row, column.id);\n      const value = cell ? cell.value : null;\n\n      return (\n        <TableCellComponent\n          key={column.id}\n          columnId={column.id}\n          columnType={column.type}\n          align={column.align}\n          value={value}\n        />\n      );\n    })}\n  </tr>\n);\n\n// 테이블 본문 컴포넌트\ninterface TableBodyProps<T> {\n  columns: ColumnDefinition[];\n  rows: TableRow<T>[];\n  loading: boolean;\n  onRowClick?: (row: TableRow<T>) => void;\n}\n\nconst TableBody = <T,>({ columns, rows, loading, onRowClick }: TableBodyProps<T>) => {\n  if (loading) {\n    return (\n      <tbody>\n        <LoadingRow colSpan={columns.length} />\n      </tbody>\n    );\n  }\n\n  if (rows.length === 0) {\n    return (\n      <tbody>\n        <EmptyRow colSpan={columns.length} />\n      </tbody>\n    );\n  }\n\n  return (\n    <tbody>\n      {rows.map((row, index) => (\n        <TableRowComponent key={index} row={row} columns={columns} onClick={onRowClick} />\n      ))}\n    </tbody>\n  );\n};\n\n// 페이지네이션 컴포넌트\ninterface PaginationComponentProps {\n  pagination: Pagination;\n  onPageChange: (page: number) => void;\n}\n\nconst PaginationComponent: React.FC<PaginationComponentProps> = ({ pagination, onPageChange }) => {\n  const { page, totalPage, pageSize } = pagination;\n\n  return (\n    <div className=\"table-pagination\">\n      <button className=\"pagination-button\" disabled={page <= 1} onClick={() => onPageChange(1)}>\n        {'<<'}\n      </button>\n      <button\n        className=\"pagination-button\"\n        disabled={page <= 1}\n        onClick={() => onPageChange(page - 1)}\n      >\n        {'<'}\n      </button>\n\n      <span className=\"pagination-info\">\n        {page} / {totalPage}\n      </span>\n\n      <button\n        className=\"pagination-button\"\n        disabled={page >= totalPage}\n        onClick={() => onPageChange(page + 1)}\n      >\n        {'>'}\n      </button>\n      <button\n        className=\"pagination-button\"\n        disabled={page >= totalPage}\n        onClick={() => onPageChange(totalPage)}\n      >\n        {'>>'}\n      </button>\n\n      <span className=\"pagination-size-info\">({pageSize}개씩 보기)</span>\n    </div>\n  );\n};\n\n// 메인 테이블 렌더러 컴포넌트\nconst TableRenderer = <T,>({\n  viewModel,\n  onSortChange,\n  onPageChange,\n  onRowClick,\n  loading = false,\n  className = ''\n}: TableRendererProps<T>) => {\n  // 내부 상태\n  const [state, setState] = useState<TableState>(viewModel.state);\n\n  // 뷰모델 변경 시 내부 상태 업데이트\n  useEffect(() => {\n    setState(viewModel.state);\n  }, [viewModel.state]);\n\n  // 정렬 처리\n  const handleSort = (columnId: string) => {\n    if (!viewModel.sortable) return;\n\n    const column = viewModel.columns.find(col => col.id === columnId);\n    if (!column || !column.sortable) return;\n\n    let newDirection: 'ASC' | 'DESC' = 'ASC';\n    if (state.sorting && state.sorting.length > 0) {\n      const currentSort = state.sorting[0];\n      if (currentSort.columnId === columnId) {\n        newDirection = currentSort.direction === 'ASC' ? 'DESC' : 'ASC';\n      }\n    }\n\n    const newSortInfo: SortInfo = {\n      columnId,\n      direction: newDirection\n    };\n\n    const newState = {\n      ...state,\n      sorting: [newSortInfo]\n    };\n\n    setState(newState);\n\n    if (onSortChange) {\n      onSortChange(newSortInfo);\n    }\n  };\n\n  // 페이지 변경 처리\n  const handlePageChange = (page: number) => {\n    if (!viewModel.pagination) return;\n\n    if (page >= 1 && page <= viewModel.pagination.totalPage) {\n      if (onPageChange) {\n        onPageChange(page);\n      }\n    }\n  };\n\n  return (\n    <div className={`table-renderer-container ${className}`}>\n      <div className=\"table-wrapper\">\n        <table className=\"vm-table\">\n          <TableHeader\n            columns={viewModel.columns}\n            sortable={viewModel.sortable}\n            sorting={state.sorting}\n            onSort={handleSort}\n          />\n          <TableBody\n            columns={viewModel.columns}\n            rows={viewModel.rows}\n            loading={loading}\n            onRowClick={onRowClick}\n          />\n        </table>\n      </div>\n      {viewModel.pagination && (\n        <PaginationComponent pagination={viewModel.pagination} onPageChange={handlePageChange} />\n      )}\n    </div>\n  );\n};\n\nexport default TableRenderer;\n","import React, { useState, useEffect } from 'react';\nimport TableRenderer from './TableRenderer';\n\n// 샘플 데이터\nconst sampleData = [\n  {\n    id: 1,\n    name: '홍길동',\n    email: 'hong@example.com',\n    joinDate: '2023-01-15',\n    point: 3500\n  },\n  {\n    id: 2,\n    name: '김영희',\n    email: 'kim@example.com',\n    joinDate: '2023-02-20',\n    point: 4200\n  },\n  {\n    id: 3,\n    name: '이철수',\n    email: 'lee@example.com',\n    joinDate: '2023-03-05',\n    point: 2800\n  },\n  {\n    id: 4,\n    name: '박지민',\n    email: 'park@example.com',\n    joinDate: '2023-04-10',\n    point: 5100\n  },\n  {\n    id: 5,\n    name: '최민지',\n    email: 'choi@example.com',\n    joinDate: '2023-05-18',\n    point: 1900\n  },\n  {\n    id: 6,\n    name: '정다희',\n    email: 'jung@example.com',\n    joinDate: '2023-06-22',\n    point: 3200\n  },\n  {\n    id: 7,\n    name: '강현우',\n    email: 'kang@example.com',\n    joinDate: '2023-07-09',\n    point: 4600\n  },\n  {\n    id: 8,\n    name: '윤서연',\n    email: 'yoon@example.com',\n    joinDate: '2023-08-14',\n    point: 2100\n  },\n  {\n    id: 9,\n    name: '서민석',\n    email: 'seo@example.com',\n    joinDate: '2023-09-30',\n    point: 3800\n  },\n  {\n    id: 10,\n    name: '임수진',\n    email: 'lim@example.com',\n    joinDate: '2023-10-05',\n    point: 5300\n  },\n  {\n    id: 11,\n    name: '오준호',\n    email: 'oh@example.com',\n    joinDate: '2023-11-11',\n    point: 2700\n  },\n  {\n    id: 12,\n    name: '한지은',\n    email: 'han@example.com',\n    joinDate: '2023-12-20',\n    point: 4100\n  }\n];\n\n// 예제 API 호출 함수\nconst fetchTableData = async (params: any) => {\n  // 실제로는 API 호출\n  console.log('Fetching data with params:', params);\n\n  // 페이지네이션 적용\n  const pageSize = params.pageSize || 5;\n  const page = params.page || 1;\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n\n  // 정렬 적용\n  let filteredData = [...sampleData];\n\n  if (params.sortBy) {\n    filteredData.sort((a, b) => {\n      const valueA = (a as any)[params.sortBy];\n      const valueB = (b as any)[params.sortBy];\n\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return params.sortDirection === 'ASC'\n          ? valueA.localeCompare(valueB)\n          : valueB.localeCompare(valueA);\n      } else {\n        return params.sortDirection === 'ASC' ? valueA - valueB : valueB - valueA;\n      }\n    });\n  }\n\n  // 필터링 적용\n  if (params.filter && params.filterValue) {\n    filteredData = filteredData.filter(item => {\n      const value = (item as any)[params.filter];\n\n      if (typeof value === 'string') {\n        return value.toLowerCase().includes(params.filterValue.toLowerCase());\n      } else if (typeof value === 'number') {\n        return value === Number(params.filterValue);\n      }\n\n      return false;\n    });\n  }\n\n  // 페이지네이션을 위한 데이터 슬라이싱\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  // 테이블 행 형식으로 변환\n  const rows = paginatedData.map(item => ({\n    cells: [\n      { columnId: 'id', value: item.id },\n      { columnId: 'name', value: item.name },\n      { columnId: 'email', value: item.email },\n      { columnId: 'joinDate', value: item.joinDate },\n      { columnId: 'point', value: item.point }\n    ]\n  }));\n\n  // 필터링 적용된 전체 아이템 수\n  const totalItems = filteredData.length;\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  // 백엔드에서 받은 JSON을 모방\n  return {\n    columns: [\n      { id: 'id', label: 'ID', type: 'NUMBER', align: 'CENTER', sortable: true },\n      { id: 'name', label: '이름', type: 'TEXT', align: 'LEFT', sortable: true },\n      { id: 'email', label: '이메일', type: 'TEXT', align: 'LEFT', sortable: false },\n      { id: 'joinDate', label: '가입일', type: 'DATE', align: 'CENTER', sortable: true },\n      { id: 'point', label: '포인트', type: 'NUMBER', align: 'RIGHT', sortable: true }\n    ],\n    rows: rows,\n    sortable: true,\n    pagination: {\n      page: page,\n      totalPage: totalPages,\n      pageSize: pageSize\n    },\n    state: {\n      sorting: params.sortBy\n        ? [\n            {\n              columnId: params.sortBy,\n              direction: params.sortDirection || 'ASC'\n            }\n          ]\n        : [],\n      filters: params.filter\n        ? [\n            {\n              columnId: params.filter,\n              type: 'LIKE',\n              value: params.filterValue\n            }\n          ]\n        : null\n    }\n  };\n};\n\nexport function TableExample() {\n  // 상태 관리\n  const [viewModel, setViewModel] = useState<any>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [params, setParams] = useState({\n    page: 1,\n    pageSize: 5,\n    sortBy: '',\n    sortDirection: 'ASC' as 'ASC' | 'DESC',\n    filter: '',\n    filterValue: ''\n  });\n\n  // 데이터 로드\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      try {\n        // 실제 API 호출 시 지연 시간 시뮬레이션\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        const data = await fetchTableData(params);\n        setViewModel(data);\n      } catch (error) {\n        console.error('Error loading table data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, [params]);\n\n  // 정렬 변경 처리\n  const handleSortChange = (sortInfo: any) => {\n    setParams({\n      ...params,\n      sortBy: sortInfo.columnId,\n      sortDirection: sortInfo.direction\n    });\n  };\n\n  // 페이지 변경 처리\n  const handlePageChange = (page: number) => {\n    setParams({\n      ...params,\n      page\n    });\n  };\n\n  // 행 클릭 처리\n  const handleRowClick = (row: any) => {\n    // 행 클릭 시 ID 찾기\n    const idCell = row.cells.find((cell: any) => cell.columnId === 'id');\n    if (idCell) {\n      alert(`${idCell.value}번 행을 클릭했습니다.`);\n    }\n  };\n\n  // 페이지 크기 변경 처리\n  const handlePageSizeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newPageSize = parseInt(e.target.value);\n    setParams({\n      ...params,\n      page: 1, // 페이지 크기 변경 시 첫 페이지로 이동\n      pageSize: newPageSize\n    });\n  };\n\n  // 필터 변경 처리\n  const handleFilterChange = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const filterColumn = formData.get('filterColumn') as string;\n    const filterValue = formData.get('filterValue') as string;\n\n    setParams({\n      ...params,\n      page: 1, // 필터 변경 시 첫 페이지로 이동\n      filter: filterColumn,\n      filterValue: filterValue\n    });\n  };\n\n  // 필터 초기화\n  const handleResetFilter = () => {\n    setParams({\n      ...params,\n      page: 1,\n      filter: '',\n      filterValue: ''\n    });\n\n    // 폼 초기화\n    const filterForm = document.getElementById('filterForm') as HTMLFormElement;\n    if (filterForm) {\n      filterForm.reset();\n    }\n  };\n\n  if (!viewModel) {\n    return <div className=\"loading-container\">로딩 중...</div>;\n  }\n\n  return (\n    <div\n      style={{\n        paddingTop: '16px',\n        paddingBottom: '16px',\n        borderTop: '1px solid #ccc',\n        borderBottom: '1px solid #ccc'\n      }}\n    >\n      <div className=\"controls-container\">\n        <div className=\"filter-container\">\n          <form id=\"filterForm\" onSubmit={handleFilterChange}>\n            <select name=\"filterColumn\" className=\"filter-select\">\n              <option value=\"\">필터 컬럼 선택</option>\n              <option value=\"name\">이름</option>\n              <option value=\"email\">이메일</option>\n            </select>\n\n            <input\n              type=\"text\"\n              name=\"filterValue\"\n              placeholder=\"필터 값 입력\"\n              className=\"filter-input\"\n            />\n\n            <button type=\"submit\" className=\"filter-button\">\n              필터 적용\n            </button>\n\n            <button type=\"button\" className=\"filter-reset-button\" onClick={handleResetFilter}>\n              필터 초기화\n            </button>\n          </form>\n        </div>\n\n        <div className=\"page-size-container\">\n          <label htmlFor=\"pageSize\">페이지 크기:</label>\n          <select\n            id=\"pageSize\"\n            value={params.pageSize}\n            onChange={handlePageSizeChange}\n            className=\"page-size-select\"\n          >\n            <option value=\"3\">3개씩</option>\n            <option value=\"5\">5개씩</option>\n            <option value=\"10\">10개씩</option>\n          </select>\n        </div>\n      </div>\n\n      <TableRenderer\n        viewModel={viewModel}\n        onSortChange={handleSortChange}\n        onPageChange={handlePageChange}\n        onRowClick={handleRowClick}\n        loading={loading}\n      />\n\n      <div className=\"api-params\">\n        <h3>현재 API 파라미터:</h3>\n        <pre>{JSON.stringify(params, null, 2)}</pre>\n      </div>\n    </div>\n  );\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nimport {TableExample} from '@materials/modeling-series-view-model';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    span: \"span\",\n    ul: \"ul\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"들어가며\"\n  }, React.createElement(_components.a, {\n    href: \"#들어가며\"\n  }, \"들어가며\")), \"\\n\", React.createElement(_components.p, null, \"모델링 시리즈의 첫 번째 주제는 뷰모델(ViewModel)이다. 흔히 모델링이라 한다면 도메인 정보를 추상화하거나 데이터베이스 스키마를 설계하는 것을 떠올리기 쉽다. 하지만 모델링이란 방법은 다양한 곳에서 사용할 수 있다. 이러한 사실을 잊지 말고 다양한 곳에서 활용할 수 있도록 하자. 뷰모델은 그 중 하나라고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"제대로 뷰모델을 설계할 수 있다면 서버-클라이언트 간의 커뮤니케이션 비용이 줄어들고 유지보수성이 높아진다. 즉, 생산성이 달린 문제라고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"화면에 그려지는 뷰(View)는 여러 정보를 포함하고 있다. 이는 꼭, 사용자에게 보여질 상태만을 의미하지 않는다. 상태를 포함하여 뷰의 구조, 동작, 색상 등 모든 정보는 추상화가 가능하다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-18-modeling-series-view-model/view.png\",\n    caption: \"간단하게 보이는 뷰에도 많은 정보가 내포되어 있다\"\n  }), \"\\n\", React.createElement(_components.p, null, \"뷰모델은 어려운 개념이 아니다. \", React.createElement(_components.strong, null, \"뷰를 추상화하여 필요한 정보를 정리한 것을 뷰모델\"), \"이라 할 수 있다. 단순히 우리가 데이터를 JSON으로 내려주는 것도 일종의 뷰모델이라 할 수 있다. 다만, 뷰를 추상화한다는 자각 없이 데이터만을 내려주는 경우가 많을 뿐이다.\"), \"\\n\", React.createElement(_components.p, null, \"이 글에서는 단순한 데이터 전달을 넘어서, \", React.createElement(_components.strong, null, \"제대로 된 뷰모델이 생산성에 어떠한 이점이 있는지\"), \"를 다양한 예시와 함께 살펴보려 한다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"뷰를-추상화-하는-방법\"\n  }, React.createElement(_components.a, {\n    href: \"#뷰를-추상화-하는-방법\"\n  }, \"뷰를 추상화 하는 방법\")), \"\\n\", React.createElement(_components.p, null, \"보통 많은 백엔드 개발자는 클라이언트에 데이터를 내려줄 때 둘 중 한 가지 방법을 선택한다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"전체 뷰에 특화된 데이터를 내려준다.\"), \"\\n\", React.createElement(_components.li, null, \"클라이언트가 조합해서 쓸 수 있도록 도메인 모델을 내려준다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"두 방법은 각각 장단점이 있으며 일반적으로 개발자 간 협의 후 상황에 따라 적절한 방법을 선택한다. 첫 번째 방법은 페이지 전체 구성에 특화된 데이터를 내려주는 방식이다. 이런 경우 백엔드 개발자는 데이터를 조합하는 코드를 작성하기에 불편할 수 있지만, 성능적으로 유리할 수 있고 클라이언트 개발자가 좀 더 편리하게 사용할 수 있다. 그렇지만 변경에는 약하기에 요구사항이 변경되면 백엔드 개발자와 클라이언트 개발자 모두에게 영향을 미친다.\"), \"\\n\", React.createElement(_components.p, null, \"반면, 두 번째 방법은 클라이언트가 경우에 따라 여러 API를 호출하여 특정 페이지에 필요한 데이터를 조합해야 한다. 백엔드 개발자는 도메인 모델을 설계하는 데 집중할 수 있고, 클라이언트 개발자는 조합하는 코드를 작성하기에 유연하게 대처할 수 있다. 하지만 성능적으로는 불리할 수 있다. 또한, 클라이언트 개발자가 데이터를 조합하는 코드를 작성해야 하기에 클라이언트 개발자에게 부담이 될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"필자는 제 3의 방법을 제안하고 싶다. 바로 \", React.createElement(_components.strong, null, \"뷰를 추상화하여 뷰모델을 설계하는 것\"), \"이다. 주로 컴포넌트 단위로 뷰를 구성하는 클라이언트에도 적합하며, 추상화 정도에 따라 유연하게 대처하는 것도 가능하다. 그럼 뷰모델은 어떻게 설계할 수 있을까?\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"하나의-모델-여러-개의-뷰\"\n  }, React.createElement(_components.a, {\n    href: \"#하나의-모델-여러-개의-뷰\"\n  }, \"하나의 모델, 여러 개의 뷰\")), \"\\n\", React.createElement(_components.p, null, \"사실 뷰를 구성하기 위한 \", React.createElement(_components.strong, null, \"데이터는 이미 추상화되어 있다.\"), \" 예를 들어, 우리는 뷰에서 정보를 나열해야 할 때 다음과 같이 데이터를 리스트로 구성한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"posts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"title\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"제목1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"content\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"내용1\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"title\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"제목2\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"content\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"내용2\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이렇게 구성된 리스트 데이터는 여러 방식으로 그려질 수 있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-18-modeling-series-view-model/list-vs-card.png\",\n    caption: \"리스트 뷰 VS 카드 뷰\"\n  }), \"\\n\", React.createElement(_components.p, null, \"뷰모델 설계는 \", React.createElement(_components.strong, null, \"하나의 모델에서 여러 뷰가 탄생할 수 있다는 관점에서 시작\"), \"한다. 조금 더 구체적으로 살펴보자. 설계를 잘하기 위해선 필요한 것을 정확히 알고 있어야 하고, 그러기 위해선 먼저 분해를 잘해야 한다. 뷰는 다음과 같이 크게 네 가지 구성 요소로 나눌 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"상태(State)\"), \": 뷰에서 사용자에게 보여주는 값을 말한다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"구조(Structure)\"), \": 뷰의 구조. 예를 들어, 테이블 뷰는 Column과 Row로 나뉘고 Row에서도 Cell로 나뉘는 등 레이아웃 구조를 말한다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"동작(Action)\"), \": 뷰에서 발생하는 동작. 예를 들어, 뷰에서 특정 버튼을 클릭했을 때 어떤 동작을 할지에 대한 정보를 말한다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"스타일(Style)\"), \": 뷰의 스타일. 예를 들어, 뷰의 색상, 폰트, 크기 등과 같은 정보를 말한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"필자는 상태, 구조, 동작, 스타일 구성 요소를 조합하여 뷰모델을 설계할 수 있다고 생각한다. 그리고 이 네 가지는 서로 독립적이지 않기에 서로 조합하여 사용하는 것도 가능하다. 아직 어렵게 느껴질 수 있으니 테이블 뷰모델을 만들며 설계 과정을 익혀보자.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"테이블-뷰모델-만들어보기\"\n  }, React.createElement(_components.a, {\n    href: \"#테이블-뷰모델-만들어보기\"\n  }, \"테이블 뷰모델 만들어보기\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"설계-방법\"\n  }, React.createElement(_components.a, {\n    href: \"#설계-방법\"\n  }, \"설계 방법\")), \"\\n\", React.createElement(_components.p, null, \"테이블(Table) 뷰는 많은 데이터를 나열하고 관리하기 편하기에 많은 곳에서 사용된다. SaaS 서비스거나 대시보드, 관리자 애플리케이션 등 다양한 곳에서 사용된다.\"), \"\\n\", React.createElement(_components.p, null, \"보통 많은 경우 테이블에 상태를 보여주기 위한 API는 단순히 리스트 값만을 넘긴다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"홍길동\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"age\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">32</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"status\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"ACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"김영희\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"age\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">27</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"status\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"INACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이렇게 넘긴 값은 클라이언트가 해석할 필요가 있다. 어떤 필드를 컬럼으로 쓸지, 어떤 포맷으로 보여줄지, 어떤 순서로 나열할지 모두 클라이언트의 몫이다. 한 마디로 추상화 레벨이 높다. 위와 같은 데이터는 꼭 테이블이 아니더라도 다양하게 해석될 여지가 있다.\"), \"\\n\", React.createElement(_components.p, null, \"사실 위 리스트 값도 하나의 뷰모델이라 할 수 있다. 하지만 다양하게 해석될 여지가 있기에 커뮤니케이션 측면에서 오해가 생길 수 있는 여지가 있다. \", React.createElement(_components.strong, null, \"좋은 모델은 다양하게 재사용할 수 있으면서 오해석할 여지를 줄인다.\"), \" 그런 측면에서 테이블 뷰모델을 설계한다면 오로지 다양한 테이블 뷰에 사용되도록 설계하는 것이 좋다.\"), \"\\n\", React.createElement(_components.p, null, \"그러기 위해서는 먼저 테이블 뷰가 가진 정보가 무엇인지 알아야 한다. 테이블 뷰는 단순히 리스트를 나열하는 것이 아니다. 테이블 뷰를 구성하기 위해선 다음과 같은 정보가 필요하다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"구조 (Column, Row, Cell 등)\"), \"\\n\", React.createElement(_components.li, null, \"컬럼 정의 (어떤 컬럼이 어떤 순서로 표시될지)\"), \"\\n\", React.createElement(_components.li, null, \"컬럼의 타입과 포맷 (숫자, 날짜, 텍스트 등)\"), \"\\n\", React.createElement(_components.li, null, \"값 표시 방법\"), \"\\n\", React.createElement(_components.li, null, \"정렬\"), \"\\n\", React.createElement(_components.li, null, \"페이지네이션\"), \"\\n\", React.createElement(_components.li, null, \"셀 병합\"), \"\\n\", React.createElement(_components.li, null, \"필터링\"), \"\\n\", React.createElement(_components.li, null, \"선택\"), \"\\n\", React.createElement(_components.li, null, \"드래그 앤 드롭\"), \"\\n\", React.createElement(_components.li, null, \"...\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"테이블 뷰를 만들기 위해선 생각보다 많은 정보가 필요하다. 많은 경우 뷰를 위한 정보는 요구사항, 디자인 단계에서 확정된다. 하지만 백엔드 코드엔 오직 데이터만 포함되고 그 외 정보는 오직 클라이언트 코드에만 포함될 뿐이다. 하지만 백엔드에서 뷰모델을 설계하고 이에 대한 처리 로직을 구현한다면 요구사항에 맞춰서 유연하게 변경 대처할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"몇 가지 예시를 통해 좀 더 자세히 알아보자. 먼저 기존 리스트 데이터에 구조에 대한 정보를 추가하면 다음과 같이 데이터를 내려줄 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 컬럼</span>\\n  <span class=\\\"token property\\\">\\\"columns\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"label\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"이름\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"TEXT\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"age\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"label\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"나이\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"NUMBER\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"status\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"label\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"상태\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"TEXT\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 데이터</span>\\n  <span class=\\\"token property\\\">\\\"rows\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"홍길동\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"age\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">32</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"status\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"ACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"김영희\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"age\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">27</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"status\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"INACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같이 내려주면 클라이언트는 어떤 컬럼이 있는지, 컬럼 순서가 어떻게 되는지, 필드의 타입이 무엇인지, 어떻게 보여줘야 하는지에 대한 정보를 모두 알 수 있다. 구조에 대한 정보가 정해졌으므로 \", React.createElement(_components.strong, null, \"클라이언트는 이 정보에 대한 렌더러를 만들면 대부분의 테이블 뷰를 손쉽게 그릴 수 있다.\")), \"\\n\", React.createElement(_components.p, null, \"이제 상태에 대한 정보를 구체화해보자. 위 값에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">age</code>\"\n    }\n  }), \"는 숫자로 제공되지만 이 상태는 추상화되 값이다. 만약 구체화하다면 나이를 보여줄 때 '32'로 보여줄 지, '32세'로 보여줄지, '32세 이상'으로 보여줄지 뷰모델을 통해 정할 수 있다. 다음과 같이 테이블 셀에 대한 정보와 함께 보여줄 값을 별도로 추가할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  ...\\n  <span class=\\\"token property\\\">\\\"rows\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 셀에 대한 정보</span>\\n      <span class=\\\"token property\\\">\\\"cells\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"홍길동\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"age\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">32</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"displayValue\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"32세\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"status\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"ACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"cells\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"김영희\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"age\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">27</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"displayValue\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"27세\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"status\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"INACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같이 내려주면 클라이언트는 나이에 해당하는 데이터를 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{value}세</code>\"\n    }\n  }), \"로 보여줄 수 있다는 것을 알 수 있다. 이런 방식을 통해 뷰모델을 설계할 수 있다. 지금 설계한 것보다 더 구체화 한다면 다음과 같이 만들 수도 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"sortable\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"columns\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"label\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"이름\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"TEXT\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"align\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"left\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"sortable\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"age\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"label\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"나이\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"NUMBER\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"align\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"right\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"sortable\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"id\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"status\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"label\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"상태\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"TEXT\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"align\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"center\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"sortable\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"rows\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"cells\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"홍길동\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"age\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">32</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"displayValue\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"32세\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"status\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"ACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"style\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"backgroundColor\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"#f0f0f0\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"cells\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"김영희\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"age\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">27</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"displayValue\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"27세\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"columnId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"status\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token property\\\">\\\"value\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"INACTIVE\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"style\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">\\\"backgroundColor\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"#ffffff\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    ...\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"pagination\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"page\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"totalPage\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"pageSize\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">20</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"정리하자면, 뷰모델을 설계할 때는 언제나 \", React.createElement(_components.strong, null, \"뷰에 어떤 정보가 있는지\"), \"를 생각해야 한다. 그리고 이 정보에서 필요한 것을 뽑아 \", React.createElement(_components.strong, null, \"어떻게 추상화할 수 있을지 고민\"), \"해야 한다. 하나의 뷰모델에서 여러 뷰를 만들 수 있다는 것을 기억하자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"설계와-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#설계와-구현\"\n  }, \"설계와 구현\")), \"\\n\", React.createElement(_components.p, null, \"뷰모델을 설계하는 방법에 대해서 충분히 다뤘으니 이제 본격적으로 설계와 구현을 해보자. 여기서는 다음 스펙으로 테이블 뷰모델을 설계할 것이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"테이블 뷰에 대한 구조\"), \"\\n\", React.createElement(_components.li, null, \"스타일링\"), \"\\n\", React.createElement(_components.li, null, \"정렬 정보\"), \"\\n\", React.createElement(_components.li, null, \"필터링 정보\"), \"\\n\", React.createElement(_components.li, null, \"페이지네이션\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위 스펙에 기반하여 모델을 도식화하면 다음과 같다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-18-modeling-series-view-model/diagram.png\",\n    caption: \"테이블 뷰모델 도식화 (클릭하여 크게보기)\",\n    expandable: true\n  }), \"\\n\", React.createElement(_components.p, null, \"모델을 코드로 옮기면 다음과 같이 구현할 수 있다. 여기서는 Kotlin을 사용해서 구현했다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 테이블 전체 뷰모델</span>\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> TableViewModel<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> columns<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>ColumnDefinition<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 컬럼 정의</span>\\n  <span class=\\\"token keyword\\\">val</span> rows<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>TableRow<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>         <span class=\\\"token comment\\\">// 행 데이터</span>\\n  <span class=\\\"token keyword\\\">val</span> sortable<span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>       <span class=\\\"token comment\\\">// 정렬 가능 여부</span>\\n  <span class=\\\"token keyword\\\">val</span> pagination<span class=\\\"token operator\\\">:</span> Pagination<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 페이지네이션 정보</span>\\n  <span class=\\\"token keyword\\\">val</span> state<span class=\\\"token operator\\\">:</span> TableState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">TableState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 테이블 상태</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 컬럼 정의</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">ColumnDefinition</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>                <span class=\\\"token comment\\\">// 컬럼 식별자 (e.g. \\\"name\\\")</span>\\n    <span class=\\\"token keyword\\\">val</span> label<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>             <span class=\\\"token comment\\\">// 헤더에 표시될 이름 (e.g. \\\"이름\\\")</span>\\n    <span class=\\\"token keyword\\\">val</span> type<span class=\\\"token operator\\\">:</span> ColumnType<span class=\\\"token punctuation\\\">,</span>          <span class=\\\"token comment\\\">// 데이터 타입 (TEXT, NUMBER, DATE 등)</span>\\n    <span class=\\\"token keyword\\\">val</span> align<span class=\\\"token operator\\\">:</span> Align <span class=\\\"token operator\\\">=</span> Align<span class=\\\"token punctuation\\\">.</span>LEFT<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 정렬 방식 (LEFT, CENTER, RIGHT)</span>\\n    <span class=\\\"token keyword\\\">val</span> sortable<span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>  <span class=\\\"token comment\\\">// 정렬 가능 여부</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// 컬럼 타입</span>\\n  <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> ColumnType <span class=\\\"token punctuation\\\">{</span>\\n    TEXT<span class=\\\"token punctuation\\\">,</span> NUMBER<span class=\\\"token punctuation\\\">,</span> DATE\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 행 데이터</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> TableRow<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">val</span> cells<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>TableCell<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// 셀 하나</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> TableCell<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">val</span> columnId<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>             <span class=\\\"token comment\\\">// 어떤 컬럼의 셀인지</span>\\n    <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> T<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">,</span>                    <span class=\\\"token comment\\\">// 값</span>\\n    <span class=\\\"token keyword\\\">val</span> displayValue<span class=\\\"token operator\\\">:</span> String<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 보여줄 값 (e.g. \\\"32세\\\")</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// 정렬 값</span>\\n  <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> Align <span class=\\\"token punctuation\\\">{</span>\\n    LEFT<span class=\\\"token punctuation\\\">,</span> CENTER<span class=\\\"token punctuation\\\">,</span> RIGHT\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 페이지네이션 정보</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Pagination</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">val</span> page<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span>      <span class=\\\"token comment\\\">// 현재 페이지</span>\\n    <span class=\\\"token keyword\\\">val</span> totalPage<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 전체 페이지 수</span>\\n    <span class=\\\"token keyword\\\">val</span> pageSize<span class=\\\"token operator\\\">:</span> Int   <span class=\\\"token comment\\\">// 페이지당 아이템 수</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// 테이블 상태</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">TableState</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">val</span> filters<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>FilterInfo<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 필터링 값</span>\\n    <span class=\\\"token keyword\\\">val</span> sorting<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>SortInfo<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>    <span class=\\\"token comment\\\">// 정렬 정보</span>\\n  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 정렬 정보</span>\\n    <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">SortInfo</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">val</span> columnId<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 어떤 컬럼으로 정렬할지</span>\\n      <span class=\\\"token keyword\\\">val</span> direction<span class=\\\"token operator\\\">:</span> Direction <span class=\\\"token comment\\\">// 정렬 방향 (ASC, DESC)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\">// 정렬 방향</span>\\n    <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> Direction <span class=\\\"token punctuation\\\">{</span>\\n      ASC<span class=\\\"token punctuation\\\">,</span> DESC\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 필터 정보</span>\\n    <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">FilterInfo</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">val</span> columnId<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 어떤 컬럼으로 필터링할지</span>\\n      <span class=\\\"token keyword\\\">val</span> type<span class=\\\"token operator\\\">:</span> FilterType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 필터링 타입 (e.g. EQUAL, NOT_EQUAL, IN 등)</span>\\n      <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Any        <span class=\\\"token comment\\\">// 필터링 값</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\">// 필터 타입</span>\\n    <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> FilterType <span class=\\\"token punctuation\\\">{</span>\\n      EQUAL<span class=\\\"token punctuation\\\">,</span> NOT_EQUAL<span class=\\\"token punctuation\\\">,</span> IN<span class=\\\"token punctuation\\\">,</span> BETWEEN<span class=\\\"token punctuation\\\">,</span> LIKE<span class=\\\"token punctuation\\\">,</span> NOT_LIKE<span class=\\\"token punctuation\\\">,</span> GREATER_THAN<span class=\\\"token punctuation\\\">,</span> LESS_THAN\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"단순히 필요한 데이터를 클래스로 정의하면 되기 때문에 구현이 어렵지 않다. 이후엔 이 모델을 기반으로 렌더러를 구현하면 된다.\"), \"\\n\", React.createElement(_components.p, null, \"보통 이 정도만 구현해도 대부분의 테이블 뷰에서 유용하게 사용할 수 있다. 하지만 위 코드도 테이블 뷰의 기능을 전부 추상화하지는 않았다. 만약 더 범용적인 뷰모델을 만들고 싶다면 확장하는 것도 충분히 가능하다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"렌더러-만들기\"\n  }, React.createElement(_components.a, {\n    href: \"#렌더러-만들기\"\n  }, \"렌더러 만들기\")), \"\\n\", React.createElement(_components.p, null, \"이제 만들어진 뷰모델을 기반으로 화면에서 자동으로 처리해줄 렌더러를 구현하면 마무리된다. 필자가 Claude를 이용해 구현한 렌더러는 다음과 같다. (모바일에선 보기 흉할 수 있다)\"), \"\\n\", React.createElement(TableExample), \"\\n\", React.createElement(_components.p, null, \"지금은 스타일이 없지만 적절한 스타일을 적용하면 필터링, 정렬, 페이지네이션까지 가능한 꽤 괜찮은 테이블 뷰를 만들 수 있다. 만약 렌더러 코드가 궁금하다면 \", React.createElement(_components.a, {\n    href: \"https://github.com/kciter/kciter.github.io/tree/develop/src/materials/modeling-series-view-model/TableRenderer.tsx\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"GitHub\"), \"에서 볼 수 있다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"server-driven-ui\"\n  }, React.createElement(_components.a, {\n    href: \"#server-driven-ui\"\n  }, \"Server Driven UI\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"뷰모델의 끝은 SDUI(Server Driven UI)라고 할 수 있다.\"), \" SDUI는 서버에서 UI를 정해서 내려주는 방식으로, 클라이언트는 서버에서 정의한대로 그리면 된다. 앞서 구현한 테이블 뷰모델처럼 복잡한 뷰모델부터 단순한 뷰모델을 모두 포함하고 이에 대한 렌더러를 모두 구현했다면 SDUI를 구현했다고 할 수 있다. 즉, SDUI는 뷰모델의 모음집이라고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"SDUI는 빠른 배포가 어려운 클라이언트와 달리 서버만 변경하면 되므로 UI 변경이 더욱 쉽고, A/B 테스트와 개인화된 UI를 제공하기 더 쉽다는 장점이 있어 다양한 기업들이 사용하고 있다. SDUI를 사용하는 기업은 대표적으로 Airbnb가 있으며 국내에서도 카카오스타일, 오늘의집 등의 서비스에서 사용하고 있는 것으로 알려져있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-18-modeling-series-view-model/sdui.png\",\n    caption: \"마찬가지로 데이터를 렌더러를 통해 그릴 수 있다\"\n  }), \"\\n\", React.createElement(_components.p, null, \"다만, SDUI는 굉장히 추상화된 뷰모델이다. 클라이언트가 해석할 자유는 거의 없으며 서버가 제공하는 대로 그려야 한다. 엄격하게 규칙을 관리하고 전담할 사람이 없다면 오히려 생산성에 악영향을 미칠 수도 있다. 그리고 로딩 시간, 오류 처리, 사용자 인터렉션 등 다양한 것을 고민할 필요가 있다. 이에 대한 고민이 필요하기에 도입하기 전 충분한 검토가 필요하다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"서버-클라이언트간 통신은 일종의 계약이다. 이 계약서를 어떻게 만드냐에 따라서 커뮤니케이션의 난이도와 생산성이 달라진다. 뷰모델은 이러한 계약서를 잘 작성하기 위한 방법 중 하나라고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"JSON 상하차에도 엄연히 기술이 존재한다. 단지 쉬운 일, 별거 아닌 일이라 여겨질 수 있지만 더 많은 것을 생각하고 고민한다면 좋은 결과물을 만들 수 있다는 점을 잊지 말자.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  console.log(isExpanded);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              zIndex: 1000\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <img\n              src={src}\n              width=\"100%\"\n              style={{\n                display: 'block',\n                borderRadius: 8,\n                width: 'auto',\n                height: 'auto',\n                maxWidth: 1440,\n                maxHeight: '80vh',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            />\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["SortIcon","_ref","columnId","sortable","sorting","length","currentSort","direction","___EmotionJSX","className","TableHeader","_ref2","columns","onSort","map","column","key","id","align","toLowerCase","onClick","label","LoadingRow","_ref3","colSpan","EmptyRow","_ref4","message","TableCellComponent","_ref5","columnType","value","formatCellValue","type","Number","toLocaleString","Date","toLocaleDateString","String","TableRowComponent","_ref6","row","cell","findCellByColumnId","cells","find","TableBody","_ref7","rows","loading","onRowClick","index","PaginationComponent","_ref8","pagination","onPageChange","page","totalPage","pageSize","disabled","_ref9","viewModel","onSortChange","state","setState","useState","useEffect","col","newDirection","newSortInfo","newState","sampleData","name","email","joinDate","point","fetchTableData","async","console","log","params","startIndex","endIndex","filteredData","concat","sortBy","sort","a","b","valueA","valueB","sortDirection","localeCompare","filter","filterValue","item","includes","slice","totalItems","Math","ceil","filters","TableExample","setViewModel","setLoading","setParams","Promise","resolve","setTimeout","data","error","loadData","style","paddingTop","paddingBottom","borderTop","borderBottom","onSubmit","e","preventDefault","formData","FormData","currentTarget","filterColumn","get","placeholder","handleResetFilter","filterForm","document","getElementById","reset","htmlFor","onChange","newPageSize","parseInt","target","TableRenderer","sortInfo","idCell","alert","JSON","stringify","_createMdxContent","props","_components","Object","assign","h1","p","strong","ol","li","span","ul","h2","_provideComponents","components","React","href","Image","src","caption","dangerouslySetInnerHTML","__html","expandable","rel","wrapper","MDXLayout","width","maxWidth","isExpanded","toggleExpanded","cursor","undefined","ReactDOM","position","top","left","height","backgroundColor","zIndex","display","borderRadius","maxHeight","transform","body"],"sourceRoot":""}