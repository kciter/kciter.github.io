{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2025-05-06-modeling-series-temporal-mdx","path":"/posts/modeling-series-temporal/","result":{"data":{"site":{"siteMetadata":{"title":"kciter.so | devlog"}},"mdx":{"body":"\nimport Image from '@components/Image';\n\n# 들어가며\n\n비즈니스에 있어 시간은 매우 중요한 요소다. 시간은 단순히 물리적 측정값이 아니라, 비즈니스의 흐름과 의사결정에 큰 영향을 미친다. 또한, 시간은 다양한 관점에서 해석될 수 있으며, 다양한 방법으로 사용될 수 있다.\n\n이번 글에서는 시간을 소프트웨어 관점에서 어떻게 바라보아야 하는지, 어떻게 모델링할 수 있는지에 대해 알아볼 것이다.\n\n# 시간이란 무엇인가?\n\n시간은 이미 추상화된 개념이다. 따라서 여러 가지 관점에서 바라볼 수 있다. 예를 들어, 시간을 물리적 측정값으로서 바라볼 수도 있고 역사적, 문화적 관점에서 바라볼 수도 있다. 보통 우리가 시간을 이야기할 때는 다음과 같은 관점을 고려한다.\n\n* **물리량**\n  * 시간은 물리학 관점에서 봤을 때 시각과 시각 사이의 간격을 표현하는 단위를 뜻한다.\n  * ex) 지금 이 순간(Instant)은 빅뱅(Epoch) 이후 시간이 얼마나 흘렀나?\n* **위치**\n  * 시간은 위치에 따라 다르게 표현될 수 있다.\n  * ex) 경도 0도(UTC)가 정오일 때 동경 135도의 시각은? (경도상 위치)\n  * ex) 런던이 정오일 때 프랑스의 시각은? (국가, 지역)\n* **천문 현상**\n  * 지구자전속도의 불규칙성, 지구의 자전주기와 공전주기 등 천문 현상으로 인해 시간은 보정이 필요하다.\n  * ex) 윤초, 윤달, 윤년\n* **문화**\n  * 문화에 따라 시간 표현이 다를 수 있다.\n  * ex) 태양력, 태음력, 이슬람력, 에티오피아력 등\n* **역사**\n  * 역사적 사건에 의해 시간은 다르게 표현될 수 있다.\n  * ex) 1582년 10월 4일의 다음 날은?\n* **사회**\n  * 사회적 제도에 의해 시간은 변할 수 있다.\n  * ex) 일광 시간 절약제(Summer Time)\n\n우리는 꽤 많은 조건을 고려하여 시간을 표현한다. 현실 세계에선 서로 같은 맥락을 공유하기 때문에 의사소통에 문제가 없지만 소프트웨어 세계에선 규칙을 제공해야 한다.\n\n물리량과 위치, 천문 현상을 수학식으로 계산하는 것이 가능하지만 역사적 사건이나 사회적 제도는 규칙이 존재하지 않기에 단순히 수학식으로 시간을 계산할 수 없다. 예를 들어, 1582년 10월 4일의 다음 날은 1582년 10월 15일이다. 이는 역사적 사건에 의해 결정된 것이며, 단순히 수학식으로 계산할 수 없다. 또한, 일광 시간 절약제와 같은 사회적 제도는 각 국가나 지역에 따라 다르게 적용되기 때문에 이를 고려해야 한다. 게다가 문화에 따라 시간을 표현하는 방법이 다를 수 있다는 점도 골치아프다.\n\n그렇기에 통일된 시간 표기법을 위한 [협정 세계시](https://ko.wikipedia.org/wiki/%ED%98%91%EC%A0%95_%EC%84%B8%EA%B3%84%EC%8B%9C)가 탄생했다. UTC는 [원자 시계](https://ko.wikipedia.org/wiki/%EA%B5%AD%EC%A0%9C%EC%9B%90%EC%9E%90%EC%8B%9C)와 윤초 보정을 기반으로 표준화한 시각으로 모든 시간대는 UTC+0을 기준으로 환산한다. 예를 들어, 대한민국의 시간은 UTC 시간에 +9를 더한 시간으로 영국 시간이 오전 1시라면 대한민국은 오전 10시[^1]가 된다. UTC는 [ISO 8601](https://ko.wikipedia.org/wiki/ISO_8601)을 따라 다음과 같은 표기법을 따른다.\n\n```\n// UTC+0 기준 2021년 3월 20일 9시\n2021-03-20T09:00:00.000Z\n\n// UTC+9 (한국 시간) 기준 2021년 3월 20일 9시\n2021-03-20T09:00:00.000+09:00\n```\n\n가운데 `T`는 Time을 뜻하고 시간 뒤 `Z`는 Zulu time[^2] 을 뜻한다.\n\n<Image src=\"/images/2021-03-20-deep-dive-into-datetime/utc.png\" caption=\"국가마다 시간대가 다르다\" />\n\n참고로 국가, 지역마다 경도상 시간과 국가 시간이 다를 수 있다. 아이슬란드의 경우 경도상 위치는 UTC-1이지만 UTC+0을 사용하고 있다.\n\n# 측도와 무엇이 다른가?\n\n이전 글에서 우리는 측도 개념을 통해 여러 물리적 수량을 모델링하는 방법을 알아보았다. 단순히 년, 월, 일과 같은 것을 표현한다면 시간을 측도 모델을 통해서 표현할 수 있지만, 시간은 단순한 측도와는 다른 특성을 갖고 있다. 따라서 시간 모델링은 일반적인 측도 모델링과는 다른 접근이 필요하다.\n\n1. 시간은 선형적인 변환이 불가능한 단위가 있다. 대부분의 측도는 단위 간 변환이 일정한 비율로 이루어진다. 예를 들어 1kg = 1000g, 1m = 100cm와 같이 명확한 변환 관계가 있다. 하지만 시간에서는 '월'과 같은 단위는 28일, 29일, 30일, 31일 등 상황에 따라 다른 길이를 갖는다.\n2. 시간은 다양한 캘린더 시스템과 타임존의 개념이 존재한다. 그레고리안 달력, 음력, 이슬람력 등 다양한 달력 시스템이 있으며, 각 지역별로 서로 다른 타임존이 적용된다. 이는 시간 계산을 복잡하게 만드는 요소다.\n3. 시간은 단순한 수량이 아닌 '시점'이라는 특별한 개념을 갖고 있다. \"2023년 5월 1일 오전 10시\"와 같은 시점은 단순한 측정값이 아니라, 시간의 흐름 속 특정 위치를 나타낸다.\n\n이러한 특성들 때문에 시간은 일반적인 측도 모델링으로는 부족하며, 더 정교한 모델링이 필요하다. 따라서 이번 글에서는 시간을 여러 관점에서 살펴보고, 각 관점에 맞는 모델링 방법을 알아볼 것이다.\n\n# 시간을 어떤 기준으로 사용해야 하는가?\n\n만약 소프트웨어가 글로벌에서 사용된다면 시간은 매우 중요한 요소다. 시간은 많은 비즈니스에서 중요한 역할을 하며, 시간에 따라 비즈니스의 흐름이 달라질 수 있다. 예를 들어, 주식 거래소는 시세가 변동하는 시간에 따라 거래가 이루어지기 때문에 시간을 정확히 기록해야 한다. 또한, 사용자가 상품을 결제할 때도 시간을 정확히 기록해야 한다. 이러한 이유로 시간은 매우 중요한 요소다.\n\n이러한 시간은 사용 사례에 따라 다르게 사용해야 한다. 예를 들어, 사용자가 상품을 결제할 때는 사용자의 시간대를 고려해야 하지만, 로그를 기록할 때는 UTC를 사용하는 것이 좋다. 이러한 이유로 시간은 사용 사례에 따라 다르게 사용해야 한다.\n\n## 순수한 시간\n\n필자의 생일은 1월 26일이다. 갑자기 생일 이야기를 한 것은 예시에 적합하기 때문이다. 보다시피 보통 생일은 시간대를 고려하지 않고 말한다. 만약 필자가 <strong>\"내가 한국에서 1월 26일에 태어났지만 미국 시간으로 따지면 1월 25일에 태어났으니 미국 생일은 1월 25일이야\"</strong>라고 말하고 다닌다면 많은 사람들이 정말 이상한 사람이라고 생각할 것이다.\n\n이처럼 시간대와 지역, 문화, 사회를 고려하지 않고 순수한 시간과 날짜를 사용해야하는 경우가 있다. 좀 더 예를 들어보자면 다음과 같은 사례에 쓰일 수 있다.\n\n* 생일\n* 기업 설립일\n* 기념일\n* 국경일\n\n혹은 기록을 위해 시간을 사용하지 않는 경우에도 순수한 시간을 사용할 때가 있다. 보통 벤치마킹을 하기 위해 시간을 사용하거나 유니크한 값을 만들어내기 위해 사용하기도 한다. 혹은 랜덤 값 SEED 용도로 사용될 수도 있다.\n\n## UTC\n\n역사, 사회, 문화에 대한 맥락 없이 <strong>'사건이 발생한 시각'</strong>만을 고려할 땐 UTC를 사용하여 시간을 기록하는 것이 좋다. 가장 대표적인 예시로 **로깅**을 들 수 있다. 로그는 분산되어 저장될 수 있기에 발생한 순서를 쉽게 알기 위해선 UTC처럼 기준이 되는 시간대를 정하는 것이 좋다. 만약 로그가 기록된 시간에 타임존이 적용되어 발생한 곳 마다 다르게 시간이 적용된다면 큰 혼란이 생길 수 있다. 마찬가지로 자주 사용하는 `createdAt`, `updatedAt`도 UTC로 기록하는 것이 좋다.\n\n<Image src=\"/images/2021-03-20-deep-dive-into-datetime/stock-chart.png\" caption=\"주식 차트는 대표적인 시계열 데이터다\" />\n\n또 다른 사용 예시로 시계열 데이터를 들 수 있다. 시계열 데이터의 경우 시간에 종속된 연속적인 데이터를 말하는데 UTC처럼 시간대가 정해진 상태로 기록된게 아니라면 언제 저장된 시간인지 알 수 없어 잘못된 분석으로 이어질 수 있다. 추가로 UTC는 다음과 같은 사례에 쓰일 수 있다.\n\n* 로그\n* 감사\n* 시계열 데이터\n* `createdAt`, `updatedAt`\n\n## Time Zone이 적용된 시간\n\n반면 사용자가 이용한 시각을 정확히 알기위해 Time Zone을 사용해야 할 떄도 있다. 예를 들면, 사용자가 상품을 결제했을 때 UTC 시간만 기록했다면 사용자가 정확히 몇시 몇분 몇초에 주문했는지 알 수가 없다. 이때 정확한 시각을 알기 위해선 데이터베이스에 Zone Id도 함께 기록해야 한다. 또한, UI에 표시되는 시간을 사용자 기준으로 보여주기 위해서도 Time Zone은 필요하다.\n\n<Image src=\"/images/2021-03-20-deep-dive-into-datetime/facebook.png\" />\n\n예를 들어, 같은 페이스북 게시물을 보더라도 사는 나라가 다르다면 작성한 시간이 다를 수 있다. 필자가 3월 15일 오후 12시 31분에 작성한 게시물은 영국 사람이 보기엔 새벽 3시 31분에 작성한 것으로 보일 것이고 하와이에 사는 사람이 보기엔 3월 14일 오후 5시 31분에 작성한 것으로 보일 것이다.\n\n그렇기 때문에 글로벌 서비스를 준비한다면 사용자 혹은 사용자가 포함되는 그룹 데이터에 Zone Id 정보를 추가해야 한다. 추가로 Time Zone이 적용된 시간은 다음과 같은 사례에 쓰일 수 있다.\n\n* 결제 시각\n* 푸시 알림 시각\n* UI 시각 표시\n* 캘린더\n\nUI에 내려주는 JSON 데이터 예시는 다음과 같다.\n\n```js\n{\n  \"userId\": 1,\n  \"name\": \"이선협\",\n  \"zoneId\": \"Asia/Seoul\", // Time Zone을 위한 Zone Id\n  \"birthdate\": \"1994-01-26\", // 순수한 시간\n  \"createdAt\": \"2021-03-20T04:59:25Z\", // 기준 시간 UTC\n  \"updatedAt\": \"2021-03-20T05:12:38Z\",\n  \"posts\": [\n    {\n      \"postId\": 1,\n      \"publishedAt\": \"2021-03-20T06:00:00Z\", // 기준 시간 오전 6시에 발행됨\n      // publishedAt은 user의 zondId에 따라 다르게 보일 수 있다.\n    }\n  ]\n}\n```\n\n# 시간을 어떻게 모델링할 것인가?\n\n시간은 사용 사례에 따라 다르게 다른 모델링 접근법이 필요하다. 주요 사용 사례를 살펴보면 다음과 같다.\n\n* 시점(Point in Time)<br />시점은 시간의 흐름 속 특정 순간을 나타낸다. 예를 들어 \"2023년 5월 1일 오전 10시\"는 시점이다. 시점은 달력 날짜와 시계 시간의 조합으로 표현되며, 타임존 정보를 포함할 수 있다. 시점 모델링의 핵심은 특정 순간을 정확히 식별하는 것이다.\n* 기간(Duration)<br />기간은 시간의 양을 나타낸다. \"3시간\", \"2일\", \"4주\" 등이 기간의 예시다. 기간은 시작점이나 끝점에 관계없이 순수한 시간의 길이를 표현한다. 기간은 측도와 가장 유사한 특성을 갖지만, 다양한 단위 간 변환이 복잡하다는 차이점이 있다.\n* 시간 간격(Interval)<br />시간 간격은 시작 시점과 끝 시점 사이의 범위를 나타낸다. \"2023년 5월 1일부터 2023년 5월 5일까지\"와 같이 표현된다. 시간 간격은 시작점과 끝점을 명확히 정의하며, 그 사이의 기간을 계산할 수 있다.\n* 반복(Recurrence)<br />반복은 일정한 패턴으로 발생하는 시간 이벤트를 나타낸다. \"매주 월요일 오전 10시\", \"매월 첫째 주 토요일\", \"2년마다 2월 29일\" 등이 반복의 예시다. 반복은 복잡한 규칙을 포함할 수 있으며, 일정 관리나 스케줄링에서 중요한 개념이다.\n\n이제 각 관점에 따른 시간 모델링을 살펴보자.\n\n## 시점(Point in Time)\n\n시점을 모델링하기 위해서는 날짜, 시간, 타임존 정보를 모두 고려해야 한다. 먼저 시점을 나타내는 **TimePoint** 클래스를 정의해보자.\n\n```kotlin\nimport java.time.Instant\nimport java.time.LocalDateTime\nimport java.time.ZoneId\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\n/**\n * 시간의 특정 시점을 표현하는 클래스\n */\nclass TimePoint private constructor(private val instant: Instant) {\n  companion object {\n    // 현재 시점 생성\n    fun now(): TimePoint = TimePoint(Instant.now())\n    \n    // Epoch 밀리초로부터 시점 생성\n    fun fromEpochMilli(epochMilli: Long): TimePoint = TimePoint(Instant.ofEpochMilli(epochMilli))\n    \n    // ISO 8601 문자열로부터 시점 생성\n    fun fromIsoString(isoString: String): TimePoint = TimePoint(Instant.parse(isoString))\n    \n    // 날짜/시간 컴포넌트로부터 시점 생성\n    fun of(year: Int, month: Int, day: Int, hour: Int = 0, minute: Int = 0, \n            second: Int = 0, nanoOfSecond: Int = 0, zone: ZoneId = ZoneId.systemDefault()): TimePoint {\n      val zonedDateTime = ZonedDateTime.of(year, month, day, hour, minute, second, nanoOfSecond, zone)\n      return TimePoint(zonedDateTime.toInstant())\n    }\n  }\n  \n  // 다양한 포맷으로 시점 표현\n  fun toIsoString(): String = instant.toString()\n  \n  fun toEpochMilli(): Long = instant.toEpochMilli()\n  \n  fun format(pattern: String, zone: ZoneId = ZoneId.systemDefault()): String {\n    val formatter = DateTimeFormatter.ofPattern(pattern)\n    val zonedDateTime = ZonedDateTime.ofInstant(instant, zone)\n    return zonedDateTime.format(formatter)\n  }\n  \n  // 특정 타임존에서의 시간 정보 가져오기\n  fun inZone(zone: ZoneId): ZonedDateTime = ZonedDateTime.ofInstant(instant, zone)\n  \n  // 시점 비교\n  fun isBefore(other: TimePoint): Boolean = instant.isBefore(other.instant)\n  \n  fun isAfter(other: TimePoint): Boolean = instant.isAfter(other.instant)\n  \n  // 시점 연산\n  fun plus(duration: Duration): TimePoint = TimePoint(instant.plus(duration.toJavaDuration()))\n  \n  fun minus(duration: Duration): TimePoint = TimePoint(instant.minus(duration.toJavaDuration()))\n  \n  // 시점 간 기간 계산\n  fun until(other: TimePoint): Duration = Duration.between(this, other)\n  \n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other !is TimePoint) return false\n    return instant == other.instant\n  }\n  \n  override fun hashCode(): Int = instant.hashCode()\n  \n  override fun toString(): String = toIsoString()\n}\n```\n\n이 클래스는 내부적으로 Java의 `Instant` 클래스를 사용하여 시점을 표현한다. `Instant`는 UTC 기준 에포크 시간(1970년 1월 1일 00:00:00 UTC)부터의 시간 경과를 나노초 정밀도로 표현한다. 이는 전 세계 어디서나 동일한 순간을 고유하게 식별할 수 있는 방법이다.\n\n## 기간(Duration)\n\n기간은 시간의 양을 나타내므로, 우리의 측도 모델과 유사하게 모델링할 수 있다. 다만, 시간 단위 간 변환이 복잡하다는 점을 고려해야 한다.\n\n```kotlin\nimport java.time.temporal.ChronoUnit\nimport java.util.concurrent.TimeUnit\n\n/**\n * 시간의 양(기간)을 표현하는 클래스\n */\nclass Duration private constructor(\n  val value: Long,\n  val unit: TimeUnit\n) {\n  companion object {\n    // 기본 팩토리 메서드\n    fun of(value: Long, unit: TimeUnit): Duration = Duration(value, unit)\n    \n    // 편의 메서드\n    fun ofNanos(nanos: Long): Duration = of(nanos, TimeUnit.NANOSECONDS)\n    fun ofMicros(micros: Long): Duration = of(micros, TimeUnit.MICROSECONDS)\n    fun ofMillis(millis: Long): Duration = of(millis, TimeUnit.MILLISECONDS)\n    fun ofSeconds(seconds: Long): Duration = of(seconds, TimeUnit.SECONDS)\n    fun ofMinutes(minutes: Long): Duration = of(minutes, TimeUnit.MINUTES)\n    fun ofHours(hours: Long): Duration = of(hours, TimeUnit.HOURS)\n    fun ofDays(days: Long): Duration = of(days, TimeUnit.DAYS)\n    \n    // 두 시점 사이의 기간 계산\n    fun between(start: TimePoint, end: TimePoint): Duration {\n      val millis = end.toEpochMilli() - start.toEpochMilli()\n      return ofMillis(millis)\n    }\n    \n    val ZERO = ofMillis(0)\n  }\n  \n  // 단위 변환\n  fun to(targetUnit: TimeUnit): Duration {\n    val convertedValue = targetUnit.convert(value, unit)\n    return of(convertedValue, targetUnit)\n  }\n  \n  // 기간 연산\n  fun plus(other: Duration): Duration {\n    val thisNanos = unit.toNanos(value)\n    val otherNanos = other.unit.toNanos(other.value)\n    return ofNanos(thisNanos + otherNanos)\n  }\n  \n  fun minus(other: Duration): Duration {\n    val thisNanos = unit.toNanos(value)\n    val otherNanos = other.unit.toNanos(other.value)\n    return ofNanos(thisNanos - otherNanos)\n  }\n  \n  fun multipliedBy(factor: Long): Duration = of(value * factor, unit)\n  \n  fun dividedBy(divisor: Long): Duration = of(value / divisor, unit)\n  \n  // Java Duration으로 변환\n  fun toJavaDuration(): java.time.Duration = java.time.Duration.of(value, chronoUnit())\n  \n  // 시간 단위를 ChronoUnit으로 변환\n  private fun chronoUnit(): ChronoUnit = when (unit) {\n    TimeUnit.NANOSECONDS -> ChronoUnit.NANOS\n    TimeUnit.MICROSECONDS -> ChronoUnit.MICROS\n    TimeUnit.MILLISECONDS -> ChronoUnit.MILLIS\n    TimeUnit.SECONDS -> ChronoUnit.SECONDS\n    TimeUnit.MINUTES -> ChronoUnit.MINUTES\n    TimeUnit.HOURS -> ChronoUnit.HOURS\n    TimeUnit.DAYS -> ChronoUnit.DAYS\n    else -> throw IllegalArgumentException(\"Unsupported time unit: $unit\")\n  }\n  \n  // 비교 연산\n  fun isZero(): Boolean = value == 0L\n  \n  fun isPositive(): Boolean = value > 0\n  \n  fun isNegative(): Boolean = value < 0\n  \n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other !is Duration) return false\n    \n    // 같은 단위로 변환하여 비교\n    val thisNanos = unit.toNanos(value)\n    val otherNanos = other.unit.toNanos(other.value)\n    return thisNanos == otherNanos\n  }\n  \n  override fun hashCode(): Int {\n    val nanos = unit.toNanos(value)\n    return nanos.hashCode()\n  }\n  \n  override fun toString(): String {\n    return when (unit) {\n      TimeUnit.NANOSECONDS -> \"${value}ns\"\n      TimeUnit.MICROSECONDS -> \"${value}µs\"\n      TimeUnit.MILLISECONDS -> \"${value}ms\"\n      TimeUnit.SECONDS -> \"${value}s\"\n      TimeUnit.MINUTES -> \"${value}m\"\n      TimeUnit.HOURS -> \"${value}h\"\n      TimeUnit.DAYS -> \"${value}d\"\n      else -> \"${value} ${unit.name.lowercase()}\"\n    }\n  }\n}\n```\n\n이 클래스는 Java의 `TimeUnit`을 활용하여 다양한 시간 단위를 지원한다. 내부적으로는 가장 작은 단위(나노초)로 모든 계산을 수행하여 정확성을 보장한다.\n\n## 시간 간격(Interval)\n\n시간 간격은 시작 시점과 끝 시점으로 구성된다. 이를 모델링해보자.\n\n```kotlin\n/**\n * 시작 시점과 끝 시점 사이의 시간 간격을 표현하는 클래스\n */\nclass TimeInterval private constructor(\n  val start: TimePoint,\n  val end: TimePoint\n) {\n  init {\n    require(!end.isBefore(start)) { \"End time must not be before start time\" }\n  }\n  \n  companion object {\n    fun of(start: TimePoint, end: TimePoint): TimeInterval = TimeInterval(start, end)\n    \n    // 특정 시점으로부터 기간을 더한 간격 생성\n    fun startingAt(start: TimePoint, duration: Duration): TimeInterval =\n      of(start, start.plus(duration))\n    \n    // 특정 시점으로부터 기간을 뺀 간격 생성\n    fun endingAt(end: TimePoint, duration: Duration): TimeInterval =\n      of(end.minus(duration), end)\n  }\n  \n  // 간격의 기간 계산\n  fun duration(): Duration = start.until(end)\n  \n  // 간격 연산\n  fun shift(duration: Duration): TimeInterval =\n    of(start.plus(duration), end.plus(duration))\n  \n  fun expand(duration: Duration): TimeInterval =\n    of(start.minus(duration), end.plus(duration))\n  \n  fun shrink(duration: Duration): TimeInterval {\n    val halfDuration = duration.dividedBy(2)\n    val newStart = start.plus(halfDuration)\n    val newEnd = end.minus(halfDuration)\n    \n    // 축소 후 유효한 간격인지 확인\n    return if (newEnd.isBefore(newStart)) {\n      // 간격이 너무 작아 유효하지 않은 경우, 중간 시점으로 축소\n      val midPoint = start.plus(duration().dividedBy(2))\n      of(midPoint, midPoint)\n    } else {\n      of(newStart, newEnd)\n    }\n  }\n  \n  // 간격 관계 확인\n  fun contains(point: TimePoint): Boolean =\n    !point.isBefore(start) && !point.isAfter(end)\n  \n  fun contains(other: TimeInterval): Boolean =\n    !other.start.isBefore(start) && !other.end.isAfter(end)\n  \n  fun overlaps(other: TimeInterval): Boolean =\n    !end.isBefore(other.start) && !start.isAfter(other.end)\n  \n  fun abuts(other: TimeInterval): Boolean =\n    start.equals(other.end) || end.equals(other.start)\n  \n  // 간격 병합 및 교차\n  fun union(other: TimeInterval): TimeInterval? {\n    return if (!overlaps(other) && !abuts(other)) {\n      null // 겹치거나 인접하지 않으면 병합 불가\n    } else {\n      of(\n        if (start.isBefore(other.start)) start else other.start,\n        if (end.isAfter(other.end)) end else other.end\n      )\n    }\n  }\n  \n  fun intersection(other: TimeInterval): TimeInterval? {\n    return if (!overlaps(other)) {\n      null // 겹치지 않으면 교집합 없음\n    } else {\n      of(\n        if (start.isAfter(other.start)) start else other.start,\n        if (end.isBefore(other.end)) end else other.end\n      )\n    }\n  }\n  \n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other !is TimeInterval) return false\n    return start == other.start && end == other.end\n  }\n  \n  override fun hashCode(): Int {\n    var result = start.hashCode()\n    result = 31 * result + end.hashCode()\n    return result\n  }\n  \n  override fun toString(): String = \"[$start, $end]\"\n}\n```\n\n이 클래스는 시간 간격의 다양한 연산과 관계를 지원한다. 간격을 이동(shift), 확장(expand), 축소(shrink)할 수 있으며, 다른 간격과의 관계(포함, 겹침, 인접)를 확인할 수 있다. 또한 두 간격의 합집합(union)과 교집합(intersection)도 계산할 수 있다.\n\n## 반복(Recurrence)\n\n반복은 가장 복잡한 시간 개념 중 하나다. 다양한 패턴으로 발생하는 반복 이벤트를 표현하기 위해 강력한 모델이 필요하다.\n\n```kotlin\nimport java.time.DayOfWeek\nimport java.time.LocalTime\nimport java.time.ZoneId\nimport java.time.temporal.TemporalAdjusters\nimport java.util.*\n\n/**\n * 반복되는 시간 패턴을 표현하는 클래스\n */\nabstract class TimeRecurrence {\n  // 특정 간격 내에서 발생하는 모든 시점 계산\n  abstract fun occurrencesIn(interval: TimeInterval): List<TimePoint>\n  \n  // 특정 시점 이후의 다음 발생 시점 계산\n  abstract fun nextOccurrenceAfter(point: TimePoint): TimePoint?\n}\n\n/**\n * 매일 반복되는 패턴\n */\nclass DailyRecurrence(\n  private val timeOfDay: LocalTime,\n  private val zone: ZoneId = ZoneId.systemDefault()\n) : TimeRecurrence() {\n  \n  override fun occurrencesIn(interval: TimeInterval): List<TimePoint> {\n    val result = mutableListOf<TimePoint>()\n    var current = nextOccurrenceAfter(interval.start.minus(Duration.ofSeconds(1)))\n    \n    while (current != null && !current.isAfter(interval.end)) {\n      result.add(current)\n      current = nextOccurrenceAfter(current)\n    }\n    \n    return result\n  }\n  \n  override fun nextOccurrenceAfter(point: TimePoint): TimePoint {\n    val zonedDateTime = point.inZone(zone)\n    val today = zonedDateTime.toLocalDate()\n    val todayOccurrence = today.atTime(timeOfDay).atZone(zone).toInstant()\n    val todayPoint = TimePoint.fromEpochMilli(todayOccurrence.toEpochMilli())\n    \n    return if (point.isBefore(todayPoint)) {\n      todayPoint\n    } else {\n      val tomorrow = today.plusDays(1)\n      val tomorrowOccurrence = tomorrow.atTime(timeOfDay).atZone(zone).toInstant()\n      TimePoint.fromEpochMilli(tomorrowOccurrence.toEpochMilli())\n    }\n  }\n}\n\n/**\n * 매주 특정 요일에 반복되는 패턴\n */\nclass WeeklyRecurrence(\n  private val daysOfWeek: Set<DayOfWeek>,\n  private val timeOfDay: LocalTime,\n  private val zone: ZoneId = ZoneId.systemDefault()\n) : TimeRecurrence() {\n    \n  override fun occurrencesIn(interval: TimeInterval): List<TimePoint> {\n    val result = mutableListOf<TimePoint>()\n    var current = nextOccurrenceAfter(interval.start.minus(Duration.ofSeconds(1)))\n    \n    while (current != null && !current.isAfter(interval.end)) {\n      result.add(current)\n      current = nextOccurrenceAfter(current)\n    }\n    \n    return result\n  }\n  \n  override fun nextOccurrenceAfter(point: TimePoint): TimePoint? {\n    if (daysOfWeek.isEmpty()) return null\n    \n    val zonedDateTime = point.inZone(zone)\n    val today = zonedDateTime.toLocalDate()\n    val currentDayOfWeek = today.dayOfWeek\n    \n    // 오늘의 발생 시점 확인\n    val todayOccurrence = today.atTime(timeOfDay).atZone(zone).toInstant()\n    val todayPoint = TimePoint.fromEpochMilli(todayOccurrence.toEpochMilli())\n    \n    if (daysOfWeek.contains(currentDayOfWeek) && point.isBefore(todayPoint)) {\n      return todayPoint\n    }\n    \n    // 다음 발생 요일 찾기\n    for (i in 1..7) {\n      val nextDay = today.plusDays(i.toLong())\n      if (daysOfWeek.contains(nextDay.dayOfWeek)) {\n        val nextOccurrence = nextDay.atTime(timeOfDay).atZone(zone).toInstant()\n        return TimePoint.fromEpochMilli(nextOccurrence.toEpochMilli())\n      }\n    }\n    \n    return null // 발생하지 않는 케이스 (daysOfWeek가 비어있는 경우)\n  }\n}\n\n/**\n * 매월 특정 일에 반복되는 패턴\n */\nclass MonthlyRecurrence(\n  private val dayOfMonth: Int,\n  private val timeOfDay: LocalTime,\n  private val zone: ZoneId = ZoneId.systemDefault()\n) : TimeRecurrence() {\n    \n  init {\n    require(dayOfMonth in 1..31) { \"Day of month must be between 1 and 31\" }\n  }\n  \n  override fun occurrencesIn(interval: TimeInterval): List<TimePoint> {\n    val result = mutableListOf<TimePoint>()\n    var current = nextOccurrenceAfter(interval.start.minus(Duration.ofSeconds(1)))\n    \n    while (current != null && !current.isAfter(interval.end)) {\n      result.add(current)\n      current = nextOccurrenceAfter(current)\n    }\n    \n    return result\n  }\n  \n  override fun nextOccurrenceAfter(point: TimePoint): TimePoint {\n    val zonedDateTime = point.inZone(zone)\n    val today = zonedDateTime.toLocalDate()\n    \n    // 이번 달의 발생일 계산\n    val dayOfMonthAdjusted = Math.min(dayOfMonth, today.lengthOfMonth())\n    val thisMonth = today.withDayOfMonth(dayOfMonthAdjusted)\n    val thisMonthOccurrence = thisMonth.atTime(timeOfDay).atZone(zone).toInstant()\n    val thisMonthPoint = TimePoint.fromEpochMilli(thisMonthOccurrence.toEpochMilli())\n    \n    if (point.isBefore(thisMonthPoint)) {\n      return thisMonthPoint\n    }\n    \n    // 다음 달의 발생일 계산\n    val nextMonth = today.plusMonths(1)\n    val nextMonthDayAdjusted = Math.min(dayOfMonth, nextMonth.lengthOfMonth())\n    val nextMonthDate = nextMonth.withDayOfMonth(nextMonthDayAdjusted)\n    val nextMonthOccurrence = nextMonthDate.atTime(timeOfDay).atZone(zone).toInstant()\n    \n    return TimePoint.fromEpochMilli(nextMonthOccurrence.toEpochMilli())\n  }\n}\n```\n\n여기서는 세 가지 기본적인 반복 패턴을 구현했다: 일간 반복, 주간 반복, 월간 반복. 각 패턴은 특정 간격 내에서의 모든 발생 시점과 특정 시점 이후의 다음 발생 시점을 계산할 수 있다.\n\n# 시간 연산과 변환\n\n시간 모델링에서 가장 중요한 부분 중 하나는 다양한 연산과 변환이다. 시점, 기간, 간격, 반복 사이의 변환과 연산을 위한 유틸리티 메서드를 구현해보자.\n\n```kotlin\n/**\n * 시간 관련 유틸리티 클래스\n */\nobject TimeUtils {\n  // 시점 비교 및 확인\n  fun isLeapYear(year: Int): Boolean {\n    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n  }\n  \n  fun daysInMonth(year: Int, month: Int): Int {\n    return when (month) {\n      1, 3, 5, 7, 8, 10, 12 -> 31\n      4, 6, 9, 11 -> 30\n      2 -> if (isLeapYear(year)) 29 else 28\n      else -> throw IllegalArgumentException(\"Invalid month: $month\")\n    }\n  }\n  \n  // 기간 표시 및 변환\n  fun formatDuration(duration: Duration): String {\n    val millis = duration.to(TimeUnit.MILLISECONDS).value\n    \n    val days = TimeUnit.MILLISECONDS.toDays(millis)\n    val hours = TimeUnit.MILLISECONDS.toHours(millis) % 24\n    val minutes = TimeUnit.MILLISECONDS.toMinutes(millis) % 60\n    val seconds = TimeUnit.MILLISECONDS.toSeconds(millis) % 60\n    \n    val parts = mutableListOf<String>()\n    if (days > 0) parts.add(\"${days}d\")\n    if (hours > 0) parts.add(\"${hours}h\")\n    if (minutes > 0) parts.add(\"${minutes}m\")\n    if (seconds > 0 || parts.isEmpty()) parts.add(\"${seconds}s\")\n    \n    return parts.joinToString(\" \")\n  }\n  \n  // 시간 간격 조작\n  fun splitInterval(interval: TimeInterval, parts: Int): List<TimeInterval> {\n    require(parts > 0) { \"Number of parts must be positive\" }\n    \n    val result = mutableListOf<TimeInterval>()\n    val duration = interval.duration()\n    val partDuration = duration.dividedBy(parts.toLong())\n    \n    var current = interval.start\n    repeat(parts) {\n      val next = if (it == parts - 1) interval.end else current.plus(partDuration)\n      result.add(TimeInterval.of(current, next))\n      current = next\n    }\n    \n    return result\n  }\n  \n  // 반복 패턴 조합\n  fun combineRecurrences(recurrences: List<TimeRecurrence>): TimeRecurrence {\n    return object : TimeRecurrence() {\n      override fun occurrencesIn(interval: TimeInterval): List<TimePoint> {\n        return recurrences.flatMap { it.occurrencesIn(interval) }\n          .distinct()\n          .sortedBy { it.toEpochMilli() }\n      }\n      \n      override fun nextOccurrenceAfter(point: TimePoint): TimePoint? {\n        return recurrences.mapNotNull { it.nextOccurrenceAfter(point) }\n          .minByOrNull { it.toEpochMilli() }\n      }\n    }\n  }\n}\n```\n\n# 사용 사례\n\n실제 코드에서 이러한 시간 모델을 어떻게 활용할 수 있는지 몇 가지 예시를 살펴보자.\n\n## 이벤트 스케줄링\n\n회의나 약속과 같은 이벤트를 스케줄링하는 예시다.\n\n```kotlin\n// 회의 스케줄링\nval meetingStart = TimePoint.of(2023, 5, 10, 14, 0) // 2023년 5월 10일 오후 2시\nval meetingDuration = Duration.ofMinutes(60) // 1시간 회의\nval meetingInterval = TimeInterval.startingAt(meetingStart, meetingDuration)\n\n// 참석자의 가용 시간 확인\nval availabilityStart = TimePoint.of(2023, 5, 10, 13, 0) // 오후 1시부터\nval availabilityEnd = TimePoint.of(2023, 5, 10, 17, 0)   // 오후 5시까지\nval availabilityInterval = TimeInterval.of(availabilityStart, availabilityEnd)\n\n// 회의가 가용 시간 내에 있는지 확인\nval canAttend = availabilityInterval.contains(meetingInterval)\nprintln(\"Can attend meeting: $canAttend\") // true\n\n// 다음 정기 회의 시간 계산 (매주 월요일 오전 10시)\nval weeklyMeeting = WeeklyRecurrence(\n    setOf(DayOfWeek.MONDAY),\n    LocalTime.of(10, 0)\n)\n\nval today = TimePoint.now()\nval nextMeeting = weeklyMeeting.nextOccurrenceAfter(today)\nprintln(\"Next meeting: ${nextMeeting?.format(\"yyyy-MM-dd HH:mm\")}\")\n```\n\n## 타임라인 분석\n\n일련의 이벤트를 시간 순서로 분석하는 예시다.\n\n```kotlin\n// 여러 이벤트의 타임라인 생성\ndata class Event(val name: String, val interval: TimeInterval)\n\nval events = listOf(\n  Event(\"프로젝트 계획\", TimeInterval.of(\n    TimePoint.of(2023, 5, 1, 9, 0),\n    TimePoint.of(2023, 5, 3, 17, 0)\n  )),\n  Event(\"디자인 단계\", TimeInterval.of(\n    TimePoint.of(2023, 5, 4, 9, 0),\n    TimePoint.of(2023, 5, 10, 17, 0)\n  )),\n  Event(\"개발 단계\", TimeInterval.of(\n    TimePoint.of(2023, 5, 8, 9, 0),\n    TimePoint.of(2023, 5, 20, 17, 0)\n  )),\n  Event(\"테스트\", TimeInterval.of(\n    TimePoint.of(2023, 5, 18, 9, 0),\n    TimePoint.of(2023, 5, 25, 17, 0)\n  ))\n)\n\n// 전체 프로젝트 기간 계산\nval projectStart = events.minOf { it.interval.start }\nval projectEnd = events.maxOf { it.interval.end }\nval projectInterval = TimeInterval.of(projectStart, projectEnd)\nval projectDuration = projectInterval.duration()\n\nprintln(\"프로젝트 기간: ${projectStart.format(\"yyyy-MM-dd\")} ~ ${projectEnd.format(\"yyyy-MM-dd\")}\")\nprintln(\"총 소요 시간: ${TimeUtils.formatDuration(projectDuration)}\")\n\n// 단계 간 겹치는 부분 분석\nfor (i in 0 until events.size - 1) {\n  for (j in i + 1 until events.size) {\n    val event1 = events[i]\n    val event2 = events[j]\n    \n    if (event1.interval.overlaps(event2.interval)) {\n      val overlap = event1.interval.intersection(event2.interval)\n      println(\"'${event1.name}'과 '${event2.name}'이 겹침: ${overlap?.start?.format(\"MM-dd\")} ~ ${overlap?.end?.format(\"MM-dd\")}\")\n    }\n  }\n}\n```\n\n## 근무 시간 추적\n\n근무 시간을 추적하고 분석하는 예시다.\n\n```kotlin\n// 근무 시간 기록\ndata class WorkSession(val start: TimePoint, val end: TimePoint) {\n  val duration: Duration\n    get() = start.until(end)\n  \n  val interval: TimeInterval\n    get() = TimeInterval.of(start, end)\n}\n\n// 일주일간의 근무 기록\nval workWeek = listOf(\n  WorkSession(\n    TimePoint.of(2023, 5, 8, 9, 0),\n    TimePoint.of(2023, 5, 8, 18, 0)\n  ),\n  WorkSession(\n    TimePoint.of(2023, 5, 9, 8, 30),\n    TimePoint.of(2023, 5, 9, 17, 45)\n  ),\n  WorkSession(\n    TimePoint.of(2023, 5, 10, 9, 15),\n    TimePoint.of(2023, 5, 10, 19, 30)\n  ),\n  WorkSession(\n    TimePoint.of(2023, 5, 11, 9, 0),\n    TimePoint.of(2023, 5, 11, 18, 15)\n  ),\n  WorkSession(\n    TimePoint.of(2023, 5, 12, 9, 30),\n    TimePoint.of(2023, 5, 12, 16, 0)\n  )\n)\n\n// 총 근무 시간 계산\nval totalWorkDuration = workWeek.fold(Duration.ZERO) { acc, session ->\n  acc.plus(session.duration)\n}\n\nprintln(\"총 근무 시간: ${TimeUtils.formatDuration(totalWorkDuration)}\")\n\n// 일별 근무 시간 분석\nval workByDay = workWeek.groupBy { \n  it.start.format(\"yyyy-MM-dd\") \n}.mapValues { (_, sessions) ->\n  sessions.fold(Duration.ZERO) { acc, session -> acc.plus(session.duration) }\n}\n\nworkByDay.forEach { (day, duration) ->\n  println(\"$day: ${TimeUtils.formatDuration(duration)}\")\n}\n\n// 초과 근무 시간 계산 (하루 8시간 기준)\nval standardWorkDay = Duration.ofHours(8)\nval overtime = workByDay.map { (day, duration) ->\n  val daily = duration.to(TimeUnit.HOURS).value\n  val over = Math.max(0, daily - 8)\n  day to Duration.ofHours(over)\n}.filter { (_, overtime) -> !overtime.isZero() }\n\novertime.forEach { (day, duration) ->\n  println(\"$day 초과근무: ${TimeUtils.formatDuration(duration)}\")\n}\n```\n\n# 마치며\n\n이 글에서는 시간이라는 복잡한 개념을 프로그래밍적으로 어떻게 모델링할 수 있는지 살펴보았다. 시간은 단순한 물리적 측도를 넘어서 다양한 관점(시점, 기간, 간격, 반복)으로 이해할 수 있으며, 각 관점에 맞는 모델링 접근법이 필요하다.\n\n시간 모델링에서 가장 중요한 점은 시간의 다양한 특성을 정확하게 반영하는 것이다. 단위 변환이 복잡하고, 타임존이 존재하며, 다양한 캘린더 시스템이 사용된다는 점을 고려해야 한다. 또한 시간은 연속적인 특성을 가지기 때문에 정밀도에 대한 고려도 필요하다.\n\n모델 설계에서는 각 개념을 명확히 분리하면서도 상호 작용을 자연스럽게 지원하는 것이 중요하다. `TimePoint`, `Duration`, `TimeInterval`, `TimeRecurrence`와 같은 핵심 클래스는 각각의 책임을 명확히 하면서도, 서로 변환되고 결합될 수 있어야 한다.\n\n이러한 시간 모델링은 일정 관리, 예약 시스템, 캘린더 시스템 등 다양한 비즈니스 도메인에서 활용될 수 있다. 특히 전자상거래, 물류, 금융과 같이 시간이 중요한 요소인 도메인에서는 정교한 시간 모델이 필수적이다.\n\n[^1]: 참고로 한국 표준 시간은 KST라고 부른다\n[^2]: UTC, GMT, Zulu time 모두 같은 시간대를 나타낸다","tableOfContents":{"items":[{"url":"#들어가며","title":"들어가며"},{"url":"#시간이란-무엇인가","title":"시간이란 무엇인가?"},{"url":"#측도와-무엇이-다른가","title":"측도와 무엇이 다른가?"},{"url":"#시간을-어떤-기준으로-사용해야-하는가","title":"시간을 어떤 기준으로 사용해야 하는가?","items":[{"url":"#순수한-시간","title":"순수한 시간"},{"url":"#utc","title":"UTC"},{"url":"#time-zone이-적용된-시간","title":"Time Zone이 적용된 시간"}]},{"url":"#시간을-어떻게-모델링할-것인가","title":"시간을 어떻게 모델링할 것인가?","items":[{"url":"#시점point-in-time","title":"시점(Point in Time)"},{"url":"#기간duration","title":"기간(Duration)"},{"url":"#시간-간격interval","title":"시간 간격(Interval)"},{"url":"#반복recurrence","title":"반복(Recurrence)"}]},{"url":"#시간-연산과-변환","title":"시간 연산과 변환"},{"url":"#사용-사례","title":"사용 사례","items":[{"url":"#이벤트-스케줄링","title":"이벤트 스케줄링"},{"url":"#타임라인-분석","title":"타임라인 분석"},{"url":"#근무-시간-추적","title":"근무 시간 추적"}]},{"url":"#마치며","title":"마치며"}]},"excerpt":"비즈니스에 있어 시간은 매우 중요한 요소다. 시간은 단순히 물리적 측정값이 아니라, 비즈니스의 흐름과 의사결정에 큰 영향을 미친다. 또한, 시간은 다양한 관점에서 해석될 수 있으며, 다양한 방법으로 사용될 수 있다. 이번 글에서는 시간을 소프트웨어…","fields":{"slug":"/posts/modeling-series-temporal","date":"2025-05-06"},"frontmatter":{"title":"모델링 시리즈: 시간","categories":"article","tags":["modeling"],"image":"/images/2025-05-06-modeling-series-temporal/thumbnail.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2021-02-23","slug":"/posts/first-post"},"frontmatter":{"title":"첫 포스트를 작성하며","image":"/images/2021-02-23-first-post/mountains.jpg"}}},{"node":{"fields":{"date":"2021-02-28","slug":"/posts/basic-web-hacking"},"frontmatter":{"title":"웹 개발을 위해 꼭 알아야하는 보안 공격","image":"/images/2021-02-28-basic-web-hacking/thumbnail.png"}}},{"node":{"fields":{"date":"2021-02-25","slug":"/posts/about-mongodb"},"frontmatter":{"title":"MongoDB 이해하기","image":"/images/2021-02-25-about-mongodb/thumbnail.png"}}},{"node":{"fields":{"date":"2021-03-20","slug":"/posts/deep-dive-into-datetime"},"frontmatter":{"title":"시간에 대해 탐구하기","image":"/images/2021-03-20-deep-dive-into-datetime/thumbnail.png"}}},{"node":{"fields":{"date":"2021-03-14","slug":"/posts/effective-atomic-design"},"frontmatter":{"title":"Effective Atomic Design","image":"/images/2021-03-14-effective-atomic-design/thumbnail.png"}}},{"node":{"fields":{"date":"2022-08-05","slug":"/posts/programmers-brain-book-report"},"frontmatter":{"title":"올바른 코드를 위한 끝없는 고찰","image":"/images/2022-08-05-programmers-brain-book-report/thumbnail.png"}}},{"node":{"fields":{"date":"2022-08-16","slug":"/posts/polymorphic-react-component"},"frontmatter":{"title":"Polymorphic한 React 컴포넌트 만들기","image":"/images/2022-08-16-polymorphic-react-component/thumbnail.png"}}},{"node":{"fields":{"date":"2022-08-31","slug":"/posts/the-nature-of-software-development-book-report"},"frontmatter":{"title":"우리 팀은 어떻게 일 해야할까?","image":"/images/2022-08-31-the-nature-of-software-development-book-report/thumbnail.png"}}},{"node":{"fields":{"date":"2022-09-08","slug":"/posts/software-master-book-report"},"frontmatter":{"title":"나는 프로답게 일했는가?","image":"/images/2022-09-08-software-master-book-report/thumbnail.png"}}},{"node":{"fields":{"date":"2022-09-18","slug":"/posts/crafting-esolang"},"frontmatter":{"title":"난해한 프로그래밍 언어 만들어보기","image":"/images/2022-09-18-crafting-esolang/thumbnail.png"}}},{"node":{"fields":{"date":"2023-05-03","slug":"/posts/spring-multi-module-architecture"},"frontmatter":{"title":"IoC와 DI를 이용한 Spring 멀티 모듈 아키텍처","image":"/images/2023-05-03-spring-multi-module-architecture/thumbnail.png"}}},{"node":{"fields":{"date":"2023-07-17","slug":"/posts/railway-oriented-programming"},"frontmatter":{"title":"Railway-Oriented Programming","image":"/images/2023-07-17-railway-oriented-programming/thumbnail.png"}}},{"node":{"fields":{"date":"2023-07-24","slug":"/posts/functional-data-structure"},"frontmatter":{"title":"함수형 자료구조","image":"/images/2023-07-24-functional-data-structure/thumbnail.png"}}},{"node":{"fields":{"date":"2023-07-10","slug":"/posts/effective-work"},"frontmatter":{"title":"갓생사는 방법론","image":"/images/2023-07-10-effective-work/thumbnail.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/developers-learning-and-growth"},"frontmatter":{"title":"개발자의 학습과 성장","image":"/images/2023-12-24-developers-learning-and-growth/thumbnail.png"}}},{"node":{"fields":{"date":"2024-01-21","slug":"/posts/type-driven-development"},"frontmatter":{"title":"Type-Driven Development","image":"/images/2024-01-21-type-driven-development/thumbnail.png"}}},{"node":{"fields":{"date":"2023-12-05","slug":"/posts/what-is-beautiful-code"},"frontmatter":{"title":"아름다운 코드에 대하여","image":"/images/2023-12-05-what-is-beautiful-code/thumbnail.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/render-delegation-react-component"},"frontmatter":{"title":"Render Delegation하는 React 컴포넌트 만들기","image":"/images/2024-02-18-render-delegation-react-component/thumbnail.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/ascii-3d-renderer"},"frontmatter":{"title":"ASCII 3D 렌더러 만들기","image":"/images/2024-03-03-ascii-3d-renderer/thumbnail.png"}}},{"node":{"fields":{"date":"2024-03-16","slug":"/posts/principles-of-debugging"},"frontmatter":{"title":"디버깅 원칙","image":"/images/2024-03-16-principles-of-debugging/thumbnail.png"}}},{"node":{"fields":{"date":"2024-05-17","slug":"/posts/warp-and-weft"},"frontmatter":{"title":"씨줄과 날줄","image":"/images/2024-05-17-warp-and-weft/thumbnail.png"}}},{"node":{"fields":{"date":"2024-05-10","slug":"/posts/the-shortcut"},"frontmatter":{"title":"기계의 반칙","image":"/images/2024-05-10-the-shortcut/thumbnail.png"}}},{"node":{"fields":{"date":"2024-07-09","slug":"/posts/best-prompt-engineering-lesson"},"frontmatter":{"title":"프롬프트 엔지니어링을 시작한다면","image":"/images/2024-07-09-best-prompt-engineering-lesson/thumbnail.png"}}},{"node":{"fields":{"date":"2024-07-29","slug":"/posts/copybook"},"frontmatter":{"title":"카피책을 카피하다","image":"/images/2024-07-29-copybook/thumbnail.png"}}},{"node":{"fields":{"date":"2024-10-12","slug":"/posts/the-aesthetics-of-destroying-software"},"frontmatter":{"title":"소프트웨어 파괴의 미학","image":"/images/2024-10-12-the-aesthetics-of-destroying-software/thumbnail.png"}}},{"node":{"fields":{"date":"2024-10-27","slug":"/posts/music-recognition-system"},"frontmatter":{"title":"음악 검색 시스템 만들기","image":"/images/2024-10-27-music-recognition-system/thumbnail.png"}}},{"node":{"fields":{"date":"2024-07-27","slug":"/posts/tidy-first"},"frontmatter":{"title":"정리부터 먼저 하라구요?","image":"/images/2024-07-27-tidy-first/thumbnail.png"}}},{"node":{"fields":{"date":"2025-02-06","slug":"/posts/data-oriented-programming"},"frontmatter":{"title":"데이터 지향 프로그래밍","image":"/images/2025-02-06-data-oriented-programming/thumbnail.png"}}},{"node":{"fields":{"date":"2025-01-19","slug":"/posts/using-kotlin-script"},"frontmatter":{"title":"Kotlin Script 활용하기","image":"/images/2025-01-19-using-kotlin-script/thumbnail.png"}}},{"node":{"fields":{"date":"2025-03-12","slug":"/posts/build-large-scale-react-web-apps"},"frontmatter":{"title":"대규모 리액트 웹 앱 개발","image":"/images/2025-03-12-build-large-scale-react-web-apps/thumbnail.png"}}},{"node":{"fields":{"date":"2025-04-09","slug":"/posts/new-kind-of-hallucination"},"frontmatter":{"title":"새로운 종류의 AI 환각","image":"/images/2025-04-09-new-kind-of-hallucination/thumbnail.png"}}},{"node":{"fields":{"date":"2025-02-19","slug":"/posts/coding-test-story"},"frontmatter":{"title":"코딩 테스트 이모저모","image":"/images/2025-02-19-coding-test-story/thumbnail.jpg"}}},{"node":{"fields":{"date":"2025-04-10","slug":"/posts/mcp-from-ux-perspective"},"frontmatter":{"title":"UX 관점에서 바라보는 MCP","image":"/images/2025-04-10-mcp-from-ux-perspective/thumbnail.jpg"}}},{"node":{"fields":{"date":"2025-04-16","slug":"/posts/modeling-series-foreword"},"frontmatter":{"title":"모델링 시리즈: 서문","image":"/images/2025-04-16-modeling-series-foreword/thumbnail.png"}}},{"node":{"fields":{"date":"2025-04-18","slug":"/posts/modeling-series-view-model"},"frontmatter":{"title":"모델링 시리즈: 뷰모델","image":"/images/2025-04-18-modeling-series-view-model/thumbnail.png"}}},{"node":{"fields":{"date":"2025-04-23","slug":"/posts/modeling-series-conditional-tree"},"frontmatter":{"title":"모델링 시리즈: 조건 트리","image":"/images/2025-04-23-modeling-series-conditional-tree/thumbnail.png"}}},{"node":{"fields":{"date":"2025-04-25","slug":"/posts/multi-paradigm-programming-book"},"frontmatter":{"title":"멀티패러다임 프로그래밍과 리스트 프로세싱","image":"/images/2025-04-25-multi-paradigm-programming-book/thumbnail.png"}}},{"node":{"fields":{"date":"2024-11-10","slug":"/posts/developers-abstraction-structural-thinking"},"frontmatter":{"title":"개발자의 추상적, 구조적 사고","image":"/images/2024-11-10-developers-abstraction-structural-thinking/thumbnail.png"}}},{"node":{"fields":{"date":"2024-04-14","slug":"/posts/encrypted-vault-system"},"frontmatter":{"title":"비밀 관리를 위한 금고 시스템 만들기","image":"/images/2024-04-14-encrypted-vault-system/thumbnail.png"}}},{"node":{"fields":{"date":"2025-04-26","slug":"/posts/how-to-build-an-agent"},"frontmatter":{"title":"AI 에이전트를 만드는 방법","image":"/images/2025-04-26-how-to-build-an-agent/thumbnail.png"}}},{"node":{"fields":{"date":"2025-05-02","slug":"/posts/modeling-series-measure"},"frontmatter":{"title":"모델링 시리즈: 측도","image":"/images/2025-05-02-modeling-series-measure/thumbnail.png"}}},{"node":{"fields":{"date":"2025-05-06","slug":"/posts/modeling-series-temporal"},"frontmatter":{"title":"모델링 시리즈: 시간","image":"/images/2025-05-06-modeling-series-temporal/thumbnail.png"}}}]}},"pageContext":{"slug":"/posts/modeling-series-temporal","series":{"title":"모델링 시리즈","items":[{"title":"모델링 시리즈: 서문","url":"/posts/modeling-series-foreword"},{"title":"모델링 시리즈: 뷰모델","url":"/posts/modeling-series-view-model"},{"title":"모델링 시리즈: 조건 트리","url":"/posts/modeling-series-conditional-tree"},{"title":"모델링 시리즈: 측도","url":"/posts/modeling-series-measure"},{"title":"모델링 시리즈: 시간","url":"/posts/modeling-series-temporal"}]},"frontmatter":{"series":"모델링 시리즈","title":"모델링 시리즈: 시간","categories":"article","tags":["modeling"],"image":"/images/2025-05-06-modeling-series-temporal/thumbnail.png","comments":true,"draft":false,"hide":false}}},"staticQueryHashes":["595849736","63159454"],"slicesMap":{}}