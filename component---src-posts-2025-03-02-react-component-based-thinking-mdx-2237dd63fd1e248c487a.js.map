{"version":3,"file":"component---src-posts-2025-03-02-react-component-based-thinking-mdx-2237dd63fd1e248c487a.js","mappings":"uQAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,kNAAmN,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sHAAuH,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,CAC3fK,GAAI,iBACHD,EAAAA,cAAoBR,EAAYK,EAAG,CACpCK,KAAM,kBACL,kBAAmB,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4EAA6E,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,CAC1LK,GAAI,aACHD,EAAAA,cAAoBR,EAAYK,EAAG,CACpCK,KAAM,cACL,cAAe,KAAMF,EAAAA,cAAoBR,EAAYI,GAAI,CAC1DK,GAAI,WACHD,EAAAA,cAAoBR,EAAYK,EAAG,CACpCK,KAAM,YACL,YAAa,KAAMF,EAAAA,cAAoBR,EAAYI,GAAI,CACxDK,GAAI,YACHD,EAAAA,cAAoBR,EAAYK,EAAG,CACpCK,KAAM,aACL,aACL,CAKA,UAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWb,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,yDC2BA,IA/Ccc,IAAgE,IAA/D,IAAEC,EAAG,QAAEC,EAAO,MAAEC,EAAK,SAAEC,EAAQ,WAAEC,GAAwBL,EACtE,MAAM,EAACM,EAAW,EAACC,IAAkBC,EAAAA,EAAAA,WAAS,GAE9C,OACEC,EAAAA,EAAAA,GAAA,eACEA,EAAAA,EAAAA,GAAA,OACER,IAAKA,EACLE,MAAOA,GAAS,OAChBO,MAAO,CAAEC,OAAQN,EAAa,UAAY,UAAWD,YACrDQ,QAASP,EAAa,IAAME,GAAe,QAAQM,IAEpDX,IAAWO,EAAAA,EAAAA,GAAA,cAAYK,wBAAyB,CAAEC,OAAQb,KAC1DI,GACCU,EAAAA,cACEP,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLO,SAAU,QACVC,IAAK,EACLC,KAAM,EACNhB,MAAO,OACPiB,OAAQ,OACRT,OAAQ,WACRU,gBAAiB,sBAEnBT,QAASA,IAAML,GAAe,KAE9BE,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLY,aAAc,EACdlB,SAAU,KACVD,MAAO,MACPc,SAAU,QACVC,IAAK,MACLC,KAAM,MACNI,UAAW,wBACXF,gBAAiB,WAGnBZ,EAAAA,EAAAA,GAAA,OAAKR,IAAKA,EAAKE,MAAM,WAGzBqB,SAASC,MAEN,C,qEC3Bb,MAAMC,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBlC,GAC/B,MAAMmC,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfjC,EACFA,EAAWmC,GAGb,IAAIA,KAAsBnC,EACnC,GACA,CAACmC,EAAmBnC,GAExB,C","sources":["webpack://kciter.so/./src/posts/2025-03-02-react-component-based-thinking.mdx","webpack://kciter.so/./src/components/Image/index.tsx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"컴포넌트는 React를 이용하여 프론트엔드 개발을 한다면 가장 중요한 개념이라 할 수 있다. 컴포넌트를 단순히 UI를 구성하는 단위라고 생각할 수 있지만, 사실 UI를 포함하여 이벤트 처리, 상태 관리, 통신 등 많은 부분을 컴포넌트가 담당한다. 아무리 분리하더라도 결국 최종적으로 컴포넌트를 통하기 때문에 좋은 제품을 만들고 싶다면 컴포넌트에 대한 이해가 필수적이다.\"), \"\\n\", React.createElement(_components.p, null, \"앞서 말한 것처럼 React의 컴포넌트는 UI 뿐만 아닌 사용자가 시스템과 상호작용하는 모든 부분을 담당한다. 이번 글에서는 React 컴포넌트를 어떻게 바라보고 어떤 것이 중요한지에 대해 알아볼 것이다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"컴포넌트를-바라보는-시각\"\n  }, React.createElement(_components.a, {\n    href: \"#컴포넌트를-바라보는-시각\"\n  }, \"컴포넌트를 바라보는 시각\")), \"\\n\", React.createElement(_components.p, null, \"React에서 컴포넌트는 UI를 구성하는 단위지만 본래 프로그래밍에서 컴포넌트라는 개념은 조합과 재사용이 가능한 객체를 의미한다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"컴포넌트-분해하기\"\n  }, React.createElement(_components.a, {\n    href: \"#컴포넌트-분해하기\"\n  }, \"컴포넌트 분해하기\")), \"\\n\", React.createElement(_components.h1, {\n    id: \"컴포넌트-평가\"\n  }, React.createElement(_components.a, {\n    href: \"#컴포넌트-평가\"\n  }, \"컴포넌트 평가\")), \"\\n\", React.createElement(_components.h1, {\n    id: \"컴포넌트와-성능\"\n  }, React.createElement(_components.a, {\n    href: \"#컴포넌트와-성능\"\n  }, \"컴포넌트와 성능\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","a","_provideComponents","components","React","id","href","wrapper","MDXLayout","_ref","src","caption","width","maxWidth","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","dangerouslySetInnerHTML","__html","ReactDOM","position","top","left","height","backgroundColor","borderRadius","transform","document","body","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}