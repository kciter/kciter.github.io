{"version":3,"file":"component---src-posts-2024-07-27-tidy-first-mdx-1a9003e7c2d3f0c156f9.js","mappings":"yNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,OAAQ,SACRC,EAAG,MACFC,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,WAAYK,EAAAA,cAAoBR,EAAYI,OAAQ,KAAM,SAAU,gHAAiHI,EAAAA,cAAoBR,EAAYK,EAAG,CAChTI,KAAM,2CACNC,IAAK,gCACJ,cAAe,KAAMF,EAAAA,cAAoBR,EAAYK,EAAG,CACzDI,KAAM,4CACNC,IAAK,gCACJ,aAAc,0DAA2D,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2EAA4EK,EAAAA,cAAoBR,EAAYI,OAAQ,KAAM,gBAAiB,uGAAwG,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wJAC/Z,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWb,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECOA,MAAMc,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBR,GAC/B,MAAMS,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfP,EACFA,EAAWS,GAGb,IAAIA,KAAsBT,EACnC,GACA,CAACS,EAAmBT,GAExB,C","sources":["webpack://kciter.so/./src/posts/2024-07-27-tidy-first.mdx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"이 책은... \", React.createElement(_components.strong, null, \"매우 얇다\"), \". 그것이 장점이자 단점이다. 장점은 빠르게 읽을 수 있다는 것이고, 단점은 내용이 얕다는 것이다. 이 책을 집필한 켄트 백은 의심할 여지 없이 소프트웨어 업계에선 유명한 인물이다. 그의 저서인 \", React.createElement(_components.a, {\n    href: \"https://m.yes24.com/Goods/Detail/2126201\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"익스트림 프로그래밍\"), \"과 \", React.createElement(_components.a, {\n    href: \"https://m.yes24.com/Goods/Detail/12246033\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"테스트 주도 개발\"), \"은 많은 개발자들에게 영감을 주었고, 이 책도 그와 비슷한 영감을 주지 않을까 기대하면서 읽었다.\"), \"\\n\", React.createElement(_components.p, null, \"켄트 백은 **'괴짜들이 세상에서 안전하다고 느끼도록 돕는 일'**이 자신의 개인적인 사명이라 한다. 그렇기 때문인지 이 책에선 \", React.createElement(_components.strong, null, \"안전하게 코딩하는 방법\"), \"에 대해 다루고 그것을 Tidy First, 정리를 먼저하는 것으로 가능하다고 주장한다. 정리를 하는 것이 안전한 코딩을 할 수 있는 방법이라는 주장이 책 전반에 걸쳐 반복된다.\"), \"\\n\", React.createElement(_components.p, null, \"책의 내용은 총 세 개 파트로 나뉘는데, 첫 파트는 코드 레벨에서 안전하게 코딩하는 방법을 다루고 있다. 유명한 Gaurd Clause 패턴이나 주석에 대한 자신의 견해, 여러 리팩토링 기법을 설명하며 나중에 하는 것이 아닌 먼저 이렇게 코드를 정리하라고 주장한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","a","_provideComponents","components","React","href","rel","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}