{"version":3,"file":"4970037a47c0e9f346df4178bc1d31c0be30564e-3db919b64b0feb6b385c.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2025-04-25-multi-paradigm-programming-book.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"우리는 함수형, 객체지향, 명령형 패러다임을 제공하는 멀티패러다임 언어를 효율적으로 활용하는 법을 배워야 한다. - 마이크 루키데스\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"좋은 계기로 마플코퍼레이션 CTO 유인동님이 집필하신 \", React.createElement(_components.a, {\n    href: \"https://product.kyobobook.co.kr/detail/S000216318962\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"멀티패러다임 프로그래밍\"), \"을 먼저 읽어보고 추천사까지 남길 수 있었습니다. 좋은 책에 추천사까지 남길 수 있어 영광이라 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"이번 글에서는 이 책을 읽고 간단한 요약과 제 개인적인 소감도 남겨보려 합니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"멀티패러다임-프로그래밍은-왜-등장했는가\"\n  }, React.createElement(_components.a, {\n    href: \"#멀티패러다임-프로그래밍은-왜-등장했는가\"\n  }, \"멀티패러다임 프로그래밍은 왜 등장했는가?\")), \"\\n\", React.createElement(_components.p, null, \"개발자는 소프트웨어로 문제를 해결하는 사람입니다. 그리고 비즈니스 관점에선 소프트웨어를 통해 가치를 창출하는 사람입니다. 사실, 오늘날의 소프트웨어는 과도한 경쟁으로 인해 빠른 생산성이 없다면 금방 다른 소프트웨어에 대체될 수 있습니다. 그렇기에 소프트웨어는 비즈니스 관점에서 생산성을 높이는 것이 중요합니다.\"), \"\\n\", React.createElement(_components.p, null, \"생산성이 중요해지며 DX(개발자 경험)라는 관점이 부각되기 시작했습니다. 더이상 철학만을 따질 수 없는 상황이 되었고 좋은건 빠르게 도입해야 하는 시대가 온 것입니다. 멀티패러다임은 그런 관점에서 탄생했다고 생각합니다. 가장 많이 언급되는 패러다임인 객체지향과 함수형은 각각 장단점이 존재합니다. 객체지향의 모델링⋅캡슐화⋅메시지, 함수형의 불변성⋅순수성은 대표적인 장점입니다.\"), \"\\n\", React.createElement(_components.p, null, \"멀티패러다임 프로그래밍은 각 패러다임의 장점만을 사용할 수 있게 해줍니다. 예를 들면, 데이터를 모델링하거나 관련한 것을 모아 캡슐화 할 때는 객체지향 관점, 로직의 안정성을 위해 순수 함수, 불변 데이터를 사용할 때는 함수형을 사용하는 방식으로 멀티패러다임 프로그래밍을 할 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"즉, 정리하자면 멀티패러다임 프로그래밍은 생산성이 중요한 시대의 요구에 따라 등장했다고 생각합니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"멀티패러다임의-본질\"\n  }, React.createElement(_components.a, {\n    href: \"#멀티패러다임의-본질\"\n  }, \"멀티패러다임의 본질\")), \"\\n\", React.createElement(_components.p, null, \"사실 프로그래밍 패러다임이라는 것은 매우 모호합니다. 큰 틀은 있지만 명확한 규칙은 없습니다. 예를 들어, 객체지향 프로그래밍은 캡슐화 관점으로 보느냐, 메시징 관점으로 보느냐에 따라 다르게 해석될 수 있습니다. 개인적으로는 멀티패러다임도 여러 해석이 존재할 수 있다고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"패러다임의 철학을 중요하게 생각하지 않는다면 단순히 일급 함수가 존재하며 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">filter</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">reduce</code>\"\n    }\n  }), \"을 사용할 수 있다면 함수형 프로그래밍이라 여길 수도 있습니다. 거기에 클래스를 한 스푼 끼얹으면 멀티패러다임 프로그래밍의 완성이라 생각할 수도 있습니다. 물론 이렇게 말하면 많은 분들께 혼나겠죠.\"), \"\\n\", React.createElement(_components.p, null, \"제가 말하고 싶었던 것은 결국 여러 해석이 존재한다는 것입니다. 그리고 그 해석은 각자 중요하게 여기는 것이 무엇이냐에 따라 다릅니다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어, 이 글을 통해 리뷰 중인 '멀티패러다임 프로그래밍'은 객체지향, 함수형, 명령형 패러다임의 교차점에 대해 주목합니다. 조금 더 구체적으로 \", React.createElement(_components.a, {\n    href: \"https://refactoring.guru/ko/design-patterns/iterator\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"반복자 패턴\"), \"과 일급 함수, 제너레이터의 조합을 통해 좀 더 효과적인 리스트 프로세싱을 할 수 있습니다. 그래서 이러한 방법은 리스트 프로세싱의 특징인 안정성과 가독성을 더욱 잘 살린 멀티패러다임 프로그래밍이라고 할 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"반면, 최근에 읽었던 \", React.createElement(_components.a, {\n    href: \"https://kciter.so/posts/data-oriented-programming/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"데이터 지향 프로그래밍\"), \"에서는 데이터와 코드를 분리하면서 시작합니다. 이 과정에서 데이터 파이프라인을 구성하여 각 단계마다 검증하는 방식으로 안정성을 보장합니다. 제가 느낀점으로, 각 단계에 대한 절차를 만든다는 점에서 프로시저적 프로그래밍 사고가 포함되고 불변으로 처리한다는 관점에서 함수형 프로그래밍 사고가 포함된다고 생각합니다. 따라서 이 방법은 절차에는 제약을, 데이터에는 자유를 준 멀티패러다임 프로그래밍이라 할 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"재밌게도 이 두 책은 모두 생산성을 강조합니다. 결국 실용을 추구하며 각자의 방식으로 생산성을 올리는 것, 그것이 멀티패러다임의 본질이라 생각합니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"리스트-프로세싱\"\n  }, React.createElement(_components.a, {\n    href: \"#리스트-프로세싱\"\n  }, \"리스트 프로세싱\")), \"\\n\", React.createElement(_components.p, null, \"저는 아직도 패러다임엔 우열이 없다고 생각합니다. 사람들이 좋아하지 않는 언어에도 아름다움은 존재하며 언어와 그 언어의 철학적인 맛이 존재합니다. 개발을 사랑하는 사람으로서 그 맛을 느끼는 것은 행복한 일입니다. 그리고 이번 책을 읽으면서 새로운 행복을 얻을 수 있었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"이번에 느낄 수 있는 맛은 바로 리스트 프로세싱입니다. 리스트 프로세싱은 제가 주구장창 주장하는 \", React.createElement(_components.a, {\n    href: \"https://kciter.so/posts/what-is-beautiful-code/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"좋은 코드\"), \"를 생산할 수 있는 방법입니다. 다음 코드를 살펴봅시다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// JavaScript</span>\\n<span class=\\\"token keyword\\\">const</span> numbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> x\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">acc<span class=\\\"token punctuation\\\">,</span> x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 주어진 숫자 중 짝수만 필터링하고 제곱을 한 후 모두 더하는 코드입니다. 만약 함수만을 이용해서 로직을 처리하고 싶다면 위와 같이 작성할 수 있습니다. 하지만 이 코드는 가독성이 떨어집니다. 그래서 별도로 다음과 같이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pipe</code>\"\n    }\n  }), \"와 같은 함수를 만들어 가독성을 높일 수 있습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// JavaScript</span>\\n<span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">acc<span class=\\\"token punctuation\\\">,</span> x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"파이프 함수는 커링 함수를 받아 값을 연쇄적으로 처리하는 방식입니다. 이런 방식을 통해 가독성을 더 좋게 만들 수 있습니다. 이러한 파이프 함수 유용하므로 특정 언어에선 별도 연산자로 제공할 때도 있습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"elixir\\\"><pre class=\\\"language-elixir\\\"><code class=\\\"language-elixir\\\"><span class=\\\"token comment\\\"># Elixir</span>\\n<span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">..</span><span class=\\\"token number\\\">5</span>\\n<span class=\\\"token operator\\\">|></span> <span class=\\\"token module class-name\\\">Enum</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fn</span> x <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">|></span> <span class=\\\"token module class-name\\\">Enum</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fn</span> x <span class=\\\"token operator\\\">-></span> x <span class=\\\"token operator\\\">*</span> x <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">|></span> <span class=\\\"token module class-name\\\">Enum</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">fn</span> acc<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">-></span> acc <span class=\\\"token operator\\\">+</span> x <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"다만, 커링을 사용해야 한다는 점과 자동 완성 측면에서 불리한 점이 있습니다. 따라서 요즘 언어는 객체를 통한 메서드 체인을 통해 리스트 프로세싱을 지원합니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// JavaScript</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">acc<span class=\\\"token punctuation\\\">,</span> x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 20</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"요즘은 대부분의 언어가 이러한 방식을 지원합니다. 많은 개발자들에게 친근하고 자동 완성이 잘되므로 사용하기 쉬운 방법입니다. 이 방식은 객체와 함수의 순수성을 이용하므로 멀티패러다임 프로그래밍의 장점을 잘 살린 방법입니다. (물론 고차 함수의 순수성은 개발자가 보장해야 합니다)\"), \"\\n\", React.createElement(_components.p, null, \"가독성과 생산성 측면에서 함수의 추상화 레벨을 조정하여 선언적으로 만드는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 표현식을 선언적으로 만든다면</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isEven</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">square</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">a<span class=\\\"token punctuation\\\">,</span> b</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>isEven<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 20</span>\\n\\n<span class=\\\"token comment\\\">// 함수 자체를 선언적으로 만든다면</span>\\n<span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">filterEven</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sumOfSquares</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">acc<span class=\\\"token punctuation\\\">,</span> x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> acc <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filterEven</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sumOfSquares</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 20</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"그러나 이렇게 매 함수마다 리스트를 처리하면 성능 이슈가 있을 수 있습니다. 따라서 지연 평가를 사용하여 최적화를 할 수 있습니다. 예를 들어, 책에서 소개하는 \", React.createElement(_components.a, {\n    href: \"https://fxts.dev\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"FxTS\"), \"를 사용하면 손쉽게 지연 평가를 리스트 프로세싱에 적용할 수 있습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// JavaScript</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// [2, 4, 6, ..., 100]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [4, 16, 36, ..., 10000]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">take</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [4, 16]</span>\\n\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fx</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [2, 4]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [4, 16]</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">take</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [4, 16]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이처럼 리스트 프로세싱은 가독성을 높이면서도 생산성을 높일 수 있는 방법입니다. 그리고 이 책은 멀티패러다임 관점에서 그 방법을 잘 설명하고 있습니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"객체를-리스트-프로세싱-할-수는-없을까\"\n  }, React.createElement(_components.a, {\n    href: \"#객체를-리스트-프로세싱-할-수는-없을까\"\n  }, \"객체를 리스트 프로세싱 할 수는 없을까?\")), \"\\n\", React.createElement(_components.p, null, \"책에 제시된 개념은 아니지만 조금 색다른 관점으로 보면 \", React.createElement(_components.a, {\n    href: \"https://www.yegor256.com/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Yegor Bugayenko\"), \"라는 개발자는 순수 객체지향에서 리스트 프로세싱을 흉내내기위한 \", React.createElement(_components.a, {\n    href: \"https://www.yegor256.com/2015/02/26/composable-decorators.html\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Composable Decorator\"), \"라는 개념을 제시하기도 했습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token comment\\\">// Java</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Reduced</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> acc <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Mapped</span><span class=\\\"token punctuation\\\">(</span>\\n    x <span class=\\\"token operator\\\">-></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Filtered</span><span class=\\\"token punctuation\\\">(</span>\\n      x <span class=\\\"token operator\\\">-></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IterableOf</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"해당 방식은 각 기능에 대한 불변 객체를 만들어 조합하는 방식입니다. 객체기 때문에 스스로 상태를 가지고 있을 수 있고, 불변을 보장하도록 만들어 안전하게 사용하는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"다만, 오른쪽 아래에서 위로 올라가는 방향으로 읽기 때문에 가독성엔 좋지 않아보입니다. 이런 문제로 비판점도 있습니다만, 그래도 새로운 방식을 제시했다는 점에서 의미가 있다고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"언어의 한계가 있기 때문에 Composable Decorator를 선형적으로 만드는건 어렵습니다. 그래도 흉내낸다면 다음과 같이 작성은 할 수 있습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token comment\\\">// Java</span>\\n<span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Pipe</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IterableOf</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Filtered</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">-></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Mapped</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">-></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Reduced</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> acc <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 20</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 잘 만들면 실제로 동작하게 만들 수는 있습니다. 다만 타입 이슈가 있어 범용성이 떨어집니다. 따라서 다음과 같이 구현할 수도 있습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">Pipe</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Void</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">></span></span> pipe <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Pipe</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IterableOf</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Filtered</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">-></span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Mapped</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">-></span> x<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Mapped</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">-></span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Reduced</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> acc <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\">Integer</span> result <span class=\\\"token operator\\\">=</span> pipe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"그렇지만 이러면 메서드 체인과 뭐가 다른가.. 싶기도 합니다. 그래도 객체 자체가 동작이 되고 이러한 객체를 리스트 프로세싱한다는 점에서 또 다른 방식의 객체지향과 함수형의 조합이 아닐까 생각합니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"멀티패러다임 프로그래밍은 유연합니다. 리스트 프로세싱은 선언적, 선형적, 신뢰적인 코드를 만들기 좋은 방법이지만 필수적으로 사용해야 하는 것은 아닙니다. 상태가 필요하다면 불변성을 과감히 깨는 것도 좋습니다.\"), \"\\n\", React.createElement(_components.p, null, \"자신의 팀에 맞는 방법을 찾아보세요. 그리고 그 방법이 효율적인 멀티패러다임 프로그래밍이라면 더욱 좋겠죠.\"), \"\\n\", React.createElement(_components.p, null, \"마지막으로 멀티패러다임 프로그래밍의 모든 저자 수익은 서울아산병원 어린이병원에 기부됩니다. 좋은 내용과 의도를 가진 책이니 한 번 읽어보시길 추천드립니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-25-multi-paradigm-programming-book/donate.png\",\n    maxWidth: \"440px\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  console.log(isExpanded);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              zIndex: 1000\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <img\n              src={src}\n              width=\"100%\"\n              style={{\n                display: 'block',\n                borderRadius: 8,\n                width: 'auto',\n                height: 'auto',\n                maxWidth: 1440,\n                maxHeight: '80vh',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            />\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","a","h1","span","_provideComponents","components","React","href","rel","id","dangerouslySetInnerHTML","__html","Image","src","maxWidth","wrapper","MDXLayout","_ref","caption","width","expandable","isExpanded","toggleExpanded","useState","console","log","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","zIndex","display","borderRadius","maxHeight","transform","document","body"],"sourceRoot":""}