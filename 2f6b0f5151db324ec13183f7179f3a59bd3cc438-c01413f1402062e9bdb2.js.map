{"version":3,"file":"2f6b0f5151db324ec13183f7179f3a59bd3cc438-c01413f1402062e9bdb2.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2024-01-21-type-driven-development.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\",\n    h1: \"h1\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    sup: \"sup\",\n    section: \"section\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"타입은 개발자에게 친숙하면서도 어색할 수 있는 개념이다. 특히 정적 타입 언어를 사용한다면 타입은 땔래야 땔 수 없는 존재다. 타입은 가끔씩 귀찮게 굴 때도 있지만 개발자에게 \", React.createElement(_components.strong, null, \"막강한 무기\"), \"가 될 수 있다. \", React.createElement(_components.strong, null, \"타입은 함수와 데이터가 준수해야 하는 엄격한 계약\"), \"이며 타입 시스템은 이를 어길 수 없게 만든다.\"), \"\\n\", React.createElement(_components.p, null, \"개발자는 타입 시스템 잘 활용하여 더 안정적인 프로그램을 만들거나 코드 중복을 제거하는 것이 가능하다. 반대로 개발자가 타입을 풍부하게 사용하지 않는다면 타입 시스템을 통해 얻을 수 있는 이점을 제대로 누릴 수 없다. 이 글에서 소개하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">타입 주도 개발</code>\"\n    }\n  }), \"은 타입 시스템에 대해 공부하기 좋은 방법론이며 이를 통해 로직에 대한 새로운 관점을 익힐 수 있다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"타입에-대한-재인식\"\n  }, React.createElement(_components.a, {\n    href: \"#타입에-대한-재인식\"\n  }, \"타입에 대한 재인식\")), \"\\n\", React.createElement(_components.p, null, \"타입에 대해 깊게 생각해본 적이 없다면 단순히 언어에서 제공되는 원시 타입이나 정의된 클래스만을 생각할 수 있다. 하지만 타입 시스템을 잘 활용하면 좀 더 풍부한 타입을 정의할 수 있다. 앞서 말했듯이 이를 통해 코드의 안정성을 높이거나 코드 중복을 제거할 수 있다. 타입을 잘 활용하는 방법과 타입 주도 개발에 대해 알아보기 전에 타입이 무엇인지 다시 알아보도록하자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입은-집합이다\"\n  }, React.createElement(_components.a, {\n    href: \"#타입은-집합이다\"\n  }, \"타입은 집합이다\")), \"\\n\", React.createElement(_components.p, null, \"타입은 어떠한 값이 속할 수 있는 집합이며, 이 집합에 속하는 값은 타입을 준수한다고 말한다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입은 정수를 포함하는 집합이며, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입은 문자열을 포함하는 집합이다. 예를 들어 표현하면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">Int <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2147483648</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2147483647</span> <span class=\\\"token punctuation\\\">}</span>\\nBoolean <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span>\\nString <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"a\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"b\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"c\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"중요한 것은 타입은 무한하지 않고 제한적이라는 것이다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-2147483648</code>\"\n    }\n  }), \"부터 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">2147483647</code>\"\n    }\n  }), \"까지의 정수만 포함한다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입이라는 집합에 속하는 값은 이 범위를 벗어날 수 없다는 것을 의미한다. 따라서 이제 인식을 바꿔 \", React.createElement(_components.strong, null, \"타입은 범위를 제한한 집합\"), \"이라고 생각해보자. 이는 개발자에게 있어 타입이라는 개념을 더욱 풍부하게 만들어준다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입의-변환\"\n  }, React.createElement(_components.a, {\n    href: \"#타입의-변환\"\n  }, \"타입의 변환\")), \"\\n\", React.createElement(_components.p, null, \"타입에 속한 값은 변형을 통해 다른 타입으로 변환될 수 있다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 대부분의 언어에서 제공하는 변환 함수를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입으로 변환될 수 있다. 혹은 같은 계열인 타입으로 변환하는 것도 가능하다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 더 큰 범위인 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입으로 변환될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"중요한 것은 변환을 할 때 \", React.createElement(_components.strong, null, \"함수를 거친다\"), \"는 것이다. 수학적으로 함수는 정의역에 해당하는 값을 치역으로 변환하는 것이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/function-process.png\",\n    caption: \"수학 책에서 볼 수 있던 도식\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"이를 프로그래밍 언어의 함수에 대응하면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">          ↓ 정의역  ↓ 치역<span class=\\\"token punctuation\\\">(</span>공역<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span> \\n  x<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"즉, 함수의 파라메터는 정의역에 해당하며, 반환값은 치역에 해당한다. 이 개념을 조금 더 확장하면 함수를 크게 세 가지로 나눌 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"단사 함수 (Injective Function)\"), \"\\n\", React.createElement(_components.li, null, \"전사 함수 (Surjective Function)\"), \"\\n\", React.createElement(_components.li, null, \"전단사 함수 (Bijective Function)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"단사 함수는 변환된 값의 집합이 공역과 치역이 일치하지 않는 경우를 말한다. 이를 조금 더 단순하게 표현하면 \", React.createElement(_components.strong, null, \"범위가 작은 타입에서 큰 타입으로 변환하는 것\"), \"을 말한다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입으로 변환될 수 있다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입의 값으로 변환될 때 값의 손실이 없기 때문이다. 하지만 반대는 문제가 생길 수 있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/injective-function.png\",\n    caption: \"단사 함수\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"간단한 코드 예시를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">enum</span> Event <span class=\\\"token punctuation\\\">{</span>\\n  BIRTH_DAY<span class=\\\"token punctuation\\\">,</span>\\n  AWESOME_DAY<span class=\\\"token punctuation\\\">,</span>\\n  BEAUTIFUL_DAY\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getEventId</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>BIRTH_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">1</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>AWESOME_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">2</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">3</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입으로 변환하는 함수이다. 이 함수는 단사 함수라서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값으로 변환될 때 값의 손실이 없다. 하지만 반대로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입의 값으로 변환될 때 값의 손실이 발생한다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">4</code>\"\n    }\n  }), \"라는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입으로 변환될 수 없다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">2</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">3</code>\"\n    }\n  }), \"만 포함하기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"반대로 전사 함수는 변환된 값의 집합이 공역과 치역이 일치하는 경우를 말한다. 이는 \", React.createElement(_components.strong, null, \"범위가 큰 타입에서 작은 타입으로 변환하는 것\"), \"을 말한다. 앞서 들었던 예의 반대로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입의 값을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입으로 변환할 수는 있지만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 범위를 벗어날 수 있기 때문에 이에 대한 처리가 필요하다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/surjective-function.png\",\n    caption: \"전사 함수\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 작성한 코드의 반대를 작성해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getEvent</span><span class=\\\"token punctuation\\\">(</span>eventId<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Event <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>eventId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BIRTH_DAY\\n    <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>AWESOME_DAY\\n    <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eventId</code>\"\n    }\n  }), \"를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \"를 생성할 수 있지만 범위를 벗어나는 경우가 생기기 때문에 이에 대한 예외 처리를 추가해줬다.\"), \"\\n\", React.createElement(_components.p, null, \"마지막으로 전단사 함수는 두 집합 사이를 중복 없이 일대일로 대응시키는 함수를 말한다. 항등 함수가 대표적이다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 1</span>\\n<span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">126</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 126</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 같은 함수가 불필요하게 보일 수 있지만 항등 함수는 0과 1이 필요한 것처럼 고차 함수를 사용할 때 유용하게 사용할 수 있다. 예를 들어, 변환 함수를 인자로 받는 고차 함수를 작성한다고 가정해보자. 이때 만약 변환이 필요없다면 항등 함수를 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> T <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token punctuation\\\">,</span> R<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">::</span>identity<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [1, 2, 3]</span>\\n<span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [2, 4, 6]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 봤을 때 단순히 변환 함수를 사용하지 않고 바로 반환하면 된다고 생각할 수 있다. 일반적으론 그렇지만 함수형으로 코드를 작성한다면 분기 로직을 작성하기 애매하거나 가독성 등을 위해 항등 함수를 사용하는 경우가 있을 수 있다. 예를 들어, 조건에 따라 값을 다르게 변형해야 하는 경우가 있고 조건 중 하나가 변환을 하지 않아도 되는 경우가 있다. 이때 항등 함수를 사용하면 이를 깔끔하게 처리할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 상품 상태를 나타내는 enum class</span>\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> ProductStatus <span class=\\\"token punctuation\\\">{</span>\\n  OnSale<span class=\\\"token punctuation\\\">,</span> Regular\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 상품 데이터 클래스</span>\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> \\n  <span class=\\\"token keyword\\\">val</span> price<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">,</span> \\n  <span class=\\\"token keyword\\\">val</span> status<span class=\\\"token operator\\\">:</span> ProductStatus\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 항등 함수 정의</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> T <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token comment\\\">// 가격에 할인을 적용하는 함수</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">applyDiscount</span><span class=\\\"token punctuation\\\">(</span>price<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">,</span> discount<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Double <span class=\\\"token operator\\\">=</span> \\n  price <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">-</span> discount<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 상품의 상태에 따라 가격을 변환하는 로직</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">transformProductPrice</span><span class=\\\"token punctuation\\\">(</span>product<span class=\\\"token operator\\\">:</span> Product<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Double <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 패턴 매칭을 통해 변환기를 선택</span>\\n  <span class=\\\"token keyword\\\">val</span> transformer<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>Double<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Double <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>product<span class=\\\"token punctuation\\\">.</span>status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ProductStatus<span class=\\\"token punctuation\\\">.</span>OnSale <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span> price <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">applyDiscount</span><span class=\\\"token punctuation\\\">(</span>price<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.4</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n    ProductStatus<span class=\\\"token punctuation\\\">.</span>Regular <span class=\\\"token operator\\\">-></span> <span class=\\\"token operator\\\">::</span>identity\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 선택된 변환기를 사용하여 가격을 변환</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">transformer</span><span class=\\\"token punctuation\\\">(</span>product<span class=\\\"token punctuation\\\">.</span>price<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> onSaleProduct <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Laptop\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000.0</span><span class=\\\"token punctuation\\\">,</span> ProductStatus<span class=\\\"token punctuation\\\">.</span>OnSale<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> regularProduct <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Phone\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">800.0</span><span class=\\\"token punctuation\\\">,</span> ProductStatus<span class=\\\"token punctuation\\\">.</span>Regular<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">transformProductPrice</span><span class=\\\"token punctuation\\\">(</span>onSaleProduct<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 600.0</span>\\n<span class=\\\"token function\\\">transformProductPrice</span><span class=\\\"token punctuation\\\">(</span>regularProduct<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 800.0</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입을-통한-추상화\"\n  }, React.createElement(_components.a, {\n    href: \"#타입을-통한-추상화\"\n  }, \"타입을 통한 추상화\")), \"\\n\", React.createElement(_components.p, null, \"앞서 단사 함수와 전사 함수 이야기를 한 것은 \", React.createElement(_components.strong, null, \"타입을 통해 집합이 바뀌고 범위가 바뀔 수 있다는 것\"), \"을 말하고 싶었기 때문이다. 개발자는 목적 달성을 위해 함수를 통해 값을 변형하거나 필터링하거나 좁히거나 늘릴 수 있다. 이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, \", React.createElement(_components.strong, null, \"타입을 통해 로직을 추상화 하는 것이 가능하다\"), \"라는 뜻이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/logic.png\",\n    caption: \"로직은 입출력의 연속\",\n    width: \"100%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"프로그램을 개발할 때 어떤 패러다임과 방법론을 사용하더라도 로직이 최종적으로 입력, 처리, 출력을 거친다는 것은 변하지 않는다. 타입을 통해 로직을 추상화 한다는 것은 \", React.createElement(_components.strong, null, \"입력과 출력을 타입으로 나타내고 이를 통해 로직을 설계\"), \"한다는 것과 같다. 이는 뒤에서 조금 더 자세히 설명할 타입 주도 개발의 핵심이라 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"아주 간단한 예시를 들어보자. 만약 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">리스트 안에 있는 모든 숫자를 더하는 함수</code>\"\n    }\n  }), \"를 작성한다고 가정해보자. 그렇다면 다음과 같이 표현할 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"입력: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;Int></code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"출력: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이를 함수로 표현하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;Int> -> Int</code>\"\n    }\n  }), \"와 같이 표현할 수 있다. 이를 통해 로직을 처리하는 함수의 입력과 출력을 타입으로 나타내고 이를 통해 로직을 구현하는 것이 가능하다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// TODO: List&lt;Int>를 목적에 맞게 처리하여 Int로 가공해야 한다.</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"가독성과-런타임-안정성-챙기기\"\n  }, React.createElement(_components.a, {\n    href: \"#가독성과-런타임-안정성-챙기기\"\n  }, \"가독성과 런타임 안정성 챙기기\")), \"\\n\", React.createElement(_components.p, null, \"주요 목적은 아니지만 타입을 이용하면 가독성을 챙기는 것도 가능하다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> String\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Int\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> String\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스를 정의한 코드이다. 이 코드는 문제가 없어 보이지만 이후에 문제가 생길 수 있다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스가 가지고 있는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">age</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">email</code>\"\n    }\n  }), \" 속성은 각각 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입을 가지고 있다. 따라서 정수와 문자열을 할당할 수 있지만 할당된 값이 정말로 나이와 이메일인지는 알 수 없다. 이는 타입 시스템이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 없기 때문이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/types-are-a-lie.png\",\n    caption: \"타입이 거짓말을 하고 있어요!\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"이 문제를 해결하기 위해 검증 로직을 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> String\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Int\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> String\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>age <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"나이는 0보다 작을 수 없습니다.\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"@\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이메일 형식이 올바르지 않습니다.\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같이 해결할 수도 있지만 타입을 이용하면 이를 좀 더 우아하게 해결할 수 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 참고로 JVM 환경이라면 @JvmInline 어노테이션이 필요하다</span>\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNotBlank</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이름은 공백일 수 없습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Age</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"나이는 0보다 작을 수 없습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Email</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"@\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이메일 형식이 올바르지 않습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> Name\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Age\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> Email\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> Name<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Age<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> Email<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이런 방식으로 타입을 별도로 정의하여 사용하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 있으므로 가독성에 더 좋다. 또한 이러한 타입은 다양한 곳에서 재사용할 수 있으므로 코드의 중복을 줄일 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"참고로 이 글에서는 코틀린의 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">value class</code>\"\n    }\n  }), \"를 사용헀지만 다른 언어에서도 클래스를 사용하여 똑같이 만들 수 있다. 정리하자면 타입 시스템을 풍부하게 사용하는 것으로 다음과 같은 이점을 얻을 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"컴파일 타임에 오류를 발견할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"타입을 통해 로직을 설계 할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"코드의 가독성을 높일 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"코드의 안정성을 높일 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"우아한-타입-활용\"\n  }, React.createElement(_components.a, {\n    href: \"#우아한-타입-활용\"\n  }, \"우아한 타입 활용\")), \"\\n\", React.createElement(_components.p, null, \"타입 시스템을 잘 이해하고 있다면 타입에 기반하여 범위와 행동을 제한하는 설계가 가능하다. 만약 내 코드를 사용하는 다른 개발자가 조금 더 안전하게 코딩할 수 있게 돕고 싶다면 타입 시스템을 잘 활용하는 것이 좋다.\"), \"\\n\", React.createElement(_components.p, null, \"이번에는 앞서 소개한 사례 외에 타입 시스템을 활용한 다른 사례를 소개할 것이다. 다만, 타입 시스템의 동작은 프로그래밍 언어마다 다르기에 이 글에서 소개하는 문법이 모든 언어에서 지원되는 것은 아니다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"제네릭을-이용한-범용적인-타입\"\n  }, React.createElement(_components.a, {\n    href: \"#제네릭을-이용한-범용적인-타입\"\n  }, \"제네릭을 이용한 범용적인 타입\")), \"\\n\", React.createElement(_components.p, null, \"제네릭(Generic)\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-1\",\n    id: \"user-content-fnref-1\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"1\")), \"은 타입을 일반화하는 방법으로 대부분의 언어가 지원하므로 대부분 잘 아는 문법일 것이다. 예를 들어 Kotlin에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List</code>\"\n    }\n  }), \" 타입은 제네릭을 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입이나 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입을 모두 포함할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">val</span> numbers<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> strings<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"a\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"b\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"c\\\"</span></span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(\"figcaption\", null, \"하나의 List 타입으로 Int와 String을 담을 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"만약 타입 시스템이 제네릭을 지원하지 않는다면 아래 코드처럼 필요할 때마다 타입을 정의해야 한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> IntList <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* ... */</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> StringList <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* ... */</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> numbers<span class=\\\"token operator\\\">:</span> IntList <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> strings<span class=\\\"token operator\\\">:</span> StringList <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"a\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"b\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"c\\\"</span></span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"제네릭을 잘 사용한다면 코드 중복을 많이 줄일 수 있다. 여기까지는 대부분 잘 아는 내용이므로 좀 더 복잡한 내용을 살펴보자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"팬텀-타입을-이용한-범위-제한\"\n  }, React.createElement(_components.a, {\n    href: \"#팬텀-타입을-이용한-범위-제한\"\n  }, \"팬텀 타입을 이용한 범위 제한\")), \"\\n\", React.createElement(_components.p, null, \"팬텀 타입(Phantom Type)은 이름 그대로 실체가 없는 타입을 말한다. 예를 들어 다음 타입은 의미가 없는 타입이라 볼 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// TypeScript</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Phantom</span> <span class=\\\"token comment\\\">// 아무런 정의가 없는 타입</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이처럼 우측에 정의가 되지 않은 타입을 팬텀 타입이라고 부른다. 별도로 타입을 정의할 수 없는 언어는 빈 클래스를 사용하는 방법도 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">class</span> Phantom <span class=\\\"token comment\\\">// 아무런 내용이 없는 클래스</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"얼핏 의미가 무의미한 코드로 보이지만 나름대로 사용처가 있다. 주로 \", React.createElement(_components.strong, null, \"특정 타입에 대한 하위 타입으로 구분\"), \"할 때 많이 쓰인다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> Meters\\n<span class=\\\"token keyword\\\">class</span> Kilometers\\n\\n<span class=\\\"token keyword\\\">class</span> Distance<span class=\\\"token operator\\\">&lt;</span>Unit<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> Distance<span class=\\\"token operator\\\">&lt;</span>Meters<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toKilometers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Distance<span class=\\\"token operator\\\">&lt;</span>Kilometers<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Distance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> Distance<span class=\\\"token operator\\\">&lt;</span>Kilometers<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMeters</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Distance<span class=\\\"token operator\\\">&lt;</span>Meters<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Distance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> distanceInMeters <span class=\\\"token operator\\\">=</span> Distance<span class=\\\"token operator\\\">&lt;</span>Meters<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5000.0</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> distanceInKilometers <span class=\\\"token operator\\\">=</span> distanceInMeters<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toKilometers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Distance in kilometers: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">distanceInKilometers<span class=\\\"token punctuation\\\">.</span>value</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 5.0</span>\\n\\n<span class=\\\"token keyword\\\">val</span> distanceInKilometers2 <span class=\\\"token operator\\\">=</span> Distance<span class=\\\"token operator\\\">&lt;</span>Kilometers<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3.0</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> distanceInMeters2 <span class=\\\"token operator\\\">=</span> distanceInKilometers2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMeters</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Distance in meters: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">distanceInMeters2<span class=\\\"token punctuation\\\">.</span>value</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 3000.0</span>\\n\\n<span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token keyword\\\">val</span> invalid <span class=\\\"token operator\\\">=</span> distanceInMeters<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMeters</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Distance</code>\"\n    }\n  }), \" 클래스는 제네릭을 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Meters</code>\"\n    }\n  }), \" 타입과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Kilometers</code>\"\n    }\n  }), \" 타입을 구분하면서도 하나로 추상화하기 위한 방법으로 팬텀 타입을 사용하고 있다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Distance</code>\"\n    }\n  }), \" 클래스는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Meters</code>\"\n    }\n  }), \" 타입과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Kilometers</code>\"\n    }\n  }), \" 타입을 구분하여 사용할 수 있다. 또한, 제네릭의 공변성으로 인해 두 타입은 서로 다른 타입으로 취급되기 때문에 컴파일러의 보호를 받을 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 이용하여 별도의 값 없이 객체에 상태를 부여하는 것도 가능하다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> Draft\\n<span class=\\\"token keyword\\\">class</span> Published\\n\\n<span class=\\\"token keyword\\\">class</span> Document<span class=\\\"token operator\\\">&lt;</span>State<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> content<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>draftDocument<span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Draft<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Published<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Publishing document: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">content</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Document</span><span class=\\\"token punctuation\\\">(</span>draftDocument<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">edit</span><span class=\\\"token punctuation\\\">(</span>publishedDocument<span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Published<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Draft<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Start editing document: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">content</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Document</span><span class=\\\"token punctuation\\\">(</span>publishedDocument<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> draftDocument <span class=\\\"token operator\\\">=</span> Document<span class=\\\"token operator\\\">&lt;</span>Draft<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Hello, world!\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> publishedDocument <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>draftDocument<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> editingDocument <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">edit</span><span class=\\\"token punctuation\\\">(</span>publishedDocument<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token keyword\\\">val</span> invalid <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">edit</span><span class=\\\"token punctuation\\\">(</span>editingDocument<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"여기까지 정리하자면 즉, 팬텀 타입을 통해 \", React.createElement(_components.strong, null, \"하나의 타입에서 파생되는 복수의 하위 타입을 만드는 것이 가능\"), \"하다. 앞서 \", React.createElement(_components.a, {\n    href: \"#%EA%B0%80%EB%8F%85%EC%84%B1%EA%B3%BC-%EB%9F%B0%ED%83%80%EC%9E%84-%EC%95%88%EC%A0%95%EC%84%B1-%EC%B1%99%EA%B8%B0%EA%B8%B0\"\n  }, \"타입으로 가독성과 런타임 안정성 챙기기\"), \"를 다룰 때 단순히 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \"으로 타입을 이용하지 않고 별도로 이름을 붙여서 사용했다. 다만, 비슷한 사례가 생기면 또 비슷한 타입을 만들어야 한다는 문제가 있다. 이를 해결하기 위해 팬텀 타입을 사용할 수 있다. 마지막으로 다음 예제 하나를 더 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">value <span class=\\\"token keyword\\\">class</span> Id<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> uuid<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span> uuid\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">User</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Id<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> name<span class=\\\"token operator\\\">:</span> String\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Post</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Id<span class=\\\"token operator\\\">&lt;</span>Post<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> userId<span class=\\\"token operator\\\">:</span> Id<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> title<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> content<span class=\\\"token operator\\\">:</span> String\\n<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">UserId</code>\"\n    }\n  }), \" 같은 타입을 만들지 않고 제네릭을 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스를 정의한 것을 볼 수 있다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">T</code>\"\n    }\n  }), \"는 아무런 의미가 없는 팬텀 타입이다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 타입을 가리키는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id&lt;User></code>\"\n    }\n  }), \" 타입과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Post</code>\"\n    }\n  }), \" 타입을 가리키는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id&lt;Post></code>\"\n    }\n  }), \" 타입을 구분할 수 있다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스는 다양한 타입을 가리킬 수 있으며 이를 통해 코드 중복을 줄일 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"유니온-타입을-이용한-행동-제한\"\n  }, React.createElement(_components.a, {\n    href: \"#유니온-타입을-이용한-행동-제한\"\n  }, \"유니온 타입을 이용한 행동 제한\")), \"\\n\", React.createElement(_components.p, null, \"유니온 타입(Union Type)은 두 개 이상의 타입을 하나로 묶어서 사용하는 방법이다. 이를 이용하면 \", React.createElement(_components.strong, null, \"두 개 이상의 타입을 하나로 묶어서 사용\"), \"할 수 있다. 예를 들어 다음 TypeScript 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Fruit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Apple\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"Banana\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"Orange\\\"</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Fruit</code>\"\n    }\n  }), \" 타입을 선언하고 이 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Apple</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Banana</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Orange</code>\"\n    }\n  }), \" 세 가지 타입 중 하나를 가질 수 있다는 것을 의미한다. 참고로 TypeScript에 익숙하지 않다면 값으로 보이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Apple</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Banana</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Orange</code>\"\n    }\n  }), \"이 타입이 될 수 있다는 것이 이해하기 어려울 수 있다. 이는 TypeScript에서 리터럴 타입(Literal Type)이라고 불리는 타입으로 TypeScript에선 하나의 값을 타입으로 사용할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 이용하여 행동을 제한하는 것이 가능하다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">State</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'loading'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">|</span> \\n  <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">|</span> \\n  <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> state<span class=\\\"token operator\\\">:</span> State <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'loading'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'Error!'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">State</code>\"\n    }\n  }), \" 타입은 세 타입 중 하나를 가질 수 있다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">State</code>\"\n    }\n  }), \" 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">type</code>\"\n    }\n  }), \" 속성에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">loading</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">success</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">error</code>\"\n    }\n  }), \" 세 가지 리터럴 타입 중 하나를 가질 수 있으며 이를 통해 어떤 타입인지 확인 할 수 있다. 이를 통해 접근할 수 있는 속성을 제한하여 개발자의 행동을 통제하는 것이 가능하다. 참고로 엄밀히 따지면 위 코드에서 사용된 유니온 타입은 서로소 유니온 타입(Disjoint Union Type)이라고 불린다.\"), \"\\n\", React.createElement(_components.p, null, \"아쉽게도 유니온 타입을 지원하지 않는 언어가 많다. 다만, 서로소 유니온 타입은 합 타입(Sum Type)을 지원하는 언어라면 구현할 수 있다. 예를 들어, 합 타입을 지원하는 언어인 Kotlin은 다음과 같이 구현할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">interface</span> State <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Loading<span class=\\\"token operator\\\">:</span> State\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Success<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> <span class=\\\"token keyword\\\">data</span><span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> State\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> message<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> State\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> state<span class=\\\"token operator\\\">:</span> State <span class=\\\"token operator\\\">=</span> State<span class=\\\"token punctuation\\\">.</span>Loading\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> <span class=\\\"token keyword\\\">data</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  state <span class=\\\"token operator\\\">=</span> State<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Success</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">data</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> State<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Error!\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token keyword\\\">is</span> State<span class=\\\"token punctuation\\\">.</span>Success<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"최소-타입을-이용한-todo-처리\"\n  }, React.createElement(_components.a, {\n    href: \"#최소-타입을-이용한-todo-처리\"\n  }, \"최소 타입을 이용한 TODO 처리\")), \"\\n\", React.createElement(_components.p, null, \"최소 타입(Bottom Type)\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-2\",\n    id: \"user-content-fnref-2\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"2\")), \"은 모든 타입의 하위 타입이며 아무런 값도 가질 수 없는 타입이다. 이는 \", React.createElement(_components.strong, null, \"실행할 수 없는 코드를 표현\"), \"하는 데 사용할 수 있다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Nothing <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fail</code>\"\n    }\n  }), \" 함수를 정의하고 이 함수는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">IllegalArgumentException</code>\"\n    }\n  }), \"을 던지는 함수이다. 이 함수는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nothing</code>\"\n    }\n  }), \" 타입을 반환하며 이는 최소 타입으로 아무런 값도 가질 수 없는 타입이다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fail</code>\"\n    }\n  }), \" 함수는 실행할 수 없는 코드를 표현하는 데 사용할 수 있다. 참고로 Kotlin에선 비슷한 역할을 하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TODO()</code>\"\n    }\n  }), \" 함수를 제공한다.\"), \"\\n\", React.createElement(_components.p, null, \"최소 타입을 지원하는 다른 언어 중 하나로 TypeScript가 있다. TypeScript에선 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">never</code>\"\n    }\n  }), \" 타입을 제공하며 이는 최소 타입으로 아무런 값도 가질 수 없는 타입이다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token constant\\\">TODO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">never</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Not implemented yet\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserService</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> User <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">TODO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 Kotlin 예시처럼 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TODO</code>\"\n    }\n  }), \" 함수를 통해 아직 구현되지 않은 코드를 표현할 수 있다. 이를 통해 개발자는 일단 필요한 함수를 선언하고 이후 구현할 수 있게 된다. 그런 일은 없어야겠지만 만약 구현을 하지 않은 채 배포했다면 바로 에러가 발생하므로 금방 알 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입을-이용한-상태-머신-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#타입을-이용한-상태-머신-구현\"\n  }, \"타입을 이용한 상태 머신 구현\")), \"\\n\", React.createElement(_components.p, null, \"상태 머신(State Machine)은 상태(State)와 이벤트(Event)를 통해 상태를 전이하는 것을 말한다. 이를 타입을 이용하면 \", React.createElement(_components.strong, null, \"컴파일 시간에 상태 전이를 검증\"), \"할 수 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 상태와 이벤트를 나타내는 인터페이스</span>\\n<span class=\\\"token keyword\\\">interface</span> State\\n<span class=\\\"token keyword\\\">interface</span> Event<span class=\\\"token operator\\\">&lt;</span>S<span class=\\\"token operator\\\">:</span> State<span class=\\\"token punctuation\\\">,</span> T<span class=\\\"token operator\\\">:</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token operator\\\">:</span> S<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> T\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 팬텀 타입을 이용한 상태 머신 클래스</span>\\n<span class=\\\"token keyword\\\">class</span> StateMachine<span class=\\\"token operator\\\">&lt;</span>S<span class=\\\"token operator\\\">:</span> State<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> state<span class=\\\"token operator\\\">:</span> S<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T <span class=\\\"token operator\\\">:</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>S<span class=\\\"token punctuation\\\">,</span> T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> StateMachine<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">StateMachine</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> SimpleState<span class=\\\"token operator\\\">:</span> State <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Idle<span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">SimpleState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Running<span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">SimpleState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Finished<span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">SimpleState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> SimpleEvent<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>SimpleState<span class=\\\"token punctuation\\\">,</span> SimpleState<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">object</span> Start<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>SimpleState<span class=\\\"token punctuation\\\">.</span>Idle<span class=\\\"token punctuation\\\">,</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Running<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Idle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Running</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Starting...\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Running\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">object</span> Stop<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>SimpleState<span class=\\\"token punctuation\\\">.</span>Running<span class=\\\"token punctuation\\\">,</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Finished<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Running<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Finished</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Stopping...\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Finished\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 초기 상태</span>\\n<span class=\\\"token keyword\\\">val</span> idleMachine <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">StateMachine</span><span class=\\\"token punctuation\\\">(</span>SimpleState<span class=\\\"token punctuation\\\">.</span>Idle<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Initial state: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">idleMachine<span class=\\\"token punctuation\\\">.</span>state</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// Running 상태로 전이</span>\\n<span class=\\\"token keyword\\\">val</span> runningMachine <span class=\\\"token operator\\\">=</span> idleMachine<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>SimpleEvent<span class=\\\"token punctuation\\\">.</span>Start<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"After starting: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">runningMachine<span class=\\\"token punctuation\\\">.</span>state</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// Finished 상태로 전이</span>\\n<span class=\\\"token keyword\\\">val</span> finishedMachine <span class=\\\"token operator\\\">=</span> runningMachine<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>SimpleEvent<span class=\\\"token punctuation\\\">.</span>Stop<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"After stopping: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">finishedMachine<span class=\\\"token punctuation\\\">.</span>state</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token keyword\\\">val</span> invalidTransition <span class=\\\"token operator\\\">=</span> idleMachine<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>SimpleEvent<span class=\\\"token punctuation\\\">.</span>Stop<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 언급한 합타입과 팬텀 타입을 이용하여 상태 머신을 구현하면 컴파일 시간에 상태 전이를 검증할 수 있다. 이를 통해 상태 머신을 구현할 때 런타임에 발생할 수 있는 오류를 컴파일 시간에 미리 방지할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"의존-타입\"\n  }, React.createElement(_components.a, {\n    href: \"#의존-타입\"\n  }, \"의존 타입\")), \"\\n\", React.createElement(_components.p, null, \"의존 타입(Dependent Type)은 대부분의 언어에선 보기 힘든 개념이다. 필자는 예전에 \", React.createElement(_components.a, {\n    href: \"https://www.idris-lang.org/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Idris\"), \"라는 언어를 통해 이 개념을 처음 접했고 이 글을 쓰며 \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Dependent_type#Comparison_of_languages_with_dependent_types\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"지원하는 언어\"), \"를 찾아봤지만 대부분은 처음 들어보는 언어였다. 따라서 굳이 알아야하는 개념은 아니지만 타입 시스템을 고도로 활용하면 이런 개념까지도 가능하다라는 것을 알리기 위해 간단하게 소개해볼 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"의존 타입은 \", React.createElement(_components.strong, null, \"타입이 다른 타입에 의존하는 타입\"), \"을 말한다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"idris\\\"><pre class=\\\"language-idris\\\"><code class=\\\"language-idris\\\"><span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Nat</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token keyword\\\">where</span>\\n  <span class=\\\"token constant\\\">Nil</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token constant\\\">Z</span> <span class=\\\"token hvariable\\\">a</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">::</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token hvariable\\\">n</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">S</span> <span class=\\\"token hvariable\\\">n</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">a</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 Idris 언어로 작성된 코드이다. 이해하기 힘든 코드지만 간단히 설명하자면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nat</code>\"\n    }\n  }), \"는 숫자를 의미하고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Vect</code>\"\n    }\n  }), \" 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nat</code>\"\n    }\n  }), \" 타입에 의존하며 길이를 나타내는 것으로 사용하고 있다. 따라서 다음과 같이 작성하면 최대 길이 10인 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Vect</code>\"\n    }\n  }), \" 타입을 만들 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"idris\\\"><pre class=\\\"language-idris\\\"><code class=\\\"language-idris\\\"><span class=\\\"token hvariable\\\">vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token constant\\\">Nat</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"만약 합계를 해주는 프로그램을 만든다면 다음과 같이 작성할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"idris\\\"><pre class=\\\"language-idris\\\"><code class=\\\"language-idris\\\"><span class=\\\"token comment\\\">-- Idris 2</span>\\n<span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Main</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Nat</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token keyword\\\">where</span>\\n   <span class=\\\"token constant\\\">Nil</span>  <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token constant\\\">Z</span> <span class=\\\"token hvariable\\\">a</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">::</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token hvariable\\\">k</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">S</span> <span class=\\\"token hvariable\\\">k</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">a</span>\\n\\n<span class=\\\"token hvariable\\\">vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token constant\\\">Nat</span>\\n<span class=\\\"token hvariable\\\">vect</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">6</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">8</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">9</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Nil</span>\\n\\n<span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token hvariable\\\">n</span> <span class=\\\"token constant\\\">Nat</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Nat</span>\\n<span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token constant\\\">Nil</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token hvariable\\\">xs</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token hvariable\\\">xs</span>\\n\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">IO</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">putStrLn</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">show</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token hvariable\\\">vect</span> <span class=\\\"token comment\\\">-- 55</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"타입 시스템이 이정도로 강력하다면 보통 런타임에 검증할 것을 컴파일 시간에 검증하는 것까지도 가능하다. 아무래도 너무 과한 기능인 것은 사실이지만 타입 시스템이 어디까지 강력해질 수 있는지 보여주는 사례라고 볼 수 있다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"타입-주도-개발\"\n  }, React.createElement(_components.a, {\n    href: \"#타입-주도-개발\"\n  }, \"타입 주도 개발\")), \"\\n\", React.createElement(_components.p, null, \"그럼 이번에는 앞서 배운 것을 활용하여 타입 시스템을 풍부하게 사용할 수 있도록 개발하는 \", React.createElement(_components.strong, null, \"타입 주도 개발\"), React.createElement(\"sup\", null, \"Type-Driven Development\"), \"에 대해 알아보자. 타입 주도 개발은 다른 무언가를 먼저 정의하고 시작하는 XXX 주도 개발과 마찬가지로 \", React.createElement(_components.strong, null, \"타입을 먼저 정의하고 이를 통해 코드를 작성\"), \"하는 방법론이다.\"), \"\\n\", React.createElement(_components.p, null, \"참고로 타입 주도 개발은 함수 구현처럼 아주 작은 부분에 적용할 수 있는 방법론이다. 따라서 다른 테스트 주도 개발과 같은 다른 개발 방법론과 함께 사용할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입을-먼저-정의하기\"\n  }, React.createElement(_components.a, {\n    href: \"#타입을-먼저-정의하기\"\n  }, \"타입을 먼저 정의하기\")), \"\\n\", React.createElement(_components.p, null, \"프로그램은 일련의 절차를 통해 원하는 결과를 만들어 낸다. 이때 각 절차는 입력 데이터를 받아 특정 로직을 수행하고 결과를 반환한다. 다양한 패러다임으로 프로그램을 작성할 수 있지만 절차를 통해 원하는 결과를 만들어 낸다는 것 하나는 변하지 않는다. 따라서 타입 주도 개발은 원한다면 어디에도 적용할 수 있으며 각 절차에 대한 결과를 타입으로 정의하는 것으로 시작한다.\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-3\",\n    id: \"user-content-fnref-3\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"3\"))), \"\\n\", React.createElement(_components.p, null, \"타입을 먼저 정의한다는 것은 우리가 원하는 로직을 구체적으로 작성하기 전에 타입으로 추상화한다는 것과 같다. 연습을 위해 프로그래머스의 \", React.createElement(_components.a, {\n    href: \"https://school.programmers.co.kr/learn/courses/30/lessons/120902\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"문자열 계산하기\"), \" 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다.\"), \"\\n\", React.createElement(_components.p, null, \"이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, \", React.createElement(_components.strong, null, \"타입을 통해 로직을 추상화 하는 것이 가능하다\"), \"라는 뜻이다. 이러한 사고가 타입 주도 개발의 핵심이라 볼 수 있다. 연습을 위해 프로그래머스의 \", React.createElement(_components.a, {\n    href: \"https://school.programmers.co.kr/learn/courses/30/lessons/120902\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"문자열 계산하기\"), \" 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열로 이루어진 수식을 입력으로 제공한다.\"), \"\\n\", React.createElement(_components.li, null, \"연산자는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">+</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-</code>\"\n    }\n  }), \"만 존재한다.\"), \"\\n\", React.createElement(_components.li, null, \"피연산자는 자연수만 존재한다.\"), \"\\n\", React.createElement(_components.li, null, \"잘못된 수식은 주어지지 않는다.\"), \"\\n\", React.createElement(_components.li, null, \"숫자와 연산자는 공백으로 구분한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"먼저 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입을 받아 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \"로 반환하는 함수가 필요하다는 것을 떠올릴 수 있다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Int</code>\"\n    }\n  }), \"와 같이 표현이 가능하다. 요구사항을 기반으로 로직을 더 구체화 해보면 다음과 같은 로직이 필요하다는 것을 알 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열을 숫자와 연산자로 분리한다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자를 숫자로 변환한다.\"), \"\\n\", React.createElement(_components.li, null, \"문자를 연산자로 변환한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"문자가 숫자인지 연산자인지 판단한다.\"), \"\\n\", React.createElement(_components.li, null, \"문자열을 계산한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"먼저 각 키워드를 타입으로 추상화하면 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" // 문자열과 문자가 구분된 언어에선 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Char</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"숫자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"연산자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"부호 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"판단 결과 -> \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Boolean</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"계산 결과 -> \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"도메인-반영하기\"\n  }, React.createElement(_components.a, {\n    href: \"#도메인-반영하기\"\n  }, \"도메인 반영하기\")), \"\\n\", React.createElement(_components.p, null, \"문제가 간단하여 도메인이라 부르기에 빈약하지만 엄밀히 따져 연산자와 부호는 같은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \"이지만 의미가 다르다. 따라서 이를 구분하기 위해 다른 타입으로 정의하는 것이 좋다. 다시 한 번 각 키워드를 타입으로 추상화하면 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Token</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"숫자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Number</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"연산자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Operator</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"부호 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Sign</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"요구사항을 다시 확인하면 문자(Token)는 숫자(Number) 혹은 연산자(Operator) 둘 중 하나이므로 문자의 하위 타입으로 볼 수 있다. 그리고 숫자는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입으로 표현되고 연산자는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Sign</code>\"\n    }\n  }), \" 타입으로 표현된다. 이를 코드로 나타내면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 부호</span>\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> Sign <span class=\\\"token punctuation\\\">{</span>\\n  PLUS<span class=\\\"token punctuation\\\">,</span> MINUS\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 토큰</span>\\n<span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">interface</span> Token<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> T\\n\\n  <span class=\\\"token comment\\\">// 숫자 토큰</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Token<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token comment\\\">// 연산자 토큰</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Sign<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Token<span class=\\\"token operator\\\">&lt;</span>Sign<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"함수를-타입으로-추상화하기\"\n  }, React.createElement(_components.a, {\n    href: \"#함수를-타입으로-추상화하기\"\n  }, \"함수를 타입으로 추상화하기\")), \"\\n\", React.createElement(_components.p, null, \"이번에는 각 로직을 타입으로 추상화해보자.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열을 숫자와 연산자로 분리한다. → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> List&lt;Token></code>\"\n    }\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자를 숫자로 변환한다. → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Number</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자를 연산자로 변환한다. → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Operator</code>\"\n    }\n  })), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"문자가 숫자인지 연산자인지 판단한다. → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Boolean</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자열을 계산한다 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Int</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"분해한 로직을 합쳐 로직 파이프라인을 만들면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 문자가 숫자인지 연산자인지 판단한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token operator\\\">=</span>\\n  token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toIntOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span>\\n\\n<span class=\\\"token comment\\\">// 문자를 숫자로 변환한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span>\\n  token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 문자를 연산자로 변환한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Sign <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span> <span class=\\\"token operator\\\">-></span> Sign<span class=\\\"token punctuation\\\">.</span>PLUS\\n    <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span> <span class=\\\"token operator\\\">-></span> Sign<span class=\\\"token punctuation\\\">.</span>MINUS\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Unknown operator: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">token</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 문자열을 숫자와 연산자 문자로 분리한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Token<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\" \\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> token <span class=\\\"token operator\\\">-></span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 문자열을 계산한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> tokens <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n  <span class=\\\"token keyword\\\">var</span> sign <span class=\\\"token operator\\\">=</span> Sign<span class=\\\"token punctuation\\\">.</span>PLUS\\n\\n  tokens<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span> <span class=\\\"token punctuation\\\">{</span> token <span class=\\\"token operator\\\">-></span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> Token<span class=\\\"token punctuation\\\">.</span>Number <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>sign<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          Sign<span class=\\\"token punctuation\\\">.</span>PLUS <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n            result <span class=\\\"token operator\\\">+=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n          <span class=\\\"token punctuation\\\">}</span>\\n          Sign<span class=\\\"token punctuation\\\">.</span>MINUS <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n            result <span class=\\\"token operator\\\">-=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">is</span> Token<span class=\\\"token punctuation\\\">.</span>Operator <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        sign <span class=\\\"token operator\\\">=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"9 - 4 - 1 + 2 + 6\\\"</span></span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 12</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"참고로 함수 정의는 요구사항에 대한 해석이나 패러다임에 따라 다를 수 있다. 따라서 같은 로직을 작성하더라도 위 코드와 다른 로직이 나올 수 있으므로 틀렸다고 생각하지 말자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"테스트-코드와-함께하기\"\n  }, React.createElement(_components.a, {\n    href: \"#테스트-코드와-함께하기\"\n  }, \"테스트 코드와 함께하기\")), \"\\n\", React.createElement(_components.p, null, \"타입을 먼저 정의한다는 점에서 테스트 주도 개발과도 잘 어울린다. 테스트 주도 개발은 이미 유명한 방법론이지만 설명하자면 \", React.createElement(_components.strong, null, \"만들어야 할 기능의 테스트를 먼저 작성하고 이를 통과하는 코드를 작성하는 방법론\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, \"입력과 출력 결과를 미리 정의하고 코드를 작성한다는 점에서 타입 주도 개발과 테스트 주도 개발은 유사하다. 그만큼 궁합도 좋은데 타입 주도 개발이 타입 시스템을 이용하여 컴파일 시간에 미리 안정성을 체크할 수 있다면 테스트 주도 개발은 타입만으로는 잡아낼 수 없는 오류나 예외 상황을 테스트 코드를 통해 잡아낼 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"테스트 코드를 작성하는 시점은 \", React.createElement(_components.a, {\n    href: \"#%ED%95%A8%EC%88%98%EB%A5%BC-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94%ED%95%98%EA%B8%B0\"\n  }, \"함수를 타입으로 추상화하기\"), \"까지 진행한 후가 좋다. 이를 통해 함수의 입력과 출력을 명확하게 정의할 수 있으며 이를 통해 테스트 코드를 작성할 수 있다. 다음은 위 코드에 대한 테스트 코드이다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> CalculatorTest <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testIsNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assertTrue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"123\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">assertFalse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testToNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"123\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testToSign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>Sign<span class=\\\"token punctuation\\\">.</span>PLUS<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testTokenize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"9 - 4\\\"</span></span>\\n    <span class=\\\"token keyword\\\">val</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span>\\n      Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span>Sign<span class=\\\"token punctuation\\\">.</span>MINUS<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testCalculate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"9 - 4 - 1 + 2 + 6\\\"</span></span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"타입 시스템은 개발자에게 있어 아낌없이 주는 든든한 친구다. 문제를 미연에 방지할 수 있게 해주며 가독성까지 챙길 수 있게 해준다. 타입이라는 개념과 친해질 수록 타입 시스템을 풍부하게 사용할 수 있게 되고, 이는 코드의 안정성과 가독성을 높여준다. 이 글에서 소개하는 타입 주도 개발은 타입과 친해지기 좋은 연습 방법이 될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"다만 일일히 타입의 정의하여 타입이 너무 많아지거나 타입의 정의가 복잡해지면 오히려 코드를 작성하기 힘들어지거나 가독성을 떨어뜨릴 수 있다. 따라서 항상 적절한 상태를 유지하는 것이 중요하다.\"), \"\\n\", React.createElement(_components.p, null, \"설계자의 입장에 타입 시스템을 활용한다는 것은 다른 개발자를 위한 코드 규칙을 만드는 것과 같다. 설계자는 이를 적절하게 이용하여 안전하면서 편리한 코드를 작성할 수 있게 간접적으로 코드 규칙을 만들 수 있다. 이점을 고려하여 꼭 설계자가 아니더라도 다른 개발자가 안전한 코드를 작성할 수 있도록 타입을 이용한 규칙을 만들어보자.\"), \"\\n\", React.createElement(_components.section, {\n    \"data-footnotes\": true,\n    className: \"footnotes\"\n  }, React.createElement(_components.h2, {\n    className: \"sr-only\",\n    id: \"footnote-label\"\n  }, React.createElement(_components.a, {\n    href: \"#footnote-label\"\n  }, \"Footnotes\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-1\"\n  }, \"\\n\", React.createElement(_components.p, null, \"참고로 외래어 표기법으로는 지네릭이라 표기하지만 한글 문서 대부분 제네릭이라 표현하므로 이 글에서도 제네릭이라 표기한다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-1\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-2\"\n  }, \"\\n\", React.createElement(_components.p, null, \"최소 타입이라는 번역은 '타입으로 견고하게 다형성으로 유연하게'라는 책에서 사용한 번역이다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-2\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-3\"\n  }, \"\\n\", React.createElement(_components.p, null, \"다만 함수형 패러다임과 궁합이 좋다는 것은 부정할 수 없다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-3\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","span","h1","a","h2","ul","li","sup","section","ol","_provideComponents","components","React","dangerouslySetInnerHTML","__html","id","href","Image","src","caption","width","rel","className","wrapper","MDXLayout","_ref","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body"],"sourceRoot":""}