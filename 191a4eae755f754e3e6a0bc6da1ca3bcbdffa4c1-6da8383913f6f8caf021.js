"use strict";(self.webpackChunkkciter_so=self.webpackChunkkciter_so||[]).push([[1139,871,4103],{2936:function(n,s,a){a.r(s);var t=a(9128),p=a(9474),e=a(5799);function o(n){const s=Object.assign({p:"p",strong:"strong",span:"span",ul:"ul",li:"li",a:"a",h1:"h1",sup:"sup",h2:"h2",section:"section",ol:"ol"},(0,t.R)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"들어가기에 앞서 ",p.createElement(s.strong,null,"Polymorphism"),"은 한국어로 다형성이라고 부르는데, ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">여러 개의 형태를 가진다</code>'}}),"라는 의미를 가진 그리스어에서 유래된 단어다. 그럼 이 글의 제목에 포함된 ",p.createElement(s.strong,null,"Polymorphic"),"은 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">다형의</code>'}})," 혹은 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">다양한 형태의</code>'}})," 등으로 표현할 수 있을 것이다. 컴퓨터 과학에서 다형성은 프로그래밍적인 요소가 여러 형태로 표현 될 수 있는 것을 의미하는데 보통은 객체가 여러 자료형으로 나타날 수 있음을 표현할 때 사용한다."),"\n",p.createElement(s.p,null,"그럼 Polymorphic한 UI 컴포넌트는 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">다양한 형태의 UI 컴포넌트</code>'}}),"라고 바꿔 말할 수 있을 것이다. 필자는 이 말이 다음과 같은 내용을 담고 있다고 생각한다."),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"다양한 Semantic을 표현할 수 있는 UI 컴포넌트"),"\n",p.createElement(s.li,null,"다양한 속성을 가질 수 있는 UI 컴포넌트"),"\n",p.createElement(s.li,null,"다양한 스타일을 가질 수 있는 UI 컴포넌트"),"\n"),"\n",p.createElement(s.p,null,"좀 더 풀어서 설명하자면 웹 프론트엔드에서의 Polymorphic 컴포넌트는 코드에 따라 어떠한 요소(Element)도 될 수 있고 그에 따른 속성(Attribute)도 사용할 수 있다. 즉, 상황에 맞는 Semantic을 사용할 수 있고 앵커 태그처럼 특수한 용도로 사용되는 컴포넌트가 될 수도 있다. 결국 ",p.createElement(s.strong,null,"無의 형태"),"에서 ",p.createElement(s.strong,null,"무엇이든지 될 수 있는 컴포넌트"),"가 되는 것이 Polymorphic 컴포넌트고 가장 추상화된 형태의 컴포넌트라고 볼 수 있다."),"\n",p.createElement(e.A,{src:"/images/2022-08-16-polymorphic-react-component/step.png",caption:"최종적으로 사용자에게 보이는 컴포넌트는 이러한 구현 과정을 거친다"}),"\n",p.createElement(s.p,null,"그래서 Polymorphic 컴포넌트는 React와 관련된 UIKit을 뜯어보면 높은 확률로 사용되고 있는 패턴이다. 예를 들면, MUI의 ",p.createElement(s.a,{href:"https://mui.com/material-ui/react-box/",rel:"nofollow noopener noreferrer"},"Box")," 컴포넌트나 Mantine의 ",p.createElement(s.a,{href:"https://mantine.dev/core/box/",rel:"nofollow noopener noreferrer"},"Box")," 컴포넌트를 예시로 들 수 있다. 두 UI 라이브러리는 Box라는 Polymorphic한 컴포넌트를 이용하여 재사용성을 높이고 다양한 컴포넌트를 확장성 있게 구현하고 있다. 굉장히 유용한 컴포넌트기 때문에 필자가 재직 중인 회사에서 만들고 사용하는 ",p.createElement(s.a,{href:"https://github.com/cobaltinc/co-design",rel:"nofollow noopener noreferrer"},"디자인 시스템"),"에도 View 컴포넌트를 구현하여 비슷하게 사용하고 있다."),"\n",p.createElement(s.p,null,"아쉽게도 Polymorphic 컴포넌트와 관련된 자료는 한국어로 작성된 자료가 거의 없고 영문으로도 구체적인 설명한 자료는 찾기 힘들어 이번 기회에 관련된 내용을 포스팅 해보기로 했다."),"\n",p.createElement(s.h1,{id:"문제-인식하기"},p.createElement(s.a,{href:"#문제-인식하기"},"문제 인식하기")),"\n",p.createElement(s.p,null,"실제 사례를 보지 않는다면 이 컴포넌트가 왜 필요한지 모를 수 있다. 다음 코드를 살펴보자."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Button.jsx\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> \n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'black\'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'white\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> \n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * App.jsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'Good!\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"설명이 필요 없을 정도로 간단한 코드다. 단순하게 표현했지만 위 코드처럼 스타일만 적용한 컴포넌트는 실제로도 많이 사용된다. Button 컴포넌트는 prop으로 넘기는 값을 button 태그의 속성으로 전부 넘기기 때문에 꽤 확장성 있게 사용할 수 있는 컴포넌트라고 생각할 수 있다. 그런데 만약 버튼에 페이지 링크를 추가하고 싶다면 어떻게 해야 할까?"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"위 처럼 작성할 수도 있겠지만 재사용성 측면에선 그다지 좋은 방법은 아니다. 추후 재사용을 고려하여 새로운 컴포넌트를 만들 수도 있다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Button.jsx\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> \n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'black\'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'white\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> \n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * LinkButton.jsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">LinkButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> href<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * App.jsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> LinkButton <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./LinkButton\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LinkButton</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LinkButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"위와 같이 작성할 수도 있지만 이 경우 a 태그가 확장되지 않는다는 문제점이 있고 컴포넌트의 의존 관계가 새롭게 추가된다는 문제점이 있다. 그리고 만약 react-router나 Next.js를 사용하여 SPA를 위한 Link 컴포넌트를 사용한다면 또 새로운 컴포넌트를 만들어줄 수 밖에 없다. 이 문제의 해결법으로 Polymorphic 컴포넌트를 사용할 수 있다."),"\n",p.createElement(s.h1,{id:"javascript에서-구현하기"},p.createElement(s.a,{href:"#javascript에서-구현하기"},"JavaScript에서 구현하기")),"\n",p.createElement(s.p,null,"사실 JavaScript에선 Type-safe에 자유롭기 때문에 Polymorphic 컴포넌트를 구현하는 것이 어렵지 않다. 이런 부분은 JavaScript 약점이지만 한편으로는 구현의 편리함으로서 강점이 될 수도 있다. 다음과 같이 아주 간단하게 Polymorphic한 컴포넌트를 만들 수 있다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">const</span> View <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Element <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">"div"</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"여기서 구현한 View 컴포넌트는 React에서 가장 추상적인 컴포넌트다. ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}}),"를 통해 기본 내장된 컴포넌트를 포함하여 어떠한 컴포넌트로도 될 수 있다. 만약 생략한다면 기본적으로 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">div</code>'}}),"를 사용하게 된다. 이때, 필요한 속성이 있다면 자유롭게 넘길 수 있도록 컴포넌트를 작성하고 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forwardRef</code>'}}),"를 통해 부모 컴포넌트에서 요소에 접근할 수 있도록 만들었다. 이 컴포넌트는 다음과 같이 사용할 수 있다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./View\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"코드를 살펴보면 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}}),"를 통해 View 컴포넌트에 사용되는 요소를 a 태그로 변경하고 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">href</code>'}})," 속성을 사용한 것을 볼 수 있다. 그럼 이 코드를 실행하면 ",p.createElement(s.a,{href:"https://kciter.so",rel:"nofollow noopener noreferrer"},"Click Me!"),"라는 링크가 보이게 된다. 사실 이렇게만 사용하면 왜 사용하는지 이해가 안가는 것이 당연하다. 그냥 바로 a 태그를 쓰면 되니 번거롭게 컴포넌트를 만들 필요가 없기 때문이다. 그렇지만 위 코드를 응용하여 다음과 같이 사용하는 것도 가능하다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Button.jsx\n */</span>\n<span class="token keyword">import</span> View <span class="token keyword">from</span> <span class="token string">\'./View\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token comment">// 위에서 만들어둔 View 컴포넌트를 이용했다.</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">as</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">\'button\'</span><span class="token punctuation">}</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'black\'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'white\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> \n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 혹은 다음과 같이 작성할 수 있다.</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Element <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">\'button\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'black\'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'white\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> \n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * App.jsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      // 마치 앵커 태그처럼 사용할 수 있다.\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"다시 ",p.createElement(s.a,{href:"#%EB%AC%B8%EC%A0%9C-%EC%9D%B8%EC%8B%9D%ED%95%98%EA%B8%B0"},"문제 인식하기")," 부분을 살펴보면 이때는 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">LinkButton</code>'}}),"이라는 컴포넌트를 만드는 것으로 요구사항을 충족했었다. 만약 위 코드처럼 Polymorphic 하도록 컴포넌트를 작성한다면 중복 코드를 제거하고 조금 더 유연하게 컴포넌트를 사용할 수 있게 된다. 생각보다 이런 사례가 많고 구현이 간단하기 때문에 좋은 컴포넌트 설계라고 볼 수 있다."),"\n",p.createElement(s.h1,{id:"typescript에서-구현하기"},p.createElement(s.a,{href:"#typescript에서-구현하기"},"TypeScript에서 구현하기")),"\n",p.createElement(s.p,null,"JavaScript를 쓸 때 아쉬운 점은 IntelliSense",p.createElement(s.sup,null,p.createElement(s.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"1")),"를 사용할 수 없다는 점이다. 어느 정도 자동 완성을 해주긴 하지만 TypeScript의 강력함에 비하면 좀 아쉽다. 위 코드도 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}}),"를 통해 다른 요소를 사용하도록 변경했지만 어떤 속성을 넘길 수 있을지는 개발자가 잘 판단하여야 한다. 혹은 개발자가 오타를 내어 잘못된 값을 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}}),"로 전달할 수도 있다. 이런 문제점은 TypeScript를 통해 Type-safe한 Polymorphic 컴포넌트를 구현하면 해결할 수 있다."),"\n",p.createElement(s.h2,{id:"요소와-속성-표현하기"},p.createElement(s.a,{href:"#요소와-속성-표현하기"},"요소와 속성 표현하기")),"\n",p.createElement(s.p,null,"JavaScript에서 사용한 코드와 똑같이 사용할 수 있도록 만들면서 자동 완성 기능까지 사용하려면 타입 정의가 필요하다. 우선 다음 코드를 확인해보자."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">/**\n * View.tsx\n */</span>\n<span class="token keyword">interface</span> <span class="token class-name">ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">></span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> View <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">"div"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token keyword">as</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>props\n<span class="token punctuation">}</span><span class="token operator">:</span> ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Element <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">"div"</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * App.tsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./components/View"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token comment">// 컴포넌트 부분에 에러가 발생한다.</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      Link\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">React.ElementType</code>'}}),"은 JSX 내장 컴포넌트 또는 사용자 정의 컴포넌트를 둘 다 받을 수 있는 타입으로 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">string | React.ComponentType&lt;any></code>'}}),"로 정의되어있다. 이 타입과 제네릭을 사용하면 위 JavaScript 코드에서 했던 것처럼 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}}),"를 통해 사용하려는 요소를 바꿀 수 있게 된다."),"\n",p.createElement(s.p,null,"하지만 위와 같이 View 컴포넌트를 작성하면 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}}),"를 통해 사용하려한 요소가 어떤 것인지 알 수가 없다. 따라서 다음과 같은 에러가 발생하게 된다."),"\n",p.createElement(e.A,{src:"/images/2022-08-16-polymorphic-react-component/error-message-1.png"}),"\n",p.createElement(s.p,null,"에러 메시지를 살펴보면 prop으로 넘긴 값들이 타입에 맞지 않는다는 것을 알 수 있다. 이를 위해 다음과 같이 View 컴포넌트를 수정할 수 있다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> View <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">"div"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token keyword">as</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>props\n<span class="token punctuation">}</span><span class="token operator">:</span> ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Element <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">"div"</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">React.ComponentPropsWithoutRef</code>'}}),"은 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ref</code>'}}),"를 제외한 나머지 속성을 정의할 수 있게 해주는 타입이다. 이 타입을 이용하면 제네릭을 통해 나머지 속성에 대한 것을 알 수 있게 된다. 하지만 아직 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ref</code>'}}),"는 받아올 수 없다."),"\n",p.createElement(s.h2,{id:"ref-받아오기"},p.createElement(s.a,{href:"#ref-받아오기"},"ref 받아오기")),"\n",p.createElement(s.p,null,"여기까지는 이해하는 것이 어렵지는 않았을 것이다. 코드 양이 많은 것도 아니기 때문에 생각보다 쉽게 구현할 수 있다. 그렇지만 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ref</code>'}}),"까지 사용하게 된다면 조금 복잡해진다. 일단 다음 코드를 살펴보자."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> View <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">"div"</span><span class="token operator">></span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\n    ref<span class="token operator">:</span> React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"ref"</span><span class="token punctuation">]</span> <span class="token comment">// ref만 받아오도록</span>\n  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> Element <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">"div"</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"만약 위에와 같이 이미 제공되는 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">React.ComponentPropsWithRef</code>'}})," 타입을 사용하면 쉽게 해결됐다고 생각할 수 있겠지만 다음과 같이 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">unknown</code>'}}),"으로 타입을 알 수 없다는 것을 알 수 있다. 이러면 제대로된 타입이 아니어도 에러가 발생하지 않는다."),"\n",p.createElement(e.A,{src:"/images/2022-08-16-polymorphic-react-component/ref-unknown-type.png",caption:"잘못된 타입인 ref가 들어갔음에도 에러가 발생하지 않는다"}),"\n",p.createElement(s.p,null,"이런 일이 발생한 이유는 아직 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forwardRef</code>'}}),"에 대한 타입이 모호하기 때문이다. 제대로 정의된 것 처럼 보이지만 제네릭은 함수 파라메터에만 적용되었을 뿐 함수 자체엔 적용되지 않았다. 따라서 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forwardRef</code>'}}),"에 대한 제네릭 타입 정의가 필요하다. 타입 정의를 위해 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forwardRef</code>'}})," 함수가 어떻게 정의되었는지 확인해보자."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forwardRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>render<span class="token operator">:</span> ForwardRefRenderFunction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> ForwardRefExoticComponent<span class="token operator">&lt;</span>PropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span> <span class="token operator">&amp;</span> RefAttributes<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ForwardRefExoticComponent<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span></span> <span class="token keyword">extends</span> <span class="token class-name">NamedExoticComponent<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  defaultProps<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  propTypes<span class="token operator">?</span><span class="token operator">:</span> WeakValidationMap<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">NamedExoticComponent<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span></span> <span class="token keyword">extends</span> <span class="token class-name">ExoticComponent<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  displayName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ExoticComponent<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>ReactElement<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token builtin">symbol</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"여기서 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forwardRef</code>'}})," 함수의 반환 타입을 살펴보면 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ForwardRefExoticComponent&lt;PropsWithoutRef&lt;P> &amp; RefAttributes&lt;T>></code>'}}),"으로 되어있다. ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ForwardRefExoticComponent</code>'}}),"는 최종적으로 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ExoticComponent</code>'}})," 인터페이스를 상속받는데 내용을 살펴보면 결국 함수 컴포넌트의 형태가 되는 것을 알 수 있다."),"\n",p.createElement(s.p,null,"따라서 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PropsWithoutRef&lt;P> &amp; RefAttributes&lt;T></code>'}}),"를 View 컴포넌트의 타입으로 만들어주면 된다. ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RefAttributes</code>'}}),"는 다음과 같이 정의되어 있다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">RefAttributes<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Attributes</span> <span class="token punctuation">{</span>\n  ref<span class="token operator">?</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ComponentPropsWithRef</code>'}}),"에는 이미 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RefAttributes</code>'}}),"이 결합되어 있기 때문에 다음과 같이 선언하여 View 컴포넌트를 완성할 수 있다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">ViewComponent</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">"div"</span><span class="token operator">></span><span class="token punctuation">(</span>\n  props<span class="token operator">:</span> ViewProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">></span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    ref<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"ref"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> React<span class="token punctuation">.</span>ReactElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> View<span class="token operator">:</span> ViewComponent <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">"div"</span><span class="token operator">></span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> ViewProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\n    ref<span class="token operator">:</span> React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"ref"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> Element <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">"div"</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"위 코드를 반영하고나서 다시 App 컴포넌트를 확인하면 ref의 타입을 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HTMLDivElement</code>'}}),"로 사용하여 컴포넌트 타입과 일치하지 않기 때문에 에러가 발생하는 것을 확인할 수 있다."),"\n",p.createElement(e.A,{src:"/images/2022-08-16-polymorphic-react-component/error-message-2.png",caption:"잘못된 ref가 들어가 에러가 발생한다"}),"\n",p.createElement(s.p,null,"이제 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useRef</code>'}}),"의 제네릭 타입을 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HTMLAnchorElement</code>'}}),"로 변경해주면 정상적으로 실행되는 것을 볼 수 있다."),"\n",p.createElement(s.h2,{id:"범용성-있게-사용하기"},p.createElement(s.a,{href:"#범용성-있게-사용하기"},"범용성 있게 사용하기")),"\n",p.createElement(s.p,null,"여기까지 왔으면 대체로 복잡한 내용은 끝난 셈이다. 지금까지는 View 컴포넌트만을 위하여 타입을 정의했는데 타입을 한 단계 더 추상화하여 조금 더 범용적으로 쓸 수 있게 만들어보자."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// 기존 작성한 ViewProps에서 as를 분리한다.</span>\n<span class="token keyword">type</span> <span class="token class-name">AsProp<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 직관적인 이름을 붙여서 타입으로 만들어준다.</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">></span></span> <span class="token operator">=</span>\n  React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"ref"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 결합 타입을 만든다.</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentProps<span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span>\n  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token operator">></span></span> <span class="token operator">=</span> AsProp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">&amp;</span> Props <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"기존 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ViewProps</code>'}})," 타입을 분해하고 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PolymorphicComponentProps</code>'}}),"라는 제네릭 타입을 만들어서 필요한 속성을 추가할 수 있도록 만들었다. 이렇게 만든 타입을 통해 새로운 컴포넌트를 만들어보자."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">_TextProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">></span></span> <span class="token operator">=</span> \n  PolymorphicComponentProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> _TextProps<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TextComponent</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">"span"</span><span class="token operator">></span><span class="token punctuation">(</span>\n  props<span class="token operator">:</span> TextProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> React<span class="token punctuation">.</span>ReactElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> Text<span class="token operator">:</span> TextComponent <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">"span"</span><span class="token operator">></span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> TextProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\n    ref<span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"ref"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> Element <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">"span"</span><span class="token punctuation">;</span>\n    <span class="token comment">// size와 color를 style로 적용</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> size<span class="token punctuation">,</span> color <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PolymorphicComponentProps</code>'}}),"를 통해 속성 확장 가능한 Polymorphic 컴포넌트를 아주 쉽게 만들어냈다. 여기서는 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">size</code>'}}),"와 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">color</code>'}}),"를 새롭게 추가했다. 다음과 같이 사용할 수 있다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Link\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Text\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"결과 화면을 살펴보면 다음과 같이 제대로 적용된 것을 확인할 수 있다."),"\n",p.createElement(e.A,{src:"/images/2022-08-16-polymorphic-react-component/result.png",caption:"업데이트가 거슬리는 분께는 심심한 사과를 드린다"}),"\n",p.createElement(s.h1,{id:"마치며"},p.createElement(s.a,{href:"#마치며"},"마치며")),"\n",p.createElement(s.p,null,"이렇게 꽤 다양한 곳에서 활용 가능한 Polymorphic 컴포넌트를 구현할 수 있다. 이런 컴포넌트를 만드는 패턴은 요즘 유행하는 UI 라이브러리에선 대부분 사용하고 있기 때문에 알아두면 도움이 될 것이다. 이 포스팅을 통해 만들어진 최종적인 코드는 ",p.createElement(s.a,{href:"https://github.com/kciter/polymorphic-react-component-sample",rel:"nofollow noopener noreferrer"},"GitHub 저장소"),"에서 확인할 수 있다."),"\n",p.createElement(s.p,null,"아직 글 서두에서 소개한 MUI의 ",p.createElement(s.a,{href:"https://mui.com/material-ui/react-box/",rel:"nofollow noopener noreferrer"},"Box")," 컴포넌트나 Mantine의 ",p.createElement(s.a,{href:"https://mantine.dev/core/box/",rel:"nofollow noopener noreferrer"},"Box")," 컴포넌트처럼 ",p.createElement(s.strong,null,"스타일 확장 가능한 컴포넌트"),"까지는 다루지 못했다. 원래 이 부분까지 다루는 것이 필자의 목표였으나 너무 길어져서 완성하는데 오래걸릴 것 같아 쓰지 못했지만 빠른 시일 내에 추가로 글을 작성할 예정이다."),"\n",p.createElement(s.section,{"data-footnotes":!0,className:"footnotes"},p.createElement(s.h2,{className:"sr-only",id:"footnote-label"},p.createElement(s.a,{href:"#footnote-label"},"Footnotes")),"\n",p.createElement(s.ol,null,"\n",p.createElement(s.li,{id:"user-content-fn-1"},"\n",p.createElement(s.p,null,"Visual Studio 계열 IDE에서 제공하는 자동 완성 기능 ",p.createElement(s.a,{href:"#user-content-fnref-1","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n"),"\n"))}s.default=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.R)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)}},5799:function(n,s,a){var t=a(9474),p=a(1615),e=a(6810);s.A=n=>{let{src:s,caption:a,width:o,expandable:c}=n;const{0:l,1:r}=(0,t.useState)(!1);return(0,e.Y)("figure",null,(0,e.Y)("img",{src:s,width:o,style:{cursor:c?"zoom-in":"default"},onClick:c?()=>r(!0):void 0}),a&&(0,e.Y)("figcaption",{dangerouslySetInnerHTML:{__html:a}}),l&&p.createPortal((0,e.Y)("div",{style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"zoom-out",backgroundColor:"rgba(0, 0, 0, 0.7)"},onClick:()=>r(!1)},(0,e.Y)("div",{style:{borderRadius:8,maxWidth:1200,width:"80%",position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white"}},(0,e.Y)("img",{src:s,width:"100%"}))),document.body))}},9128:function(n,s,a){a.d(s,{R:function(){return o}});var t=a(9474);const p={},e=t.createContext(p);function o(n){const s=t.useContext(e);return t.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}}}]);
//# sourceMappingURL=191a4eae755f754e3e6a0bc6da1ca3bcbdffa4c1-6da8383913f6f8caf021.js.map