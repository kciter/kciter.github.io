{"version":3,"file":"component---src-posts-2024-06-08-log-1-mdx-3e794cb1422429da9974.js","mappings":"iRAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,qLAAsL,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,+LAAgM,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0LAA2L,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,mLAC1xB,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECeA,MAAMU,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://kciter.so/./src/posts/2024-06-08-log-1.mdx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"말(言)이라는 한자를 풀어내면 머리(亠)로 두 번(二) 생각하고 입(口)으로 내보내라는 뜻이라고 합니다. 글을 쓰는 것 또한 말처럼 조심해야 한다고 생각합니다.나의 잘못된 지식이 전파되는 것은 많은 사람에게 피해를 입힐 수 있고 바로잡는 것은 더 어렵기 때문입니다. 따라서 글쓰기는 저에게 항상 부담되는 일이었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"[제럴드 와인버그의 글쓰기책]에선 ‘자연석 기법’이라는 것을 소개합니다. 자연석 기법은 길가에서 볼 수 있는 자연석 돌담을 쌓을 때처럼 적절한 자연석을 찾는다면 정리해서 다듬고 쌓는 기법을 말합니다. 하지만 쌓이기만 한 자연석은 언젠가 풍화되어 사라집니다. 즉, 글을 쓰지 않으면 아무리 좋은 영감, 깨달음을 얻어도 사라진다는 뜻이죠.\"), \"\\n\", React.createElement(_components.p, null, \"최근에는 서로 개발 이야기를 할 수 있는 좋은 친구가 생겼습니다. 간단한 주제부터 함부로 얘기하기 어려운 주제까지 편하게 얘기하며 즐거움을 느꼈지만 대화 내용이 그저 흘러가듯 사라지는 것이 아쉽게 느껴졌습니다. 저는 친구와의 대화와 토론에서 얻은 깨달음이 정제되지 않은 자연석이라 느꼈고 시간이 지나면서 풍화된다고 느꼈습니다.\"), \"\\n\", React.createElement(_components.p, null, \"어떻게 할지 고민하던 중 다른 친구에게서 SNS에 짧게 글을 쓰면 괜찮지 않겠느냐는 말을 들었습니다. 평소 저 또한 SNS에서 좋은 지식을 공유해주시는 분들에게서 영감을 얻는 경우가 많습니다. SNS에 짧은 의견을 남긴 적은 거의 없어 어색하게 느껴지지만 자연석이 풍화되기 전에 돌담에 쌓아야겠다는 생각이 듭니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}