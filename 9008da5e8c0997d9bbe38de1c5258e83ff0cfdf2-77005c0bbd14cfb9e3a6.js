"use strict";(self.webpackChunkkciter_so=self.webpackChunkkciter_so||[]).push([[9178],{3941:function(n,s,a){a.r(s);var t=a(9128),e=a(9474),p=a(5799);function o(n){const s=Object.assign({p:"p",span:"span",h1:"h1",a:"a",blockquote:"blockquote",strong:"strong",ol:"ol",li:"li",sup:"sup",h2:"h2",ul:"ul",section:"section"},(0,t.R)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"최근 몇 년 사이에 브라우저 혹은 OS에서 제공하는 비밀 관리 시스템을 이용하는 사람이 많아졌다. 혹은 1Password 같은 애플리케이션을 이용하는 사람도 적지 않다."),"\n",e.createElement(s.p,null,"이런 제품을 사용한다면 한 번쯤 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">정말 안전한 게 맞을까?</code>'}}),"라는 의심을 해본 적이 있을 것이다. 이번 글에서는 금고 시스템이라고도 부르는 비밀 관리 시스템이 안전한 이유를 알아보고 금고 시스템을 직접 구현해 볼 것이다."),"\n",e.createElement(s.h1,{id:"암호화에-대한-정의"},e.createElement(s.a,{href:"#암호화에-대한-정의"},"암호화에 대한 정의")),"\n",e.createElement(s.p,null,"이 글에 관심을 가진 개발자라면 대부분 암호화가 무엇인지 대략 알고 있을 것이다. 당연하지만 암호라는 것은 오래전부터 사용되어 왔고 많은 시행착오와 발전을 거쳐 개발 세계에 도입된 것이다. 그러니 먼저 암호화의 정의에 대해 알아보자."),"\n",e.createElement(s.blockquote,null,"\n",e.createElement(s.p,null,"암호학은 방해 행위로부터 ",e.createElement(s.strong,null,"프로토콜"),"을 방어하는 것을 목표로 하는 과학이다. (...)",e.createElement("br"),"\n당신은 몇 시간 정도 마법검을 내려놓고 낮잠을 좀 자고 싶다. 이를 위한 프로토콜을 한 가지 구성해보면 다음과 같다."),"\n",e.createElement(s.ol,null,"\n",e.createElement(s.li,null,"땅에 무기를 내려 놓는다."),"\n",e.createElement(s.li,null,"나무 아래서 낮잠을 잔다."),"\n",e.createElement(s.li,null,"땅에서 무기를 들어 올린다."),"\n"),"\n",e.createElement(s.p,null,"물론 이는 좋은 프로토콜이 아니다. 낮잠을 자는 사이 누군가가 마법검을 훔칠 수 있기 때문이다. 여기서 암호학의 역할을 마법검을 훔쳐가려는 적의 존재를 고려하는 것이다.",e.createElement("br"),"\n",e.createElement("div",{style:{textAlign:"right"}}," - 리얼월드 암호학 1장 4쪽")),"\n"),"\n",e.createElement(s.p,null,"위와 같이 ",e.createElement(s.strong,null,"비우호적인 존재로부터 프로토콜을 방어하는 것이 암호학의 목표"),"라고 할 수 있다. 조금 더 단순하게 표현하자면 타인이 알 수 없도록 평문(Plain text)를 암호문(Cipher text)으로 바꿔서 전달하는 것을 의미한다."),"\n",e.createElement(s.p,null,"간단한 사례를 살펴보면 원시적인 암호화 방법으로 ",e.createElement("strong",null,"카이사르 암호(시저 암호)"),"라는 것이 있다. 카이사르 암호는 ",e.createElement(s.a,{href:"https://ko.wikipedia.org/wiki/%EC%B9%98%ED%99%98_%EC%95%94%ED%98%B8",rel:"nofollow noopener noreferrer"},"치환 암호"),"의 일종으로 암호화하고자 하는 내용을 알파벳별로 일정한 거리만큼 밀어서 다른 알파벳으로 치환하는 방식이다. 예를 들어 3글자씩 밀어내는 카이사르 암호로 'COME TO ROME'을 암호화하면 'FRPH WR URPH'가 된다. 이렇게 암호화된 문장을 다시 복호화하려면 암호화할 때와 같은 거리만큼 밀어내면 된다. 여기서 ",e.createElement(s.strong,null,"프로토콜은 문장을 다른 사람에게 전달하는 것이고 3글자씩 밀어낸다는 것이 암호화의 핵심"),"이다. 물론 이런 방식은 매우 취약하기에 현대에선 사용되지 않는다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/caesar-cipher.png",caption:"카이사르 암호는 각각의 알파벳을 일정한 거리만큼 밀어 글자를 치환하는 방식으로 암호화한다",width:"80%"}),"\n",e.createElement(s.p,null,"만약 스포츠를 좋아한다면 실시간으로 전략을 정할 때 사인을 보낸다는 것을 알고 있을 것이다. 이때 전략이 유출되면 안 되기 때문에 팀 내에서 수신호의 의미를 정하고 외부에 공개하지 않는다. 그렇지만 상대편 또한 의미를 해석하려 하기에 키 사인(Key sign)을 사용하여 숨기기도 한다. 이 또한 암호화의 한 형태라고 할 수 있다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/sport-sign.jpeg",caption:"다른 사람들은 이 수신호의 의미를 알 수 없다"}),"\n",e.createElement(s.p,null,"이런 단순한 형태의 암호화를 거쳐 오늘날의 암호화는 복잡하고 검증된 알고리즘을 사용한다. 이런 알고리즘을 이용하면 비밀 관리 시스템을 만드는 것도 가능하다. 이 글에서는 ",e.createElement("strong",null,"프로토콜을 어떻게 안전하게 만들 것인가?"),"를 다루는 것이 목적이며 알고리즘이 어떻게 이루어지는지는 다루지 않을 것이다. 따라서 복잡한 수학적인 지식은 필요하지 않다."),"\n",e.createElement(s.h1,{id:"케르크호프스의-원칙"},e.createElement(s.a,{href:"#케르크호프스의-원칙"},"케르크호프스의 원칙")),"\n",e.createElement(s.blockquote,null,"\n",e.createElement(s.p,null,"공개된 암호화 표준을 구축하는 것은 케르크호프스의 원칙이라는 개념과 관련이 있다.\n이 원칙은 대략 다음과 같다 '우리가 가장 많이 사용하는 알고리즘을 적이 발견하지 못하리라고 기대하는 것은 어리석은 일이다. 차라리 적에게 공개적으로 개방하자'",e.createElement("br"),"\n",e.createElement("div",{style:{textAlign:"right"}}," - 리얼월드 암호학 1장 9쪽")),"\n"),"\n",e.createElement(s.p,null,"카이사르 암호나 스포츠에서 사용되는 사인과 다르게 프로그래밍에 쓰이는 암호화 관련 알고리즘은 대부분 공개되어 있다. 앞서 소개한 사례는 알고리즘이 유출되는 경우 너무나도 쉽게 복호화가 가능하다. 그러니 ",e.createElement("strong",null,"알고리즘이 공개되었는데 정말 안전한가?"),"라는 의문이 충분히 들 수 있다. 결론부터 말하자면 최소한 요즘 프로그래밍에 사용되는 알고리즘은 안전하다고 말할 수 있다."),"\n",e.createElement(s.p,null,"케르크호프스 혹은 커코프라 불리는 원칙은 Auguste Kerckhoffs가 작성한 글인 군사용 암호 설계 원칙을 살펴보자. 한국어 위키백과에 실린 내용은 다음과 같다."),"\n",e.createElement(s.ol,null,"\n",e.createElement(s.li,null,"암호체계는 수학적으로는 해독불가능하지 않다고 하더라도, 실질적으로 그래야한다."),"\n",e.createElement(s.li,null,e.createElement(s.strong,null,"암호체계는 비밀에 부쳐질 필요가 없어야만 하며, 적의 손에 떨어지더라도 문제가 없어야 한다.")),"\n",e.createElement(s.li,null,"키는 글로 쓰여지지 않더라도 교환 혹은 보관할 수 있어야 한다. 당사자들의 의지에 의해서 바뀌거나 수정될 수 있어야 한다."),"\n",e.createElement(s.li,null,"전신에 적용할 수 있어야 한다."),"\n",e.createElement(s.li,null,"이동이 가능해야하며, 암호 체계의 사용과 기능을 위해 여러 사람의 협력을 필요로 하지 않아야 한다."),"\n",e.createElement(s.li,null,"마지막으로, 시스템의 활용을 요구하는 여러 상황들이 주어졌을 때, 암호 체계는 이용이 쉬워야 하며, 정신적인 압박감이나 여러 규칙들의 관찰을 필요로 하지 않아야 한다."),"\n"),"\n",e.createElement(s.p,null,"이 중 두 번째 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">암호체계는 비밀에 부쳐질 필요가 없어야만 하며, 적의 손에 떨어지더라도 문제가 없어야 한다</code>'}}),"가 케르크호프스의 원칙으로 알려졌으며 소프트웨어적으로 표현한다면 암호화 알고리즘이 노출되더라도 안전해야 한다고 할 수 있다. 이 말처럼 이미 HTTPS나 이 글에서 다루는 비밀 관리 시스템 등 많은 영역에서 AES, RSA 등 공개된 암호화 알고리즘을 사용하지만 충분히 안전하다."),"\n",e.createElement(s.p,null,"알고리즘이 공개되어도 안전할 수 있는 이유는 ",e.createElement(s.strong,null,"비밀 키"),"에 있다. 현대에서 사용되는 대부분의 알고리즘은 비밀 키를 다른 사람이 모른다면 알고리즘이 알려지더라도 암호문을 안전하게 전달할 수 있다. 즉, 비밀 키를 통해 ",e.createElement(s.strong,null,"알고리즘이 아닌 프로토콜을 안전하게 만드는 것"),"이다. 그러니 오히려 ",e.createElement(s.strong,null,"알고리즘을 공개하여 더 많은 사람들이 검증하고 개선할 수 있도록 하는 것"),"이 더 안전하다고 할 수 있다. 우리가 사용하는 암호화 알고리즘은 많은 사람들이 허점을 찾는 것에 도전했으며 그 많은 도전을 이겨내고 남은 것이다."),"\n",e.createElement(s.h1,{id:"고전-암호는-왜-위험한가"},e.createElement(s.a,{href:"#고전-암호는-왜-위험한가"},"고전 암호는 왜 위험한가?")),"\n",e.createElement(s.p,null,"말은 쉽지만 공개되어도 안전한 알고리즘을 만드는 것은 쉬운 일이 아니다. 오늘날의 컴퓨터는 사람이 절대 따라갈 수 없는 엄청난 연산량을 가지고 있다. 반면 컴퓨터가 등장하기 전 고전 암호라 불리는 암호 체계는 이러한 연산량을 고려하여 탄생하지 않았다."),"\n",e.createElement(s.p,null,"예를 들어 앞서 사용했던 카이사르 암호는 특정한 숫자를 비밀 키로 사용하여 알파벳을 밀어내지만 비밀 키를 모르더라도 해독하는 것이 어렵지 않다. 알파벳은 겨우 26개이기 때문에 모든 경우의 수를 다 해보면 쉽게 해독할 수 있고 컴퓨터는 26개 정도는 순식간에 처리할 수 있다."),"\n",e.createElement(s.p,null,"그러면 조금 더 복잡한 고전 암호는 어떨까? 16세기에 지오반 바티스타 벨라소라는 이탈리아인이 만든 비즈네르 암호가 있다.",e.createElement(s.sup,null,e.createElement(s.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"1"))," 원리는 카이사르 암호와 비슷하지만 키와 알고리즘이 조금 더 복잡하다. 만약 키가 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DUF</code>'}}),"고 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HI THERE</code>'}}),"이라는 문장을 암호화한다면 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">KU VJZUJ</code>'}}),"가 된다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/vigenere-cipher.png",caption:"키가 DUF인 경우"}),"\n",e.createElement(s.p,null,"이 암호의 핵심은 키에 해당하는 알파벳 위치가 특정수를 나타내고 그 수만큼 평문을 연쇄적으로 밀어내는 것이다. 따라서 D, U, F는 각각 3, 20, 5를 의미하고 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HI THERE</code>'}}),"을 3-20-5-3-20.. 순으로 밀어내면 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">KU VJZUJ</code>'}}),"가 된다. 비즈네르 암호는 키의 길이가 고정이 아니기 때문에 사람 손으로 해독하기엔 많은 경우의 수를 고려해야해서 어려울 것이다."),"\n",e.createElement(s.p,null,"다만 컴퓨터 입장에서 그다지 어렵지 않다. ",e.createElement(s.a,{href:"https://ko.wikipedia.org/wiki/%EB%B9%88%EB%8F%84%EB%B6%84%EC%84%9D",rel:"nofollow noopener noreferrer"},"빈도분석"),"을 이용하면 쉽게 해독할 수 있다. 빈도분석은 언어에서 글자들의 분포가 고르지 않다는 점을 활용한다. 예를 들어 영어에서는 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">E</code>'}}),"가 가장 많이 나오는 글자이고 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Q</code>'}}),"가 가장 적게 나오는 글자이다. 따라서 암호문에서 가장 많이 나오는 글자를 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">E</code>'}}),"로 해석하고 가장 적게 나오는 글자를 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Q</code>'}}),"로 해석하면서 해독해 나가면 된다. 그리고 이러한 확률적인 계산과 반복적인 대입은 컴퓨터가 쉽게 할 수 있는 일이다."),"\n",e.createElement(s.blockquote,null,"\n",e.createElement(s.p,null,"비즈네르 암호는 이처럼 비교적 약한 암호이지만, 실제로 쓰이던 시절에는 메시지를 안전하게 암호화하는 용도로 충분히 쓸만했을 것이다. (...) 당시 비밀리에 전송한 메시지들은 대부분 아주 짧은 기간만 비밀을 유지하면 되었다. 따라서 언젠가 적이 암호를 해독한다고 해도 문제가 되지 않았다.\n",e.createElement("div",{style:{textAlign:"right"}}," - 리얼월드 암호학 1장 33쪽")),"\n"),"\n",e.createElement(s.h1,{id:"그러면-현대-암호는-안전한가"},e.createElement(s.a,{href:"#그러면-현대-암호는-안전한가"},"그러면 현대 암호는 안전한가?")),"\n",e.createElement(s.p,null,"고전 암호는 전수 키 탐색, 빈도 수 공격 등에 매우 취약하다. 특히 카이사르 암호와 같이 키 공간",e.createElement(s.sup,null,e.createElement(s.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"2")),"이 부족하고 언어적 특성이 바로 반영되는 경우엔 암호로서 큰 의미가 없다고 볼 수 있다. 그럼 현대 암호는 뭐가 다를까?"),"\n",e.createElement(s.p,null,"예를 들어 현대에 사용되는 대칭 암호화는 ",e.createElement(s.strong,null,"혼돈과 확산"),"이라는 개념을 극대화한 알고리즘을 사용한다. 혼돈과 확산은 정보 이론의 창시자라 할 수 있는 클로드 섀넌이 제시했으며 혼돈은 ",e.createElement(s.strong,null,"암호문에서 키를 알아내기 어렵게 하는 성질"),"을 말하며 확산은 ",e.createElement(s.strong,null,"암호문에서 원본 메세지를 알아내기 어렵게 하는 성질"),"을 말한다. 현대 암호는 이를 잘 달성했는지 여부가 암호화의 안전성을 판단하는 기준이 된다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/confusion-and-diffusion.jpg",caption:"인크립션: 실용주의 암호화 / 길벗",width:"80%"}),"\n",e.createElement(s.p,null,"그러면 혼돈과 확산은 어떻게 달성하는가? 혼돈은 원래 대상과 다른 대상을 섞어 원래 대상이 무엇인지 알아볼 수 없만들고 확산은 원래 대상이 암호문에서 최대한 넓은 부분으로 퍼지도록 만든다. 이때 혼돈을 달성하기 위해 ",e.createElement(s.strong,null,"Substitution"),e.createElement("sup",null,"대체"),"을 사용하고 확산을 달성하기 위해 ",e.createElement(s.strong,null,"Permutation"),e.createElement("sup",null,"순열"),"을 사용한다. 말 그대로 Substitution은 'ABCA'와 같은 문자열이 있다면 '1231'과 같이 대체하는 것을 말하고 Permutation은 'ABCA'와 같은 문자열이 있다면 'BCAA'와 같이 순서를 바꾸는 것을 말한다."),"\n",e.createElement(s.p,null,"Substitution과 Permutation을 한 번 수행하는 것을 SPN(Substitution-Permutation Network)이라고 하며 현대 암호는 SPN을 여러번 반복하는 것으로 어마어마한 경우의 수를 만들어낸다. 즉, 원본 키에 대한 혼돈과 확산을 적용하여 원본을 알아낼 수 없을 정도로 어마어마한 경우의 수를 만들어 컴퓨터의 엄청난 연산량으로도 복호화를 해내지 못하게 만든다면 충분한 안정성을 달성했다고 볼 수 있다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/rubber-hose-cryptanalysis.webp",caption:"이런 경우를 제외하면 복호화는 불가능하다 / 고무호스 암호분석"}),"\n",e.createElement(s.h1,{id:"세-가지-암호화-방식"},e.createElement(s.a,{href:"#세-가지-암호화-방식"},"세 가지 암호화 방식")),"\n",e.createElement(s.p,null,"보통 현대적인 암호화 알고리즘은 세 가지 방식으로 나뉜다. 각각 ",e.createElement(s.strong,null,"대칭 암호화, 비대칭 암호화, 해싱"),"으로 이 세 가지 방식은 각각 다른 목적으로 사용되며 서로 다른 특징을 가지고 있다."),"\n",e.createElement(s.h2,{id:"대칭-암호화"},e.createElement(s.a,{href:"#대칭-암호화"},"대칭 암호화")),"\n",e.createElement(s.p,null,"대칭 암호화(Symmetric Encryption)는 ",e.createElement(s.strong,null,"하나의 비밀 키(혹은 대칭 키)를 이용하여 암호화하고 복호화하는 알고리즘"),"을 의미한다. 앞서 소개한 모든 암호 알고리즘은 대칭 암호화에 속한다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/symmetric-key-algorithm.png"}),"\n",e.createElement(s.p,null,"보통 블록 암호화 알고리즘인 ",e.createElement(s.strong,null,"AES 알고리즘"),e.createElement(s.sup,null,e.createElement(s.a,{href:"#user-content-fn-3",id:"user-content-fnref-3","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"3")),"을 사용하는 경우가 많다. 여기서 해당 알고리즘의 자세한 동작을 설명하지는 않을 것이다. 만약 AES 알고리즘 동작을 알고 싶다면 시각화가 잘 되어있는 ",e.createElement(s.a,{href:"https://www.youtube.com/watch?v=mlzxpkdXP58",rel:"nofollow noopener noreferrer"},"유튜브 영상"),"을 살펴보자."),"\n",e.createElement(s.p,null,"참고로 대칭 암호화로 AES를 사용한다면 비밀 키를 탈취당하는 것을 제외하고 사실상 복호화가 불가능하다. 앞서 설명한 SPN을 여러번 실행하기 때문에 원본 키를 알아내는 것은 거의 불가능하므로 무차별 대입으로 전수 키 조사를 하는 것이 그나마 실질적인 공격이라 할 수 있다. 충분히 복잡하고 긴 키를 사용하는 경우 슈퍼 컴퓨터가 오더라도 의미있는 시간",e.createElement(s.sup,null,e.createElement(s.a,{href:"#user-content-fn-4",id:"user-content-fnref-4","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"4"))," 내에 복호화할 수 없다."),"\n",e.createElement(s.h2,{id:"비대칭-암호화"},e.createElement(s.a,{href:"#비대칭-암호화"},"비대칭 암호화")),"\n",e.createElement(s.p,null,"비대칭 암호화(Asymmetric Encryption)는 ",e.createElement(s.strong,null,"두 개의 키를 이용하여 암호화하고 복호화하는 알고리즘"),"을 의미한다. 이 두 개의 키는 서로 다르며 하나는 공개 키(Public Key)이고 다른 하나는 개인 키(Private Key)라고 부른다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/asymmetric-key-algorithm.png"}),"\n",e.createElement(s.p,null,"공개 키는 누구나 알 수 있지만 개인 키는 오직 소유자만 알 수 있다. 이 두 키를 이용하여 암호화하면 공개 키로 암호화한 것은 개인 키로만 복호화할 수 있고 개인 키로 암호화한 것은 공개 키로만 복호화할 수 있다. 이를 이용하여 안전하게 통신 할 수 있다. 이미 대칭 암호화가 있는데 왜 비대칭 암호화를 사용할까?"),"\n",e.createElement(s.p,null,"대칭 암호화는 서로 암호를 주고 받기 위해서 최소한 한 번은 비밀 키를 공유할 필요가 있다. 이는 많은 사례에 적합하지만 참여자가 많은 경우엔 문제가 생긴다. 참여자 중 한명이 비밀 키를 유출하지 않으리라는 보장을 할 수 있을까? 현실적으로는 불가능하다. 따라서 만약 많은 사용자가 접속하는 웹사이트에 암호문을 전달해야 한다면 대칭 암호화는 사실상 의미가 없다. 그래서 비대칭 암호화가 필요해졌다. 참고로 이러한 문제를 ",e.createElement(s.strong,null,"Key Distribution"),e.createElement("sup",null,"키 배포"),"라고 한다. 이 문제는 오랫동안 난제였지만 디피-헬먼 키 교환 알고리즘을 거쳐 ",e.createElement(s.strong,null,"RSA 알고리즘"),e.createElement(s.sup,null,e.createElement(s.a,{href:"#user-content-fn-5",id:"user-content-fnref-5","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"5")),"을 통해 해결되었다."),"\n",e.createElement(s.p,null,"다시 설명으로 돌아와 비대칭 암호화는 받을 대상의 공개 키로 암호화 할 수 있으므로 누구나 암호화할 수 있지만 복호화는 오직 받을 대상의 개인 키로만 가능하다. 따라서 참여자가 많더라도 안전하게 통신할 수 있다."),"\n",e.createElement(s.h2,{id:"해싱"},e.createElement(s.a,{href:"#해싱"},"해싱")),"\n",e.createElement(s.p,null,"해싱은 엄밀히 암호화는 아니며 ",e.createElement(s.strong,null,"임의의 길이의 데이터를 고정된 길이의 데이터로 변환하는 것"),"을 의미한다. 이 변환된 데이터를 해시 값이라고 부르며 해시 함수를 이용하여 변환한다. 해싱은 앞서 소개한 암호화와는 다르게 ",e.createElement(s.strong,null,"복호화가 불가능"),"하다. 즉, 해시 값으로 원본 데이터를 알아낼 수 없다. 그럼 보안 측면에서 해싱을 사용하는 의미가 있을까?"),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/hashing-algorithm-1.png"}),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/hashing-algorithm-2.png",caption:"앞서 저장한 것을 검증할 수 있다"}),"\n",e.createElement(s.p,null,"해싱은 ",e.createElement(s.strong,null,"무결성 검증"),"에 사용할 수 있다. 무결성 검증이란 데이터가 변조되지 않았는지 확인하는 것을 의미한다. 예를 들어 파일을 다운로드 받을 때 파일의 해시 값을 함께 제공하면 다운로드 받은 파일이 변조되지 않았는지 확인할 수 있다. 또한, 비밀번호를 저장할 때도 해싱을 사용한다. 비밀번호를 해싱하여 저장하면 원본 비밀번호를 알 수 없으며 해시 값만 알 수 있다. 따라서 해시 값이 유출되더라도 원본 비밀번호를 알 수 없다."),"\n",e.createElement(s.p,null,"해싱 함수 중에는 대표적으로 SHA",e.createElement(s.sup,null,e.createElement(s.a,{href:"#user-content-fn-6",id:"user-content-fnref-6","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"6")),"가 있다. SHA-1, SHA-256, SHA-512 등이 있으며 각각 160비트, 256비트, 512비트의 해시 값을 생성한다. 이 중 SHA-256은 안정성과 성능을 고려하여 현재 많이 사용되는 해싱 함수다. 다만, ",e.createElement(s.strong,null,"레인보우 테이블"),"이나 ",e.createElement(s.strong,null,"해시 충돌")," 등의 공격을 당할 수 있기에 복호화가 불가능하다해서 해싱이 안전하다고 볼 수는 없다. 따라서 ",e.createElement("strong",null,"솔트",e.createElement("sup",null,"Salt"),"와 키 스트레칭",e.createElement("sup",null,"Key Stretching")),"을 사용하여 보완해야 한다."),"\n",e.createElement(s.p,null,"솔트는 재료에 소금을 곁을여 먹는 것에 비유한 것으로 평문에 임의의 문자열을 추가하여 암호화하는 방법을 말한다. 그리고 키 스트레칭은 해시를 여러번 반복하여 원문을 알기 힘들게 만드는 방법이다. 이런 방법을 사용하면 공격자가 해싱 알고리즘을 실행하는 데에 시간이 오래걸리므로 암호화 해독이 어려워진다. 해싱 함수와 솔트, 키 스트레칭을 묶은 Bcrypt, PBKDF2 등의 알고리즘이 있다."),"\n",e.createElement(s.h1,{id:"개인-금고"},e.createElement(s.a,{href:"#개인-금고"},"개인 금고")),"\n",e.createElement(s.p,null,"이제 본격적으로 비밀 관리 시스템과 연관된 개인 금고를 구현해볼 것이다."),"\n","\n",e.createElement(s.p,null,"가벼운 개인 금고 시스템 구현은 기본적으로 두 가지 개념만 알아도 된다. 바로 ",e.createElement(s.strong,null,"마스터 패스워드"),"와 ",e.createElement(s.strong,null,"대칭 암호화"),"다. 실제 제품에는 보안을 위해 더 많은 기술이 필요하겠지만 가장 핵심적인 기술은 이 두 가지라고 할 수 있다."),"\n",e.createElement(s.h2,{id:"마스터-패스워드"},e.createElement(s.a,{href:"#마스터-패스워드"},"마스터 패스워드")),"\n",e.createElement(s.p,null,e.createElement(s.strong,null,"마스터 패스워드는 비밀번화 관리 시스템의 주인임을 인증할 수 있는 비밀 키"),"를 의미한다. 사용자는 마스터 패스워드를 통해 비밀 관리 시스템 인증을 통과하고 비밀을 보관하거나 확인할 수 있다. 이말은 ",e.createElement(s.strong,null,"마스터 패스워드가 유출되면 모든 비밀번호가 유출"),"된다는 것을 의미한다. 또한, 유실한 경우 저장된 모든 비밀을 알 수 없게 되버린다. 따라서 마스터 패스워드는 안전하게 보관해야 한다. 다만, 유실의 경우 다른 특수한 방법을 사용하여 복구하는 방법이 있을 수 있다."),"\n",e.createElement(s.p,null,"보통 사용자가 입력한 마스터 패스워드는 해시를 만든 후 진짜 사용자인지 인증하는 데에 사용한다. 즉, 웹사이트에 사용하는 비밀번호와 크게 다르지 않다. 다만, 아무래도 마스터 패스워드는 모든 비밀을 관리하는 열쇠이기에 더욱 안전하게 만들고 보관해야 한다."),"\n",e.createElement(s.p,null,"마스터 패스워드를 비롯하여 안전한 비밀번호는 다음과 같은 특징을 가지고 있다. 만약 비밀 관리 시스템을 사용하다면 가급적 다음 수칙을 지키는 것이 좋다."),"\n",e.createElement(s.ol,null,"\n",e.createElement(s.li,null,"최소 16자 이상 - 길이가 길수록 안전하다"),"\n",e.createElement(s.li,null,"재사용된 비밀번호가 아닐 것 - 다른 웹사이트에서 사용한 비밀번호를 사용하지 않을 것"),"\n",e.createElement(s.li,null,"복잡성을 가질 것 - 대소문자, 숫자, 특수문자를 조합하여 사용"),"\n",e.createElement(s.li,null,"개인 정보가 포함되지 않을 것 - 이름, 생일, 주소 등 개인 정보가 포함되지 않을 것"),"\n",e.createElement(s.li,null,"사전에 등록된 단어가 아닐 것 - Dictionary Attack을 방지하기 위해 사전에 등록된 단어가 아닐 것"),"\n"),"\n",e.createElement(s.h2,{id:"비밀-저장하기"},e.createElement(s.a,{href:"#비밀-저장하기"},"비밀 저장하기")),"\n",e.createElement(s.p,null,"보관할 비밀은 마스터 패스워드의 해싱 값을 이용하여 대칭 암호화한 후 저장하면 된다. 이때 주의할 점으로 ",e.createElement(s.strong,null,"마스터 패스워드의 해싱 값을 영속적으로 저장해서는 안된다.")," 마스터 패스워드의 해싱 값을 대칭 키로 이용한다면 굳이 원본을 모르더라도 저장된 해싱 값만을 통해 복호화하는 것이 가능하다. 이를 ",e.createElement(s.a,{href:"https://www.beyondtrust.com/resources/glossary/pass-the-hash-pth-attack",rel:"nofollow noopener noreferrer"},"Pass-the-Hash 공격"),"이라고 한다. 이는 보통 웹 서비스에서 비밀번호를 해싱하여 저장하는 습관에서 비롯된 것으로 많은 사람들이 실수하기 쉬운 부분이므로 주의할 필요가 있다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/local-vault-usecase.png",caption:"아주 간단한 도식"}),"\n",e.createElement(s.p,null,"클라이언트가 마스터 패스워드 해싱 값을 알게되면 스토어에 새로운 비밀번호를 암호화하여 저장하거나 가져온 값을 복호화 하는 것이 가능하다. 이렇게 사용자는 하나의 마스터 패스워드로 모든 비밀번호를 관리할 수 있게 된다."),"\n",e.createElement(s.h2,{id:"마스터-언록-키-생성"},e.createElement(s.a,{href:"#마스터-언록-키-생성"},"마스터 언록 키 생성")),"\n",e.createElement(s.p,null,"앞서 마스터 패스워드가 유출되면 모든 비밀이 유출된다고 언급했다. 마스터 패스워드만 유출되지 않으면 안전하다는 것은 알 수 있지만 솔직히 사용하기엔 불안하다. 이를 해결하기 위해 한 가지 아이디어를 떠올려보자. 대칭 키로 마스터 패스워드의 해싱 값만 사용하는 것이 아니라 ",e.createElement(s.strong,null,"사용자의 디바이스에 종속된 랜덤한 키를 추가로 사용"),"하면 어떨까? 예를 들어, ",e.createElement(s.strong,null,"마스터 패스워드의 해싱 값과 랜덤 생성된 비밀 키를 XOR 연산"),"하여 대칭 키로 사용하는 것이다. 이렇게 사용한다면 마스터 패스워드가 유출되더라도 디바이스 자체를 탈취당하지 않는다면 안전하다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/generate-master-unlock-key-process.png",caption:"아주 간단한 도식"}),"\n",e.createElement(s.p,null,"랜덤 생성된 비밀 키는 각 OS에서 사용되는 암호 저장 서비스를 이용하여 생성, 보관하면 된다. macOS라면 ",e.createElement(s.strong,null,"Keychain"),", Windows라면 ",e.createElement(s.strong,null,"Credential Manager"),"을 사용할 수 있다.",e.createElement(s.sup,null,e.createElement(s.a,{href:"#user-content-fn-7",id:"user-content-fnref-7","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"7"))),"\n",e.createElement(s.h2,{id:"구현"},e.createElement(s.a,{href:"#구현"},"구현")),"\n",e.createElement(s.p,null,"이제 이론적인 부분을 끝내고 실제로 구현해보자. 전체 프로세스에 대한 도식은 다음과 같다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/local-vault-system.png",caption:"전체 프로세스 도식"}),"\n",e.createElement(s.p,null,"CLI 툴로 구현한다고 가정했을 때 필요한 기능은 다음과 같다."),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,"AES 암호화"),"\n",e.createElement(s.li,null,"해싱 (여기서는 PBKDF2를 사용)"),"\n",e.createElement(s.li,null,"랜덤 비밀 키 생성"),"\n",e.createElement(s.li,null,"마스터 언록 키 생성"),"\n",e.createElement(s.li,null,"새로운 비밀 추가"),"\n",e.createElement(s.li,null,"저장된 비밀 확인"),"\n",e.createElement(s.li,null,"저장된 비밀 삭제"),"\n",e.createElement(s.li,null,"마스터 패스워드 인증"),"\n"),"\n",e.createElement(s.p,null,"여기서는 코드 예제로 쉽게 테스트할 수 있는 Python 3를 사용할 것이다. 그렇게 어려운 코드는 아니므로 다른 언어로도 쉽게 구현할 수 있을 것이다."),"\n",e.createElement(s.p,null,"먼저 AES 암호화 모듈을 만들어보자. 이를 위해 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pycryptodome</code>'}}),"을 설치해서 사용할 것이다."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ pip install pycryptodome</code></pre></div>'}}),"\n",e.createElement(s.p,null,"설치를 마쳤다면 다음 코드를 작성해보자."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># aes.py</span>\n\n<span class="token keyword">import</span> base64\n<span class="token keyword">import</span> hashlib\n<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES\n<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token punctuation">,</span> unpad\n\n\n<span class="token keyword">class</span> <span class="token class-name">AESCipher</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>key <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>\n        message <span class="token operator">=</span> message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        raw <span class="token operator">=</span> pad<span class="token punctuation">(</span>message<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>\n        cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">)</span>\n        enc <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>raw<span class="token punctuation">)</span>\n\n        ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n        iv <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>iv<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> ciphertext<span class="token punctuation">,</span> iv\n\n    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> iv<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>\n        enc <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>\n        cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        dec <span class="token operator">=</span> cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> unpad<span class="token punctuation">(</span>dec<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    aes <span class="token operator">=</span> AESCipher<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>\n    encrypted<span class="token punctuation">,</span> iv <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span> <span class="token comment"># 6F9aHBhcbWhExUkVjBWFvw== or something like this</span>\n    decrypted <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>decrypted<span class="token punctuation">)</span> <span class="token comment"># password</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AESCipher</code>'}})," 클래스는 평문의 암호화와 복호화를 담당한다. 참고로 코드 중 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">iv</code>'}}),"는 ",e.createElement(s.strong,null,"Initialization Vector"),"의 약자로 암호화할 때 사용하는 초기화 벡터를 의미한다. 이는 암호화할 때 사용한 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">iv</code>'}}),"를 복호화할 때도 사용해야 한다. 이를 통해 암호화된 메세지가 같은 메세지라도 매번 다른 암호문을 생성할 수 있다."),"\n",e.createElement(s.p,null,"그리고 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pad</code>'}}),"와 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">unpad</code>'}}),"는 문자열에 패딩을 추가하고 제거하는 함수이다. 이를 통해 암호화할 때 블록 크기의 배수로 만들어주고 복호화할 때 다시 제거해준다. 더 자세한 내용은 AES 알고리즘을 참고하자."),"\n",e.createElement(s.p,null,"다음으로 해싱 모듈을 만들어보자."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># hash.py</span>\n\n<span class="token keyword">import</span> base64\n<span class="token keyword">import</span> hashlib\n<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Protocol<span class="token punctuation">.</span>KDF <span class="token keyword">import</span> PBKDF2\n\n\n<span class="token keyword">def</span> <span class="token function">hash_password</span><span class="token punctuation">(</span>password<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> salt<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>PBKDF2<span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> dkLen<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">hash_sha256</span><span class="token punctuation">(</span>password<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>hash_password<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"salt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># ... 48 length hash</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>hash_sha256<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># ... 48 length hash</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hash_password</code>'}})," 함수는 PBKDF2를 이용하여 해싱한 후 base64로 인코딩하여 반환한다. 이때 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dkLen</code>'}}),"은 해싱된 길이를 의미하며 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}}),"는 해싱 반복 횟수를 의미한다. 이 값이 클수록 보안이 높아지지만 속도가 느려진다. ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hash_sha256</code>'}})," 함수는 SHA-256 해싱을 수행한다."),"\n",e.createElement(s.p,null,"이제 기본적인 암호화 모듈을 만들었으니 랜덤 비밀 키를 생성하여 OS의 키 관리 서비스에 등록하는 모듈을 만들어보자. 여기서는 macOS를 기준으로 작성한다."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># random_key.py</span>\n\n<span class="token keyword">import</span> base64\n<span class="token keyword">import</span> subprocess\n<span class="token keyword">import</span> os\n\n\n<span class="token keyword">def</span> <span class="token function">generate_random_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">keychain_get_password</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    command <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"/usr/bin/security find-generic-password -s \'</span><span class="token interpolation"><span class="token punctuation">{</span>service<span class="token punctuation">}</span></span><span class="token string">\' -a \'</span><span class="token interpolation"><span class="token punctuation">{</span>account<span class="token punctuation">}</span></span><span class="token string">\' -g -w"</span></span>\n    result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>command<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> capture_output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\n    password <span class="token operator">=</span> result<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> password\n\n<span class="token keyword">def</span> <span class="token function">keychain_store_password</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> account<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    cmd <span class="token operator">=</span> <span class="token string">\'security add-generic-password -U -a %s -s %s -p %s\'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>account<span class="token punctuation">,</span> service<span class="token punctuation">,</span> password<span class="token punctuation">)</span>\n    p <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>\n    s <span class="token operator">=</span> p<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    <span class="token comment"># If password exists, print it</span>\n    <span class="token keyword">if</span> <span class="token keyword">not</span> keychain_get_password<span class="token punctuation">(</span><span class="token string">"local-vault"</span><span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Password does not exist"</span><span class="token punctuation">)</span>\n        keychain_store_password<span class="token punctuation">(</span><span class="token string">"local-vault"</span><span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">,</span> generate_random_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Password stored"</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">print</span><span class="token punctuation">(</span>keychain_get_password<span class="token punctuation">(</span><span class="token string">"local-vault"</span><span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># print random key</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"위 코드를 실행하면 macOS 키체인에 정상적으로 값이 들어간 것을 확인할 수 있다."),"\n",e.createElement(p.A,{src:"/images/2024-04-14-encrypted-vault-system/macos-keychain.png",caption:"입력한 값으로 키체인에 추가되어있다"}),"\n",e.createElement(s.p,null,"이제 기반 모듈은 모두 만들었다. 이제 이를 이용하여 애플리케이션을 만들어 볼 것이다. 먼저 가장 중요한 마스터 언록 키를 생성하는 모듈을 만들어보자."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># muk.py</span>\n\n<span class="token keyword">import</span> base64\n<span class="token keyword">from</span> <span class="token builtin">hash</span> <span class="token keyword">import</span> hash_password<span class="token punctuation">,</span> hash_sha256\n<span class="token keyword">from</span> random_key <span class="token keyword">import</span> generate_random_key<span class="token punctuation">,</span> keychain_get_password<span class="token punctuation">,</span> keychain_store_password\n\n\n<span class="token keyword">def</span> <span class="token function">xor_two_str</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>\n    a <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    b <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token operator">^</span> y <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">generate_master_unlock_key</span><span class="token punctuation">(</span>master_password<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>\n    hashed_master_password <span class="token operator">=</span> hash_password<span class="token punctuation">(</span>master_password<span class="token punctuation">,</span> <span class="token string">"salt"</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token keyword">not</span> keychain_get_password<span class="token punctuation">(</span><span class="token string">"local-vault"</span><span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        keychain_store_password<span class="token punctuation">(</span><span class="token string">"local-vault"</span><span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">,</span> generate_random_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    random_secret_key <span class="token operator">=</span> keychain_get_password<span class="token punctuation">(</span><span class="token string">"local-vault"</span><span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">)</span>\n    hashed_random_secret_key <span class="token operator">=</span> hash_sha256<span class="token punctuation">(</span>random_secret_key<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> xor_two_str<span class="token punctuation">(</span>hashed_master_password<span class="token punctuation">,</span> hashed_random_secret_key<span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>generate_master_unlock_key<span class="token punctuation">(</span><span class="token string">"master_password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># ... 42 length string</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"마스터 패스워드를 PBKDF2로 해싱한 값과 랜덤 비밀 키를 SHA-256으로 해싱한 값을 XOR 연산하여 마스터 언록 키를 생성한다. 이렇게 생성된 마스터 언록 키는 사용자의 디바이스에 종속된 키가 되어 모든 비밀을 관리할 수 있게 된다."),"\n",e.createElement(s.p,null,"이제 이를 이용하여 비밀 관리 시스템의 기본 기능을 구현해보자. 먼저 CLI 애플리케이션이기 때문에 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">argparse</code>'}}),"를 사용하여 명령어를 파싱할 것이다."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># main.py</span>\n<span class="token comment"># import ...</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        master_password <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token string">"Enter master password: "</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>muk <span class="token operator">=</span> generate_master_unlock_key<span class="token punctuation">(</span>master_password<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>aes <span class="token operator">=</span> AESCipher<span class="token punctuation">(</span>self<span class="token punctuation">.</span>muk<span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"Vault: Add, Update, Delete and Query Passwords"</span><span class="token punctuation">,</span> usage<span class="token operator">=</span><span class="token string">"[options]"</span><span class="token punctuation">)</span>\n\n        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-a"</span><span class="token punctuation">,</span> <span class="token string">"--add"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Add new password along with name"</span><span class="token punctuation">)</span>\n        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-u"</span><span class="token punctuation">,</span> <span class="token string">"--update"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Update a password by name"</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"[name]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span> <span class="token string">"--delete"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Delete entry by name"</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"[name]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-q"</span><span class="token punctuation">,</span> <span class="token string">"--query"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Look up password by name"</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"[name]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-l"</span><span class="token punctuation">,</span> <span class="token string">"--list"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"List all entries in vault"</span><span class="token punctuation">)</span>\n\n        args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> args<span class="token punctuation">.</span>add<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">elif</span> args<span class="token punctuation">.</span>update<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'update\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">elif</span> args<span class="token punctuation">.</span>delete<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'delete\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">elif</span> args<span class="token punctuation">.</span>query<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'query\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">elif</span> args<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'list\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            parser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"위와 같이 추가, 수정, 삭제, 조회 등의 명령어를 파싱할 수 있도록 구현했다. 이제 이를 이용하여 비밀을 추가, 수정, 삭제, 조회하는 기능을 구현해보자. 먼저 추가부터 구현할 것이다."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># main.js</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n\n    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Enter item name: "</span><span class="token punctuation">)</span>\n        password <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token string">"Enter password: "</span><span class="token punctuation">)</span>\n        cipher<span class="token punctuation">,</span> iv <span class="token operator">=</span> self<span class="token punctuation">.</span>aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>password<span class="token punctuation">)</span>\n\n        <span class="token comment">## Read from file as JSON</span>\n        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>\n            data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>\n            data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n            <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token comment">## Update JSON</span>\n        data<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"cipher"</span><span class="token punctuation">:</span> cipher<span class="token punctuation">,</span> <span class="token string">"iv"</span><span class="token punctuation">:</span> iv<span class="token punctuation">}</span>\n\n        <span class="token comment">## Save to file as JSON</span>\n        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>\n        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>\n        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Entry </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> added"</span></span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"추가 명령이 들어오는 경우 사용자로부터 이름과 비밀을 입력받아 암호화한 후 파일에 저장한다. 이때 파일은 JSON 형식으로 저장하며 이름과 암호화된 비밀, IV를 저장한다. 다음으로 조회 기능을 구현해보자."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># main.js</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n\n    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No entries found"</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n\n        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>\n        data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">for</span> entry <span class="token keyword">in</span> data<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"* </span><span class="token interpolation"><span class="token punctuation">{</span>entry<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No entries found"</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n\n        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>\n        data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> name <span class="token keyword">in</span> data<span class="token punctuation">:</span>\n            cipher <span class="token operator">=</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"cipher"</span><span class="token punctuation">]</span>\n            iv <span class="token operator">=</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"iv"</span><span class="token punctuation">]</span>\n            password <span class="token operator">=</span> self<span class="token punctuation">.</span>aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Password for </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>password<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Entry not found"</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"목록 조회와 조회 기능을 구현했다. 목록 조회는 파일에 저장된 모든 이름을 출력하고 조회 기능은 입력받은 이름에 해당하는 비밀을 복호화하여 출력한다. 마지막으로 수정과 삭제 기능을 구현해보자."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># main.js</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n\n    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No entries found"</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n\n        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>\n        data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> name <span class="token keyword">in</span> data<span class="token punctuation">:</span>\n            <span class="token keyword">del</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n\n            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>\n            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>\n            <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Entry </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> deleted"</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Entry not found"</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No entries found"</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n\n        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>\n        data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> name <span class="token keyword">in</span> data<span class="token punctuation">:</span>\n            password <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token string">"Enter new password: "</span><span class="token punctuation">)</span>\n            cipher<span class="token punctuation">,</span> iv <span class="token operator">=</span> self<span class="token punctuation">.</span>aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>password<span class="token punctuation">)</span>\n            data<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"cipher"</span><span class="token punctuation">:</span> cipher<span class="token punctuation">,</span> <span class="token string">"iv"</span><span class="token punctuation">:</span> iv<span class="token punctuation">}</span>\n\n            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vault.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>\n            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>\n            <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Entry </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> updated"</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Entry not found"</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"이제 모든 기능을 구현했다. 구현된 코드는 다음과 같이 사용할 수 있다. 참고로 지금까지 작성한 코드는 ",e.createElement(s.a,{href:"https://github.com/kciter/python-vault-example",rel:"nofollow noopener noreferrer"},"GitHub 저장소"),"에서 확인할 수 있다."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ python main.py -a\nEnter master password: \nEnter item name: Google\nEnter password: \nEntry Google added\n\n$ python main.py -l\n* Google\n\n$ python main.py -q Google\nEnter master password:\nPassword for Google: password # Your password\n\n$ python main.py -u Google\nEnter master password:\nEnter new password:\nEntry Google updated\n\n$ python main.py -d Google\nEntry Google deleted</code></pre></div>'}}),"\n",e.createElement(s.p,null,"마스터 언록 키를 특정 시간 동안 캐싱하는 등 서비스를 위한 편의 기능은 여기서 구현하지 않았다. 만약 관심있다면 이어서 구현해보는 것도 좋을 것이다."),"\n",e.createElement(s.h1,{id:"로컬-금고를-넘어서"},e.createElement(s.a,{href:"#로컬-금고를-넘어서"},"로컬 금고를 넘어서")),"\n",e.createElement(s.p,null,"지금까지 다룬 것은 로컬에서 사용 가능한 금고로 제 3자가 관리하는 네트워크 환경에서는 사용할 수 없다. 또한, 1Password와 같은 서비스에서 제공하는 ",e.createElement(s.strong,null,"여러 명이서 접근 가능한 공유 금고"),"는 다루지 않았다. 이 두 가지를 위해선 추가적으로 필요한 기술이 있다. 이 기술에 대해선 이번 글에서 다루지는 않을 것이다. 조만간 새로운 글로 다루도록 하겠다."),"\n",e.createElement(s.h1,{id:"마치며"},e.createElement(s.a,{href:"#마치며"},"마치며")),"\n",e.createElement(s.p,null,"암호라는 것은 모든 것이 공개되는 인터넷 세계에선 필수라고 할 수 있다. 그럼에도 불구하고 필자를 포함한 많은 개발자들이 암호에 대해 잘 알지 못한다. 이 도메인을 전문적으로 다루거나 종사하는 것이 아니라면 모든 것을 다 알아야할 필요는 없겠지만 단순히 패스워드를 해싱하는 수준에서 벗어나 더 넓은 세계를 탐구해보는 것은 좋을 것이다."),"\n",e.createElement(s.p,null,"참고로 이 글에서 쓰여진 코드는 정말 안전한지 검증된 것은 아니다. 따라서 이 글을 참고하여 실제 제품에 반영하고자 한다면 충분히 검증 후 도입하기를 권장한다. 여기서 사용된 알고리즘은 보편적으로 사용하는 것을 택했으며 더 안전한 방법이 있을 수 있다."),"\n",e.createElement(s.section,{"data-footnotes":!0,className:"footnotes"},e.createElement(s.h2,{className:"sr-only",id:"footnote-label"},e.createElement(s.a,{href:"#footnote-label"},"Footnotes")),"\n",e.createElement(s.ol,null,"\n",e.createElement(s.li,{id:"user-content-fn-1"},"\n",e.createElement(s.p,null,"비즈네르는 다른 암호를 만든 블레즈 드 비즈네르라는 프랑스 인이지만 역사상의 인용 오류 때문에 그냥 비즈네르라는 이름이 굳어버렸다 / 처음 배우는 암호화 1장 32쪽 ",e.createElement(s.a,{href:"#user-content-fnref-1","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",e.createElement(s.li,{id:"user-content-fn-2"},"\n",e.createElement(s.p,null,"키가 될 수 있는 조합 수 ",e.createElement(s.a,{href:"#user-content-fnref-2","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",e.createElement(s.li,{id:"user-content-fn-3"},"\n",e.createElement(s.p,null,"Advanced Encryption Standard의 약자로 미국 표준 기술 연구소에 의해 표준으로 지정된 암호화 방식이다 ",e.createElement(s.a,{href:"#user-content-fnref-3","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",e.createElement(s.li,{id:"user-content-fn-4"},"\n",e.createElement(s.p,null,"태양계의 수명이 끝나도 원본 키를 찾을 수 없다 ",e.createElement(s.a,{href:"#user-content-fnref-4","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",e.createElement(s.li,{id:"user-content-fn-5"},"\n",e.createElement(s.p,null,"만든 사람의 이름인 Ron Rivest, Adi Shamir, Leonard Adleman에서 따온 이름이다 ",e.createElement(s.a,{href:"#user-content-fnref-5","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",e.createElement(s.li,{id:"user-content-fn-6"},"\n",e.createElement(s.p,null,"이름부터 Secure Hash Algorithm, 안전한 해시 알고리즘이다 ",e.createElement(s.a,{href:"#user-content-fnref-6","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",e.createElement(s.li,{id:"user-content-fn-7"},"\n",e.createElement(s.p,null,"Linux 계열 OS는 어떤 방법을 사용할 수 있을지 모르겠다. 추후에 알게되면 추가하겠다. ",e.createElement(s.a,{href:"#user-content-fnref-7","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n"),"\n"))}s.default=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.R)(),n.components);return s?e.createElement(s,n,e.createElement(o,n)):o(n)}},5799:function(n,s,a){var t=a(9474),e=a(1615),p=a(6810);s.A=n=>{let{src:s,caption:a,width:o,maxWidth:c,expandable:l}=n;const{0:u,1:r}=(0,t.useState)(!1);return(0,p.Y)("figure",null,(0,p.Y)("img",{src:s,width:o,style:{cursor:l?"zoom-in":"default",maxWidth:c},onClick:l?()=>r(!0):void 0}),a&&(0,p.Y)("figcaption",{dangerouslySetInnerHTML:{__html:a}}),u&&e.createPortal((0,p.Y)("div",{style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"zoom-out",backgroundColor:"rgba(0, 0, 0, 0.7)"},onClick:()=>r(!1)},(0,p.Y)("div",{style:{borderRadius:8,maxWidth:1200,width:"80%",position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white"}},(0,p.Y)("img",{src:s,width:"100%"}))),document.body))}}}]);
//# sourceMappingURL=9008da5e8c0997d9bbe38de1c5258e83ff0cfdf2-77005c0bbd14cfb9e3a6.js.map