{"version":3,"file":"component---src-posts-2024-07-09-best-prompt-engineering-lesson-mdx-e39ccb38483718ce86dd.js","mappings":"0OAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,WAAY,aACZC,EAAG,IACHC,OAAQ,SACRC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,KAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,WAAY,KAAM,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,sDAAuD,MAAO,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,+JAAiKM,EAAAA,cAAoBV,EAAYK,OAAQ,KAAM,WAAY,wBAA0B,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,mFAAoFM,EAAAA,cAAoBV,EAAYM,EAAG,CACxpBK,KAAM,uDACNC,IAAK,gCACJ,qBAAsB,qNAAsN,KAAMF,EAAAA,cAAoBV,EAAYO,GAAI,CACvRM,GAAI,YACHH,EAAAA,cAAoBV,EAAYM,EAAG,CACpCK,KAAM,aACL,cAAe,KAAMD,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,4HAA6H,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,uEAAwEM,EAAAA,cAAoBV,EAAYK,OAAQ,KAAM,YAAa,mBAAoBK,EAAAA,cAAoBV,EAAYK,OAAQ,KAAM,aAAc,2HAA4H,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,4DAA6DM,EAAAA,cAAoBV,EAAYK,OAAQ,KAAM,aAAc,yJAA0J,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,wEAAyEM,EAAAA,cAAoBV,EAAYK,OAAQ,KAAM,QAAS,qKAAsK,KAAMK,EAAAA,cAAoBV,EAAYO,GAAI,CAC3vCM,GAAI,oBACHH,EAAAA,cAAoBV,EAAYM,EAAG,CACpCK,KAAM,qBACL,sBAAuB,KAAMD,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,wNAAyN,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,2GAA4G,KAAMM,EAAAA,cAAoBV,EAAYO,GAAI,CACreM,GAAI,OACHH,EAAAA,cAAoBV,EAAYM,EAAG,CACpCK,KAAM,QACL,QAAS,KAAMD,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,+HAAgI,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,mFAC5O,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWhB,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,yDCyBA,IA/CciB,IAAsD,IAArD,IAAEC,EAAG,QAAEC,EAAO,MAAEC,EAAK,WAAEC,GAAwBJ,EAC5D,MAAM,EAACK,EAAW,EAACC,IAAkBC,EAAAA,EAAAA,WAAS,GAE9C,OACEC,EAAAA,EAAAA,GAAA,eACEA,EAAAA,EAAAA,GAAA,OACEP,IAAKA,EACLE,MAAOA,EACPM,MAAO,CAAEC,OAAQN,EAAa,UAAY,WAC1CO,QAASP,EAAa,IAAME,GAAe,QAAQM,IAEpDV,IAAWM,EAAAA,EAAAA,GAAA,cAAYK,wBAAyB,CAAEC,OAAQZ,KAC1DG,GACCU,EAAAA,cACEP,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLO,SAAU,QACVC,IAAK,EACLC,KAAM,EACNf,MAAO,OACPgB,OAAQ,OACRT,OAAQ,WACRU,gBAAiB,sBAEnBT,QAASA,IAAML,GAAe,KAE9BE,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLY,aAAc,EACdC,SAAU,KACVnB,MAAO,MACPa,SAAU,QACVC,IAAK,MACLC,KAAM,MACNK,UAAW,wBACXH,gBAAiB,WAGnBZ,EAAAA,EAAAA,GAAA,OAAKP,IAAKA,EAAKE,MAAM,WAGzBqB,SAASC,MAEN,C,qEC1Bb,MAAMC,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBnC,GAC/B,MAAMoC,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAflC,EACFA,EAAWoC,GAGb,IAAIA,KAAsBpC,EACnC,GACA,CAACoC,EAAmBpC,GAExB,C","sources":["webpack://kciter.so/./src/posts/2024-07-09-best-prompt-engineering-lesson.mdx","webpack://kciter.so/./src/components/Image/index.tsx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"프롬프트 엔지니어링은 더 많은 사람이 프로그래머가 될 수 있는 세상이 온 것을 의미합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"\\\"이제는 AI가 가치있다는 것을 인정하지 않을 수 없다. 실제로 ChatGPT와 Copilot을 사용하면서 AI가 얼마나 빠르게 발전하고 있는지를 느낄 수 있었다. 이러한 AI의 발전으로 인해 개발자가 생각할 시간을 줄여주며 반복적인 일을 대신해주기에 정말로 많은 개발자가 진짜 \", React.createElement(_components.strong, null, \"Develop\"), \"을 할 수 있는 기회를 제공해준다.\\\"\"), \"\\n\", React.createElement(_components.p, null, \"그런 생각을 떨칠 수 없었기에 최근에는 닥치는대로 AI를 다루는 책을 읽기 시작했다. 읽었던 책 중에서 가장 친절하고 이해하기 쉬운 책이 바로 \", React.createElement(_components.a, {\n    href: \"https://product.kyobobook.co.kr/detail/S000213362002\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"최고의 프롬프트 엔지니어링 강의\"), \"였다. 정확히는 LLM와 프롬프트 엔지니어링에 대해 다루는 책이지만 LLM이 등장하기까지의 역사도 설명해주기에 흥미롭게 읽었다. 너무 어려운 부분은 배제하고 여러 도식과 이미지를 이용하여 LLM에 대해 잘 모르는 사람도 이해할 수 있도록 설명해준다. 얼마나 편하게 읽었나면, 서점에서 절반 읽고 이후에 구매한 후 집에 돌아와 완독했으니 하루가 지나기도 전에 다 읽은 샘이다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"소프트웨어-30\"\n  }, React.createElement(_components.a, {\n    href: \"#소프트웨어-30\"\n  }, \"소프트웨어 3.0\")), \"\\n\", React.createElement(_components.p, null, \"인상적이었던 내용은 소프트웨어의 진화 과정을 3단계로 나눴다는 점이다. 아직 이런 표현을 접해보지 않았기에 실제로 널리 쓰이는 표현인지는 모르겠지만 소프트웨어의 유형을 AI 기준에 맞춰 표현하기엔 적절하다 생각했다.\"), \"\\n\", React.createElement(_components.p, null, \"소프트웨어 1.0은 개발자가 대부분 하는 작업이다. 적절한 데이터와 알고리즘을 이용하여 데이터를 조작하고 결과를 도출하는 \", React.createElement(_components.strong, null, \"결정론적인 방법\"), \"이다. 대부분 문제는 없지만 \", React.createElement(_components.strong, null, \"비결정론적인 문제\"), \"에 대해서는 대응하기 어렵다. 예를 들어, 감정을 인식한다거나 대화를 하는 등에 대해서는 소프트웨어 1.0으로는 대응하기 어렵다. 이는 지금까지 무수히 많은 경우의 수로 대응하려한 많은 프로젝트의 실패가 증명한다.\"), \"\\n\", React.createElement(_components.p, null, \"머신러닝이 급부상하면서 상황은 조금씩 변했다. 머신러닝 알고리즘을 통해 데이터를 학습시킨 모델을 통해 \", React.createElement(_components.strong, null, \"비결정론적인 문제\"), \"에 대응할 수 있게 되었다. 이를 소프트웨어 2.0이라고 부른다. 이러한 기술을 통해 사용자에게 적합한 제품을 추천하고 이미지에서 물체를 인식하는 등의 작업을 수행할 수 있게 되었다. 하지만 이 또한 최적화되지 않은 데이터에 대해서는 대응하기 어렵다는 문제가 있었다.\"), \"\\n\", React.createElement(_components.p, null, \"딥러닝이 발전하고 대규모 언어 데이터를 학습시킨 LLM이 등장하면서 소프트웨어 3.0이라는 새로운 시대가 열렸다. LLM은 \", React.createElement(_components.strong, null, \"프롬프트\"), \"라는 것을 통해 사용자가 원하는 것을 수행한다. 즉, 어느정도는 자연어를 통해 코딩을 하는 것과 같은 것이다. 개발자는 LLM의 등장으로 더 많은 문제를 해결할 수 있게 되었다. 앞으로 어떻게 될지 모르겠지만 다양한 문제를 해결할 수 있게 프롬프트 엔지니어링을 배워야한다는 점은 확실하다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"프롬프트-엔지니어링은-어려운가\"\n  }, React.createElement(_components.a, {\n    href: \"#프롬프트-엔지니어링은-어려운가\"\n  }, \"프롬프트 엔지니어링은 어려운가?\")), \"\\n\", React.createElement(_components.p, null, \"사실 개인적인 생각으로는 프롬프트 엔지니어링이라는 것이 그렇게 어렵게 느껴지지는 않았다. 물론 LLM이 어떻게 동작하는지에 대한 이해가 필요하긴 하지만, 실제로 프롬프트를 작성하는 것은 그리 어렵지 않다. 물론 실제 제품에 반영하려면 많은 시행착오와 경험을 통해 배워야 할 것 같다는 느낌이 든다. 그러나 이 책을 통해 프롬프트 엔지니어링에 대한 전반적인 이해를 얻을 수 있었다.\"), \"\\n\", React.createElement(_components.p, null, \"다만 필자는 아직 학습량이 많지 않고 실제 제품에 운용한 경험도 부족하다. 그러나 어느 정도 IT와 개발에 대한 지식이 있다면 지래 겁먹고 시작 못 할 정도로 어렵지는 않다고 생각한다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"이 책은 프롬프트 엔지니어링에 대한 전반적인 이해를 얻을 수 있는 좋은 책이었다. 아무래도 직접 많은 실습을 해보는게 중요하겠지만 이 책에서 소개해주는 여러 방법이 그렇게 어렵지는 않기에 해보는 것은 어렵지 않을 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"제대로된 AI 제품을 만들기엔 아직 AI에 대한 경험과 학습이 부족하다. 프롬프트 엔지니어링을 넘어서 더 많은 기술에 대한 학습을 해봐야겠다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","strong","a","h1","_provideComponents","components","React","href","rel","id","wrapper","MDXLayout","_ref","src","caption","width","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","dangerouslySetInnerHTML","__html","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}