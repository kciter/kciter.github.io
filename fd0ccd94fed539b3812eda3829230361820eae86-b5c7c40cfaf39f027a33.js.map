{"version":3,"file":"fd0ccd94fed539b3812eda3829230361820eae86-b5c7c40cfaf39f027a33.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2023-07-24-functional-data-structure.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h1: \"h1\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"자료구조란 전기 신호의 나열로 이루어진 컴퓨터 세계의 \", React.createElement(_components.strong, null, \"데이터를 다차원으로 표현\"), \"하는 것이라 볼 수 있다. 우리는 보통 전산화를 할 때 현상을 표현하기 위한 데이터 구조를 정의하고 이를 이용해 알고리즘을 구현한다.\"), \"\\n\", React.createElement(_components.p, null, \"그렇지만 우리가 일반적으로 학생 때 배우는 자료구조는 절차적으로 설계된 구조들이 대부분이다. 이러한 자료구조는 상태가 존재하지않는 순수한 함수형 언어에서는 사용할 수 없기 때문에 기존에 알고있던 지식을 활용할 수가 없다. 따라서 함수형 프로그래밍을 하고싶다면 그에 맞는 방식으로 데이터를 표현할 수 있어야 하고 이를 \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Purely_functional_data_structure\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"순수 함수형 자료구조\"), \"라고 부른다.\"), \"\\n\", React.createElement(_components.p, null, \"사실 이 함수형 자료구조를 꼭 익혀야하는가라고 묻는다면 사실 그렇지는 않다. 요즘은 대부분의 언어들이 \", React.createElement(_components.a, {\n    href: \"https://ko.wikipedia.org/wiki/%EB%8B%A4%EC%A4%91_%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"멀티 패러다임\"), \"을 지향하고 있고 \", React.createElement(_components.strong, null, \"성능적인 이슈\"), \"도 있기 때문에 순수 함수형 언어에서만 사용하는 자료구조들을 익힐 필요는 없다. 그렇지만 이런 일반적이지 않은 것을 공부하는 것은 개발자로서 큰 즐거움아닐까?\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"함수형-사고\"\n  }, React.createElement(_components.a, {\n    href: \"#함수형-사고\"\n  }, \"함수형 사고\")), \"\\n\", React.createElement(_components.p, null, \"함수형 프로그래밍은 많은 개발자들이 관심을 가지며 업무에 활용하고 싶어하는 패러다임이다. 필자도 강의를 할 때 관련하여 많은 질문을 받기도하고 함수형 프로그래밍을 사용하는 회사는 \", React.createElement(_components.strong, null, \"힙한 기술 스택을 가진 멋진 회사\"), \"로 인용되기도 한다. 이쯤되면 개발자에게 일종의 로망으로 자리잡았다고 생각된다.\"), \"\\n\", React.createElement(_components.p, null, \"이 포스팅을 이해하기 위해서는 우선적으로 함수형 프로그래밍에 대한 이해가 필요하다. 이를 위해 우리는 프로그래밍 패러다임이 무엇인지, 함수형으로 사고하는 방법을 알아야 한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"프로그래밍과-패러다임-방법론\"\n  }, React.createElement(_components.a, {\n    href: \"#프로그래밍과-패러다임-방법론\"\n  }, \"프로그래밍과 패러다임, 방법론\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"💡 이 부분에 대한 설명은 \", React.createElement(_components.strong, null, \"필자의 생각\"), \"이 듬뿍 담겨있다. 대체로 프로그래밍 패러다임과 방법론은 동일시 되는 경우가 많지만 이 글에서는 분리하여 표현한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"프로그래밍 패러다임은 프로그램의 구성 요소와 프로그래밍을 하는 방법에 관한 \", React.createElement(_components.strong, null, \"사고 방식\"), \"이라 볼 수 있다. 이는 프로그래밍 언어의 문법과 여러 기술과는 별개로 개발을 바라보는 시각이다. 이 말이 이해하기 어려울 수 있다. 예를 들어, 객체지향 프로그래밍은 \", React.createElement(_components.strong, null, \"프로그램은 객체들의 유기적인 통신을 통해 이루어지기에 객체를 올바르게 만들어 서로 상호작용하도록 해야한다\"), \"라고 바라본다고 할 수 있다. 반면, 이 글에서 언급되는 함수형 프로그래밍은 \", React.createElement(_components.strong, null, \"프로그램은 하나의 함수이며 복잡한 연산을 위해 여러 함수의 합성을 통해 프로그램을 만들 수 있도록 해야한다\"), \"라고 바라본다고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"즉, 패러다임은 \", React.createElement(_components.strong, null, \"프로그램을 바라보는 시각을 통해 프로그래밍을 하는 방법을 결정\"), \"한다. 이는 \", React.createElement(_components.strong, null, \"추상적인 사고\"), \"와도 연관이 있다. 같은 프로그램을 만들더라도 바라보는 시각에 따라 \", React.createElement(_components.strong, null, \"뽑아내는 요소\"), \"가 다르기 때문이다. 예를 들어, 이 글을 읽는 독자 여러분이 객체지향 프로그래밍에 익숙하다면 어떠한 문제를 해결할 때 객체를 만들기 위해 클래스 설계부터 할 것이고 함수형 프로그래밍에 익숙하다면 어떠한 문제를 해결할 때 문제를 분해하고 함수 합성을 할 수 있도록 설계부터 할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"그렇다면 방법론은 무엇일까? 프로그래밍 패러다임이 프로그램의 구성 요소를 바라보는 것이라면 방법론은 그러한 시각에 따라 \", React.createElement(_components.strong, null, \"문제를 해결하는 방법\"), \"이라 볼 수 있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-24-functional-data-structure/methodology.png\",\n    caption: \"패러다임에 기반한 방법론은 여러 가지가 존재한다\"\n  }), \"\\n\", React.createElement(_components.p, null, \"예를 들어, 이전에 작성했던 글인 \", React.createElement(_components.a, {\n    href: \"https://kciter.so/posts/railway-oriented-programming\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Railway-Oriented Programming\"), \"은 함수형 프로그래밍을 기반으로 한 방법론이라고 볼 수 있다. 객체지향 프로그래밍도 마찬가지로 여러 방법론을 가진다. 객체를 만들어 내는 방법을 클래스로 할 것인가, 프로토타입으로 할 것인가로 나뉘기도 하며 Go 언어처럼 상속을 지원하지 않는 경우도 있다. 이처럼 프로그램의 구성 요소를 바라보는 시각은 같아도 \", React.createElement(_components.strong, null, \"해결하는 방법\"), \"은 달라질 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"함수형-프로그래밍은-좋은가\"\n  }, React.createElement(_components.a, {\n    href: \"#함수형-프로그래밍은-좋은가\"\n  }, \"함수형 프로그래밍은 좋은가?\")), \"\\n\", React.createElement(_components.p, null, \"물론 함수형 프로그래밍 좋다. \", React.createElement(_components.strong, null, \"교과서적으로\"), \" 대답하자면 안전한 프로그램을 작성하고 재사용성이 높아지며 테스트하기 쉽고, 불변성을 지키기 때문에 예측하기 쉽다. 이는 유지보수가 중요한 소프트웨어에서 매우 중요하다 할 수 있다. 물론 이러한 것들은 전부 \", React.createElement(_components.strong, null, \"적합한 상황에서 잘 만들었을 때만\"), \" 해당한다. 당연히 함수형 프로그래밍도 다른 패러다임과 마찬가지로 \", React.createElement(_components.strong, null, \"많은 장점과 더불어 많은 단점이 존재\"), \"한다.\"), \"\\n\", React.createElement(_components.p, null, \"함수형 프로그래밍을 포함하여 유명인이 언급하거나 큰 기업에서 사용하는 특정 방법론은 흔히 완벽한 방법으로서 맹신되기도 하는데 이런 생각은 위험하다. 방법론의 사전적인 의미를 보면 \", React.createElement(_components.strong, null, \"철학이나 과학 연구에서 진리에 도달하기 위한 방법을 연구하는 이론\"), \"이라 나와있다. 이 말은 추상적이니 구체적인 예시를 들어보자.\"), \"\\n\", React.createElement(_components.p, null, \"가령 필자가 급한 출장으로 인해 서울에서 부산으로 이동해야 한다면 어떤 방법을 선택할 수 있을까? 먼저 비행기를 타는 방법을 선택할 수 있다. 이는 비용이 많이 드는 대신 빠르게 이동할 수 있다는 장점이 있다. 혹은 버스를 타는 방법이 있다. 이는 비행기보다 오래 걸리지만 비용이 더 저렴하다는 장점이 있다. 이 두 가지를 비행기 방법론과 버스 방법론이라고 할 때 상황에 따라 방법론을 선택할 수 있다. 만약 필자가 최대한 빠른 시간 내에 부산에 가야한다면 비행기 방법론을 택할 것이고 금전이 부족한 상황에선 버스 방법론을 택할 것이다. 이처럼 \", React.createElement(_components.strong, null, \"상황에 맞게 방법론을 선택\"), \"하는 것이 가장 최선이라 볼 수 있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-24-functional-data-structure/simpson.png\",\n    caption: \"필자가 좋아하지 않는 이미지. 패러다임 사이엔 우열이 없다고 믿는다.\"\n  }), \"\\n\", React.createElement(_components.p, null, \"프로그래밍 패러다임과 방법론도 마찬가지로 가령 성능이 정말 중요한 낮은 계층의 소프트웨어를 만든다면 최소한의 명령어와 메모리만을 이용하기 위해 꼭 필요한 코드만을 순차적으로 작성할 수도 있다. 그리고 조금 더 큰 범위에서 아키텍처를 바라볼 때 MSA처럼 역할에 따라 서버를 분리하고 서로 통신하게끔 만든다면 이를 함수로 바라보는 것보다는 객체로 바라보는 것이 더 적합할 것이다. 이처럼 패러다임과 방법론은 어디에도 적용될 수 있지만 그에 따른 \", React.createElement(_components.strong, null, \"부작용이 있을 수 있기에 상황에 맞게 선택하는 것이 중요하다는 점\"), \"을 꼭 명심해야 한다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"함수형-자료구조-개론\"\n  }, React.createElement(_components.a, {\n    href: \"#함수형-자료구조-개론\"\n  }, \"함수형 자료구조 개론\")), \"\\n\", React.createElement(_components.p, null, \"여기서 함수형 프로그래밍에 대해 깊게 다루는 것은 이 글의 범위를 벗어나기에 생략한다. 함수형 자료구조는 우리가 지금까지 배웠던 자료구조와는 달리 \", React.createElement(_components.strong, null, \"불변성\"), \"을 가진다. 이는 상태를 지니지 않기에 값을 변경하지 않는다는 것을 의미한다. 여기서는 정말로 \", React.createElement(_components.strong, null, \"함수만을 이용하여 자료구조를 구현\"), \"한다. 이를 위해 기본적으로 \", React.createElement(_components.strong, null, \"함수가 일급 객체인 언어\"), \"여야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"또한, 함수형 프로그래밍을 위한 여러 기술 중 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Recursive Data Type</code>\"\n    }\n  }), \"이 필요하다. 이는 Lisp, Haskell, Scala 등 함수형 프로그래밍 언어나 TypeScript 등의 언어에서 지원한다. 혹은 JavaScript 같이 Duck Typing을 지원하는 언어에서 가능하다. 이 글에서는 상대적으로 이해하기 쉽고 타입도 나타낼 수 있는 \", React.createElement(_components.strong, null, \"TypeScript를 기준으로 설명\"), \"한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"recursive-data-type\"\n  }, React.createElement(_components.a, {\n    href: \"#recursive-data-type\"\n  }, \"Recursive Data Type\")), \"\\n\", React.createElement(_components.p, null, \"함수형 자료구조를 본격적으로 들어가기 전에 앞서 필요하다 말한 기술인 Recursive Data Type에 대해 간단히 살펴보자. Recursive Data Type은 이름처럼 \", React.createElement(_components.strong, null, \"재귀적인 타입 선언\"), \"이다. 이는 타입을 정의할 때 타입 자신을 참조하는 것을 의미한다. 이는 다음과 같이 표현할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">RecursiveType</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> RecursiveType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Recursive Data Type은 좀 더 유용한 사용 방법이 있지만 위 코드처럼 함수 타입으로 사용하는 것도 가능하다. 참고로 Recursive Data Type을 지원하지 않는 언어는 위와 같은 코드를 작성할 수 없다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">typealias</span> RecursiveType <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>RecursiveType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Int <span class=\\\"token comment\\\">// 컴파일 에러 발생</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(\"figcaption\", {\n    style: {\n      marginTop: -16\n    }\n  }, \"Kotlin에선 이런 타입을 선언할 수 없다\"), \"\\n\", React.createElement(_components.p, null, \"다른 언어에서는 타입을 정의할 때 자기 자신에 대한 정의를 할 수 없는 경우가 있다. 반면 TypeScript는 가능하다. 이는 함수형 자료구조를 만들 때 유용하다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"함수로-구조를-어떻게-표현할까\"\n  }, React.createElement(_components.a, {\n    href: \"#함수로-구조를-어떻게-표현할까\"\n  }, \"함수로 구조를 어떻게 표현할까?\")), \"\\n\", React.createElement(_components.p, null, \"언뜻 함수로 구조를 나타낸다는 것이 이상하게 느껴질 수 있다. 하지만 잘 생각해보면 함수로도 충분히 데이터 구조를 나타낼 수 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Pair</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드에서 매개 변수인 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">left</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">right</code>\"\n    }\n  }), \"를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Pair</code>\"\n    }\n  }), \" 함수가 두 개의 데이터를 받을 수 있다는 것을 알 수 있다. 그럼 위 함수를 조금 더 확장시켜보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Pair</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function-variable function\\\">f</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"추가로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Pair</code>\"\n    }\n  }), \" 함수에서 다시 함수를 반환하도록 코드를 작성했다. 여기서 갑자기 머리가 아파올 수 있다. 천천히 코드를 뜯어보자. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Pair</code>\"\n    }\n  }), \" 함수는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">left</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">right</code>\"\n    }\n  }), \"를 매개 변수로 받는다. 그리고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Pair</code>\"\n    }\n  }), \" 함수는 함수를 반환한다. 이 함수는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">f</code>\"\n    }\n  }), \"라는 매개 변수를 받는다. 이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">f</code>\"\n    }\n  }), \"는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">left</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">right</code>\"\n    }\n  }), \"를 매개 변수로 받아 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">number</code>\"\n    }\n  }), \"를 반환한다. 정리하여 순서대로 나타내면 다음과 같다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Pair가 숫자 두 개를 입력 받는다.\"), \"\\n\", React.createElement(_components.li, null, \"Pair는 숫자 두 개를 입력 받아 숫자를 반환하는 함수를 반환한다. 이때, 숫자 두 개는 클로저(혹은 람다 캡처링)로 인해 메모리 상에 남아있다.\"), \"\\n\", React.createElement(_components.li, null, \"반환된 함수는 숫자 두 개를 입력 받아 적절한 처리 후 숫자를 반환한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"설명보다 코드가 더 이해하기 쉬울 수 있다. 실제로 사용하는 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> pair <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Pair</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pair</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> left <span class=\\\"token operator\\\">+</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"첫 번째 줄 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pair</code>\"\n    }\n  }), \"는 함수다. 이 함수는 다시 함수를 인자로 받을 수 있다. 그리고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pair</code>\"\n    }\n  }), \" 함수가 실행될 때 인자로 받은 함수를 실행시키며 값을 반환한다. 이때 중요한 것은 앞서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Pair</code>\"\n    }\n  }), \" 함수를 통해 받은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">left</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">right</code>\"\n    }\n  }), \"가 클로저로 인해 \", React.createElement(_components.strong, null, \"메모리 상에 남아있다\"), \"는 것이다. 이를 통해 \", React.createElement(_components.strong, null, \"데이터를 담아두고 사용할 수 있다\"), \"는 것을 알 수 있다. 데이터를 담아두고 사용할 수 있다면 \", React.createElement(_components.strong, null, \"구조체 혹은 클래스처럼 데이터를 담아두고 꺼내 쓸 수 있다\"), \"고 볼 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"선형-자료구조-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#선형-자료구조-구현\"\n  }, \"선형 자료구조 구현\")), \"\\n\", React.createElement(_components.p, null, \"앞서 함수로도 충분히 데이터를 담아두고 꺼낼 수 있다는 것을 알았다. 이번에는 이를 이용하여 선형 자료구조를 구현해보자. 먼저 \", React.createElement(_components.strong, null, \"대표적인 선형 자료구조인 단일 연결 리스트를 구현\"), \"해볼 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"일반적으로 TypeScript에서 단일 연결 리스트를 구현할 때는 다음과 같이 데이터 타입을 정의한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">public</span> value<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">public</span> next<span class=\\\"token operator\\\">:</span> Node <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">LinkedList</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">public</span> head<span class=\\\"token operator\\\">:</span> Node <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ... </span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Node</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LinkedList</code>\"\n    }\n  }), \"라는 두 개의 클래스를 정의한다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Node</code>\"\n    }\n  }), \"는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">value</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">next</code>\"\n    }\n  }), \"를 가지며 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LinkedList</code>\"\n    }\n  }), \"는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">head</code>\"\n    }\n  }), \"를 가진다. 이를 함수형 자료구조로 표현한다면 어떨까?\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-24-functional-data-structure/functional-linked-list.png\",\n    caption: \"함수형 단일 연결 리스트\"\n  }), \"\\n\", React.createElement(_components.p, null, \"참고로 함수형 자료구조에선 요소를 Cons라고 표현하며 비어있는 값을 Nil이라 표현한다. 이는 Lisp에서 유래된 표현으로 Cons는 Construct(결합)를 줄여쓴 표현이다.\"), \"\\n\", React.createElement(_components.p, null, \"이어서 단일 연결 리스트를 더 이상 분해가 불가능할 때까지 분해한다고 생각해 보자. 그렇다면 head와 tail만 남은 Node 하나로 구성된 단일 연결 리스트가 남을 것이다. 이를 함수로 표현하고 tail은 다음 연결 리스트 혹은 null을 반환하도록 구현할 수 있다. 먼저 타입을 분해하여 정의할 필요가 있다. 필요한 타입은 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"단일 연결 리스트를 나타내는 타입\"), \"\\n\", React.createElement(_components.li, null, \"단일 연결 리스트의 요소를 표현하는 타입\"), \"\\n\", React.createElement(_components.li, null, \"단일 연결 리스트를 분해하는 타입\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"생각보다 정의할 타입이 많다. 코드로 한 번 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">ListNode</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token operator\\\">|</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">DestructureCons</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>destructureCons<span class=\\\"token operator\\\">:</span> ListNode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> ReturnType<span class=\\\"token operator\\\">&lt;</span>ListNode<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">LinkedList</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> DestructureCons<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"생각보다 타입 정의가 복잡하다. 여기서 앞서 설명한 Recursive Data Type이 사용된다. 직접 자기 자신을 참조하지는 않지만 \", React.createElement(_components.strong, null, \"상호 재귀\"), \"로 서로를 참조하고 있다. 각 정의를 살펴보면 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"단일 연결 리스트를 나타내는 타입\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"LinkedList\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"단일 연결 리스트의 요소를 표현하는 함수 타입\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ListNode\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"단일 연결 리스트를 분해하는 타입\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"DestructureCons\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"타입 중 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LinkedList</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">DestructureCons</code>\"\n    }\n  }), \"는 합치면 앞서 살펴본 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Pair</code>\"\n    }\n  }), \"와 유사하므로 어렵지 않을 것이다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ListNode</code>\"\n    }\n  }), \"는 head와 tail을 인자로 받아 head를 반환하거나 다음 요소를 반환하는 타입이다. 위 타입을 이용하여 단일 연결 리스트를 구성하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Cons</code>\"\n    }\n  }), \" 함수를 만들어보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> Cons<span class=\\\"token operator\\\">:</span> <span class=\\\"token function-variable function\\\">LinkedList</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>destructureCons<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">destructureCons</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 구현한 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Pair</code>\"\n    }\n  }), \" 함수와 똑같다. 실제로 사용할 때는 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> head <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> head<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"만약 두 번째 요소의 값을 받아오고 싶다면 다음과 같이 작성할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> second <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>tail <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">tail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> head<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>second<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"솔직히 매우 불편하다. 이를 해결하기 위해 유용한 함수를 만들 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">get</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n  list <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Out of bound'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n      index <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> head <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Error: Out of bound</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"함수 내용이 조금 복잡할 수 있다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">get</code>\"\n    }\n  }), \"은 인덱스를 받아 해당 인덱스의 값을 반환한다. 만약 인덱스가 리스트의 길이보다 크다면 에러를 반환한다. 이를 구현하기 위해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">get</code>\"\n    }\n  }), \" 함수는 재귀적으로 호출한다. 이를 통해 인덱스가 0이 될 때까지 리스트를 분해하고 0이 되면 위치에 해당하는 요소를 반환한다. 추가로 함수를 더 만들어보자. 함수에 대한 설명은 주석을 참고하면 된다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 리스트의 가장 첫 번째 요소의 값을 반환하는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">head</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>list <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Empty list'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> head<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 요소 중 index에 해당하는 값을 반환하는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">get</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> \\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>list <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Out of bound'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n    index <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> head <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 리스트 마지막에 값을 추가하는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">append</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  list <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> \\n    <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n      tail <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 리스트 앞쪽에 값을 추가하는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">prepend</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 리스트 첫 번째 요소를 제거하는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> shift <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>list <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Empty list'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> DestructureCons<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 리스트를 뒤집는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverse</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> DestructureCons<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n    tail <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span>tail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 리스트 요소의 값을 업데이트하는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">update</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>list <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Out of bound'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    index <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 리스트를 배열로 변환하는 함수</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">toArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> DestructureCons <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> \\n  list <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token punctuation\\\">,</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">[</span>head<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span>tail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이제 이를 이용하여 리스트를 조작해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [10, 3, 4]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드처럼 함수 합성을 통해 리스트를 조작할 수 있다. 결과적으로 불변성을 지니고 함수만을 이용하여 단일 연결 리스트를 구현하는데 성공했다! 이제 이를 응용하면 스택, 큐, 트리 등 다양한 자료구조를 구현하는 것도 가능하다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"커링을-이용한-파이프라인\"\n  }, React.createElement(_components.a, {\n    href: \"#커링을-이용한-파이프라인\"\n  }, \"커링을 이용한 파이프라인\")), \"\\n\", React.createElement(_components.p, null, \"함수형 자료구조를 만드는 것에는 성공했지만 코드를 보다시피 사용하기에는 많이 불편하다. 함수 합성은 이전에 작성했던 코드 외에도 메서드 체이닝, 파이프라인 등 다양한 방법으로 사용할 수 있다. 여기서는 파이프라인을 구현해보자. 파이프라인은 함수를 연속적으로 실행하는 것을 의미한다. Elixir와 같은 언어는 파이프 연산자(\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">|></code>\"\n    }\n  }), \")를 제공해주기도 하지만 TypeScript는 제공해주지 않는다. 그래서 직접 구현할 필요가 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">pipe</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>fns<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Function</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">any</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> fns<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 6</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"구현은 어렵지 않다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pipe</code>\"\n    }\n  }), \" 함수도 고차 함수기 때문에 복잡할 수 있지만 내용을 보면 단순히 함수 배열을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">reduce</code>\"\n    }\n  }), \"를 통해 순회하면서 함수를 실행해줄 뿐이다. 문제는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pipe</code>\"\n    }\n  }), \" 함수는 인자를 하나만 받기 때문에 앞서 작성한 함수 중 인자를 2개 이상 받는 함수는 수정이 필요하다. 이를 해결하기 위해서는 커링을 이용해야 한다. 커링은 함수를 인자를 하나만 받는 함수로 변환하는 것을 의미한다. 직접 앞서 구현한 여러 함수를 리팩토링 할 수도 있지만 여기서는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">curry</code>\"\n    }\n  }), \"라는 함수를 만들어 변환해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Function</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curryFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">any</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">>=</span> fn<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args2<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">any</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">curryFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>args2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> curryFn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 함수를 사용하면 기존에 만들어진 함수를 조각낼 수 있다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">append</code>\"\n    }\n  }), \" 함수는 인자를 2개 받는 함수이다. 이를 커링을 이용하여 인자를 하나만 받는 함수로 변환해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> curriedAppend <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>append<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">curriedAppend</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Cons(1, Cons(2, Cons(3, Cons(4, null))))</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이제 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pipe</code>\"\n    }\n  }), \" 함수를 수정하여 인자를 2개 이상 받는 함수를 사용할 수 있도록 해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// ... 앞서 구현한 함수들</span>\\n<span class=\\\"token keyword\\\">const</span> curriedAppend <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>append<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> curriedUpdate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> curriedShift <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>shift<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Cons</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">curriedAppend</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  curriedShift<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">curriedUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  toArray<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [10, 3, 4]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"코드를 선형적이고 더 읽기 쉽게 만들어졌다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"필자에게 함수형 자료구조가 필요할까?라는 질문을 한다면 \", React.createElement(_components.strong, null, \"실무적인 부분에서 필요없다\"), \"라고 답할 수 있다. 필자가 쉽게 설명하지 못하는 탓도 있지만 기존 자료구조보다 훨씬 더 복잡하고 어렵기까지 하다. 하지만 이 내용을 이해한다면 조금 더 코드를 작성하는 것에 재미를 붙일 수 있을 것이라 믿는다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","a","h1","h2","blockquote","span","ol","li","ul","_provideComponents","components","React","href","rel","id","Image","src","caption","dangerouslySetInnerHTML","__html","style","marginTop","wrapper","MDXLayout","_ref","width","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body"],"sourceRoot":""}