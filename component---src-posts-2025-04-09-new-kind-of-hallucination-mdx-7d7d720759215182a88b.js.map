{"version":3,"file":"component---src-posts-2025-04-09-new-kind-of-hallucination-mdx-7d7d720759215182a88b.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2025-04-09-new-kind-of-hallucination.mdx","webpack://kciter.so/./src/components/Image/index.tsx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"요즘은 정말 AI 열풍 그 자체입니다. 저 또한 최근에는 코딩, 학습, 글쓰기, 리서치 등 다양한 영역에서 AI를 적극적으로 이용하고 있습니다. 지금 이 시점의 GPT, Claude와 같은 툴은 정말 대단합니다. 오랫동안 자료 조사가 필요했던 내용을 순식간에 정리해 주고, 저 자신도 자세히 몰랐던 내용을 알려주기도 합니다. 이를 통해 새로운 영감이 생겨나기도 합니다. 저 또한, 다양한 영역에 AI를 이용하며 새로운 재미를 얻고 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"다만, 어느 순간 이상한 기분을 느꼈습니다. AI에게 내 생각을 말하고, 새로운 아이디어를 얻는 과정에서 마치 모든 것이 잘 풀리는 듯한 느낌이 들었습니다. 문제는 AI의 도움을 받아 쓴 글을 다시 읽을 때 발생했습니다. 언제나 퇴고할 때는 수정할 곳이 보였지만 AI를 이용한 글은 그 정도가 아니었습니다. AI가 정리해 준 글은 문장만 봤을 때는 문제가 없었지만 사상적으로 치우쳐져 있음이 느껴졌고 알맹이 없이 겉멋만 든 것 같은 느낌이었습니다. 그리고 당연하겠지만 마치 내가 쓴 글이 아닌 다른 사람의 글을 읽는 듯한 기분이었습니다. 그 순간, \", React.createElement(_components.strong, null, \"새로운 종류의 환각\"), \"에 당했다는 것을 깨달았습니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"새로운-환각이라니\"\n  }, React.createElement(_components.a, {\n    href: \"#새로운-환각이라니\"\n  }, \"새로운 환각이라니?\")), \"\\n\", React.createElement(_components.p, null, \"기존 AI에서 말하는 환각은 잘못된 정보를 제공는 것을 말합니다. 이 환각은 지금에 와서는 많이 해소됐습니다. 하지만 지금 새롭게 등장한 환각은 잘못된 정보를 전달하는 것이 아닌 '내 기분이 좋아지는 답변'을 하는 것입니다. 가령 누군가 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">순수 함수가 없는 함수형 프로그래밍에 대해 어떻게 생각해? 솔직히 나는 이게 앞으로 미래의 프로그래밍 먹거리가 될 새로운 패러다임이 될거라고 생각해. 왜냐하면 힙하고 멋지거든. 안그래?</code>\"\n    }\n  }), \"라고 말한다면 대부분의 개발자는 속으로 미쳤다고 생각할 것입니다. 하지만 AI는 이런 말을 진지하게 받아 좋은 쪽으로 해석해 줍니다. 그리고 AI를 믿는 사람에게 \", React.createElement(_components.strong, null, \"역시 내 생각이 맞아\"), \"라고 생각하게 만듭니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-09-new-kind-of-hallucination/what-the.png\",\n    caption: \"미치겠다\"\n  }), \"\\n\", React.createElement(_components.p, null, \"이러한 AI의 아부(?)로 사람은 자기 확신이 강해집니다. 이처럼 \", React.createElement(_components.strong, null, \"새로운 환각은 편향\"), \"이라 할 수 있습니다. AI는 기본적으로 내가 원하는 답을 주고, 내가 원하는 대로 행동합니다. 그래서 AI는 내가 원하는 답을 줄 수 있지만, 다른 사람들에게도 통용되는 정답은 아닐 수 있다는 것을 깨달아야 합니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"어떻게-해야할까\"\n  }, React.createElement(_components.a, {\n    href: \"#어떻게-해야할까\"\n  }, \"어떻게 해야할까?\")), \"\\n\", React.createElement(_components.p, null, \"지금의 AI는 무언가가 옳다고 믿는 사람에게 그 믿음을 더욱 강화시켜 주는 방향으로 작용합니다. 그래서 AI를 이용할 때는 반드시 \", React.createElement(_components.strong, null, \"비판적인 사고\"), \"를 잃지 말고, AI가 제공하는 정보에 대해 스스로 판단해야 합니다. 하지만 아무래도 쉽지 않은 일입니다. 저 같은 경우는 다음과 같은 방법을 이용합니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"AI에게 '솔직하게, 비판적으로, 객관적으로' 등 나의 의견을 반박하도록 요청합니다.\"), \" \", React.createElement(\"br\"), \"\\n아쉽게도 지금의 AI는 정말로 잘못된 지식이 아닌 경우엔 웬만해서는 나의 의견에 동조하는 방식으로 작동합니다. AI, 특히 GPT의 아부를 듣고 있다보면 이성이 마비되는 느낌을 받기도 합니다. 어쩌면 권력자들이 변하는 이유도 이런 이유가 아닐까 싶습니다. 아무튼 AI에게 나의 의견을 반박하도록 요청하면 AI는 나의 의견을 비판적으로 바라보는 데 도움을 줄 수 있습니다. 하지만 이 방법은 AI가 나의 의견을 비판적으로 바라보지 않는 경우도 많기 때문에 반드시 스스로 판단해야 합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"등록된 메모리를 제거하거나 새로운 채팅을 시작합니다.\"), \" \", React.createElement(\"br\"), \"\\n이전에 대화했던 내역을 참고하여 계속해서 편향적인 답변을 하는 경우가 있습니다. 아무래도 나의 관심사나 생각을 반영해서 좋은 피드백을 받을 수 있도록 작동하는 것 같습니다. 다양한 관점으로 생각할 수 있도록 하기 위해서는 이전 대화 내역을 지우고 필요한 경우 메모리까지 삭제하여 새로운 대화를 시작하는 것이 좋습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"새로운 무언가를 생각한다면 스스로 정리되기 전까지 AI를 제외합니다.\"), \" \", React.createElement(\"br\"), \"\\n흔히 AI는 검색 엔진 끝판왕이라는 말을 듣습니다. 이처럼 AI는 기존에 존재하는 지식을 빠르게 알려주고 정리하는 능력이 뛰어납니다. 하지만 AI는 새로운 지식을 만들어내는 데는 한계가 있습니다. AI는 기존에 존재하는 지식을 바탕으로 새로운 것을 만들어내기 때문에, 기존에 존재하지 않는 지식은 만들 수 없습니다. 따라서 새로운 무언가를 만든다면 반드시 스스로 생각을 먼저 정리해야 합니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"물론 가장 중요한 것은 자기 비판적인 사고입니다. 끝없이 내 생각을 비판하고 정확한 지식을 위해 탐구하는 자세가 더 중요합니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"정말 중요한 것은 \", React.createElement(_components.strong, null, \"정확한 지식\"), \"이라는 것을 깨닫습니다. AI를 이용한 활동은 정말 편리하지만, 정확한 지식이 없다면 AI가 제공하는 정보는 그저 환각일 뿐입니다. 정확한 지식 없이 신념 만을 가지고 있다면 반드시 잘못된 방향으로 가게 됩니다. 만약 중요한 일을 한다면, 아직까지 AI는 그저 도구라는 것을 인지하고 최종 판단은 사람에게 달려 있다는 것을 잊지 말아야 합니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  console.log(isExpanded);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              zIndex: 1000\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <img\n              src={src}\n              width=\"100%\"\n              style={{\n                display: 'block',\n                borderRadius: 8,\n                width: 'auto',\n                height: 'auto',\n                maxWidth: 1440,\n                maxHeight: '80vh',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            />\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","h1","a","span","ol","li","_provideComponents","components","React","id","href","dangerouslySetInnerHTML","__html","Image","src","caption","wrapper","MDXLayout","_ref","width","maxWidth","expandable","isExpanded","toggleExpanded","useState","console","log","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","zIndex","display","borderRadius","maxHeight","transform","document","body","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}