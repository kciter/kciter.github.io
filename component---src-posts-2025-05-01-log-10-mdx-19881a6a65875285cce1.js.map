{"version":3,"file":"component---src-posts-2025-05-01-log-10-mdx-19881a6a65875285cce1.js","mappings":"gRAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,OAAQ,WACPC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,uGAAwG,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,6DAAgE,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,eAAgB,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAMI,EAAAA,cAAoBP,EAAYI,OAAQ,KAAM,wBAAyB,KAAMG,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,4FAA6F,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,oIAAqI,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,6HAA8H,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAMI,EAAAA,cAAoBP,EAAYI,OAAQ,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,sGAAuG,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,oIAAyI,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,oHAAqH,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,2CAC9mD,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECcA,MAAMW,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://kciter.so/./src/posts/2025-05-01-log-10.mdx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"많은 회사가 개발자 생산성을 높이기 위해 DX(개발자 경험)에 투자합니다. 하지만 가끔은 '멋진 것'만 하려 하거나, 규칙을 만드는 데 집중하다가 DX의 본질을 놓치기도 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"저는 DX의 본질은 \\\"모르는 것을 모르도록, 아는 것을 알 수 있도록 만드는 것\\\"에 있다고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"조금 더 풀어보자면,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"1️⃣ 모르는 것을 모르도록 만들자\")), \"\\n\", React.createElement(_components.p, null, \"초보자든 숙련자든, 어떤 시스템을 쓸 때 \\\"이걸 모르면 망한다\\\"는 순간이 생기면 안 됩니다. 가장 많은 실수는 '개발자가 모르는 규칙이 생기는 것'입니다.\"), \"\\n\", React.createElement(_components.p, null, \"개발자는 항상 모든 내부 동작을 알 수는 없고, 몰라도 안전하게 일할 수 있어야 해요.\\n기본적인 실수나 오류는 시스템이 알아서 막아주고, 이상한 사용법은 유도하지 않아야 합니다. 이걸 가능하게 하는 게 바로 적절한 추상화입니다.\"), \"\\n\", React.createElement(_components.p, null, \"잘 만든 추상화는 복잡한 내부를 감추고, 꼭 알아야 할 것만 드러냅니다.\\n“이걸 이렇게만 쓰면 된다”는 확신을 주는 것이죠.\\n그 덕분에 실수는 줄어들고, 온보딩 속도는 빨라지고, 전체 시스템의 안정성도 높아집니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"2️⃣ 아는 것을 알 수 있도록 만들자\")), \"\\n\", React.createElement(_components.p, null, \"시스템이나 코드를 이해하는 데 ‘감’이나 ‘경험’이 필요하다면, 이미 생산성의 큰 장애물이 생긴 것입니다.\\n암묵지가 많아질수록, 아는 사람만 알고 다른 사람은 해매게 됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"\\\"그건 원래 그렇게 하는 거야\\\", \\\"이건 OOO이 짠 거라 물어봐야 해\\\" 같은 상황은 지식을 공유하지 못한 결과죠.\\nDX는 이런 암묵지를 줄이고, 누구나 빠르게 이해하고 파악할 수 있도록 정보를 명시적으로 드러내는 데 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"어디서 뭘 잘못했는지, 지금 시스템이 어떻게 돌아가는지 로그, 문서, 코드 구조, 네이밍, 메시지 등을 통해 의도를 드러내고, 흐름을 추적할 수 있게 만드는 것, 그게 DX의 핵심 역할 중 하나입니다.\"), \"\\n\", React.createElement(_components.p, null, \"DX는 결국 '일이 잘 굴러가게 하는' 데 집중해야 한다고 생각합니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}