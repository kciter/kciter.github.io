{"version":3,"sources":["webpack://kciter.so/./src/components/RelatedPost/index.tsx","webpack://kciter.so/./src/components/SEO/index.tsx","webpack://kciter.so/./src/components/Bio/index.tsx","webpack://kciter.so/./src/pages/index.tsx"],"names":["posts","current","style","className","map","post","node","fields","slug","key","href","src","frontmatter","image","title","date","SEO","description","meta","site","useStaticQuery","metaDescription","siteMetadata","metaTitle","htmlAttributes","ko","titleTemplate","undefined","name","content","property","find","item","concat","defaultProps","lang","data","useState","setPosts","useEffect","allMdx","edges","sort","Math","random","splice","RelatedPost","padding"],"mappings":"yHA8BA,IArBoB,SAAC,GAAiD,IAA/CA,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,MACrC,OACE,uBAAKC,UAAU,UAAUD,MAAOA,GAC9B,uBAAKC,UAAU,iBACZH,EAAMI,KACL,SAACC,GAAD,OACEA,EAAKC,KAAKC,OAAOC,OAASP,GACxB,uBAAKE,UAAU,eAAeM,IAAKJ,EAAKC,KAAKC,OAAOC,MAClD,qBAAGE,KAAML,EAAKC,KAAKC,OAAOC,MACxB,uBAAKG,IAAKN,EAAKC,KAAKM,YAAYC,QAChC,uBAAKV,UAAU,SAASE,EAAKC,KAAKM,YAAYE,OAC9C,6BAAQT,EAAKC,KAAKC,OAAOQ,e,oECDrCC,EAAM,SAAC,GAA4C,IAAD,MAAzCF,EAAyC,EAAzCA,MAAOG,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KACzBC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAYT,IAAK,UAAIK,EAAKG,oBAAT,aAAI,EAAmBR,OAE9C,OACE,gBAAC,IAAD,CACEU,eAAgB,CACdC,GAAI,MAENX,MAAOS,EACPG,cAAeZ,EAAK,sBAAsBa,EAC1CT,KAAM,CACJ,CACEU,KAAK,cACLC,QAASR,GAEX,CACES,SAAS,SACTD,QAAQ,iBAEV,CACEC,SAAS,WACTD,QAASN,GAEX,CACEO,SAAS,iBACTD,QAASR,GAEX,CACES,SAAS,UACTD,QAAQ,WAEV,CACEC,SAAS,eACTD,QAAQ,aAEV,CACEC,SAAS,YACTD,QAAQ,SAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAS,iBAEX,CACED,KAAK,gBACLC,QAASN,GAEX,CACEK,KAAK,sBACLC,QAASR,GA3CP,UA6CJH,EAAKa,MAAK,SAACC,GAAD,MAA6B,aAAdA,EAAKJ,eA7C1B,QA6CkD,CACpDE,SAAS,WACTD,QAAS,mCA/CP,UAiDJX,EAAKa,MAAK,SAACC,GAAD,MAA6B,aAAdA,EAAKJ,eAjD1B,QAiDkD,CACpDE,SAAS,sBACTD,QAAS,oCAEXI,OAAOf,MAKfF,EAAIkB,aAAe,CACjBC,KAAK,KACLjB,KAAM,GACND,YAAY,IAUd,O,2HClGA,EAfY,WACV,OACE,uBAAKd,UAAU,oBACb,uBAAKA,UAAU,UACb,uBAAKQ,IAAI,8BAGX,uBAAKR,UAAU,WACb,uBAAKA,UAAU,QAAf,OACA,uBAAKA,UAAU,eAAf,aCwCR,EA5Cc,SAAC,GAAyB,IAAvBiC,EAAsB,EAAtBA,KAAsB,GACXC,gBAAnBrC,EAD8B,KACvBsC,EADuB,KAQrC,OANAC,gBAAU,WACRD,EACGF,EAAaI,OAAOC,MAAMC,MAAK,kBAAMC,KAAKC,SAAW,MAAKC,OAAO,EAAG,MAEtE,IAGD,gBAAC,IAAD,KACE,gBAAC7B,EAAA,EAAD,CAAKF,MAAM,KAEX,gBAAC,EAAD,MAEA,mCACCd,GAAS,gBAAC8C,EAAA,EAAD,CAAa9C,MAAOA,EAAOE,MAAO,CAAE6C,QAAS","file":"component---src-pages-index-tsx-46d84d3261e1faf0dcd6.js","sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\";\nimport React from \"react\";\n\ninterface RelatedPostProps {\n  posts: any;\n  current?: string;\n  style?: React.CSSProperties;\n}\n\nconst RelatedPost = ({ posts, current, style }: RelatedPostProps) => {\n  return (\n    <div className=\"related\" style={style}>\n      <div className=\"related-posts\">\n        {posts.map(\n          (post: any) =>\n            post.node.fields.slug !== current && (\n              <div className=\"related-post\" key={post.node.fields.slug}>\n                <a href={post.node.fields.slug}>\n                  <img src={post.node.frontmatter.image} />\n                  <div className=\"title\">{post.node.frontmatter.title}</div>\n                  <small>{post.node.fields.date}</small>\n                </a>\n              </div>\n            )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RelatedPost;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  imagePath?: string;\n  meta?: any;\n}\n\nconst SEO = ({ title, description, meta }: SEOProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const metaTitle = title || site.siteMetadata?.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        ko: \"ko\",\n      }}\n      title={metaTitle}\n      titleTemplate={title ? `%s | kciter.so` : undefined}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `author`,\n          content: `Lee Sun-Hyoup`,\n        },\n        {\n          property: `og:title`,\n          content: metaTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:site_name`,\n          content: `kciter.so`,\n        },\n        {\n          property: `og:locale`,\n          content: `ko_KR`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: \"Lee Sun-Hyoup\",\n        },\n        {\n          name: `twitter:title`,\n          content: metaTitle,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        meta.find((item: any) => item.name === \"og:image\") ?? {\n          property: `og:image`,\n          content: \"https://kciter.so/images/og.png\",\n        },\n        meta.find((item: any) => item.name === \"og:image\") ?? {\n          property: `og:image:secure_url`,\n          content: \"https://kciter.so/images/og.png\",\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from \"react\";\n\nconst Bio = () => {\n  return (\n    <div className=\"member-container\">\n      <div className=\"avatar\">\n        <img src=\"/images/about/avatar.jpg\" />\n      </div>\n\n      <div className=\"summary\">\n        <div className=\"name\">이선협</div>\n        <div className=\"description\">그냥 개발자</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Bio;\n","import React, { useEffect, useState } from \"react\";\nimport DefaultTemplate from \"@templates/default\";\nimport SEO from \"@components/SEO\";\nimport RelatedPost from \"@components/RelatedPost\";\nimport Bio from \"@components/Bio\";\nimport { graphql, PageProps } from \"gatsby\";\n\nconst Index = ({ data }: PageProps) => {\n  const [posts, setPosts] = useState();\n  useEffect(() => {\n    setPosts(\n      (data as any).allMdx.edges.sort(() => Math.random() - 0.5).splice(0, 6)\n    );\n  }, []);\n\n  return (\n    <DefaultTemplate>\n      <SEO title=\"\" />\n\n      <Bio />\n\n      <h2>Posts</h2>\n      {posts && <RelatedPost posts={posts} style={{ padding: 0 }} />}\n    </DefaultTemplate>\n  );\n};\n\nexport const relatedPostQuery = graphql`\n  query RelatedPost {\n    allMdx(\n      filter: {\n        fields: { type: { eq: \"post\" } }\n        frontmatter: { draft: { ne: true } }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            date\n            slug\n          }\n          frontmatter {\n            title\n            image\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Index;\n"],"sourceRoot":""}