{"version":3,"file":"3a8302e332b4957f4cf748aa9279152d3ae876fe-0d89d6bb2b8267eac874.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2023-07-17-railway-oriented-programming.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\",\n    h1: \"h1\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"프로그램을 개발함에 있어 \", React.createElement(_components.strong, null, \"에러와 사이드 이펙트(부수 효과)를 처리하는 것은 필연적\"), \"이다. 아무리 꼼꼼하게 코드를 작성해도 생각하지 못한 문제는 존재하며 특히나 지속해서 발전하는 프로그램은 기술 부채와 함께 \", React.createElement(_components.strong, null, \"끊임없이 새로운 문제가 발생\"), \"한다.\"), \"\\n\", React.createElement(_components.p, null, \"문제가 발생하는 것은 개발자 개인에게도 프로그램을 판매하는 회사에게도 끔찍한 일이다. 아무리 단순하게 해결할 수 있는 문제여도 사용자에게 피해가 간다면 금전적 손실이 발생할 수 밖에 없다. 그렇기 때문에 \", React.createElement(_components.strong, null, \"프로그래밍은 안전하게 프로그램을 작성할 수 있는 형태로 끊임없이 발전\"), \"해왔고 개발자들은 다양한 방법을 생각해냈다. 그 중 하나가 방법론인 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Railway-Oriented Programming</code>\"\n    }\n  }), \"(이하 ROP)이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-17-railway-oriented-programming/trip.jpg\",\n    caption: \"여행을 떠나보자\"\n  }), \"\\n\", React.createElement(_components.h1, {\n    id: \"사이드-이펙트\"\n  }, React.createElement(_components.a, {\n    href: \"#사이드-이펙트\"\n  }, \"사이드 이펙트\")), \"\\n\", React.createElement(_components.p, null, \"먼저 사이드 이펙트에 대해서 자세히 알아보자. 사이드 이펙트란 \", React.createElement(_components.strong, null, \"함수 내부(혹은 프로시저)에서 발생한 일이 함수 외부에 영향을 미치는 것\"), \"을 말한다. 구체적으로 다음과 같은 경우를 말한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"함수 내부에서 외부에 있는 변수를 조작하는 경우\"), \"\\n\", React.createElement(_components.li, null, \"네트워크 통신 중 잘못된 데이터를 받아 프로그램에 영향을 미치는 경우\"), \"\\n\", React.createElement(_components.li, null, \"함수 내부에서 에러가 발생하여 프로그램에 문제가 발생하는 경우\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위와 같은 사례 외에도 다양하게 존재할 수 있다. 요즘엔 함수 내부에서 외부 값을 참조하거나 변경하면 좋지 않다는 것이 널리 알려져 있기 때문에 보통 사이드 이펙트는 \", React.createElement(_components.strong, null, \"I/O로 인한 문제\"), \"로 접하는 경우가 많다. 그래서 이런 문제를 해결하기 위해 많은 개발자들이 예외 처리를 하는 것에 많은 공을 들인다. 하지만 또 많은 개발자들이 간과하는 문제는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">함수 내부에서 에러가 발생하여 프로그램에 문제가 발생하는 경우</code>\"\n    }\n  }), \"라고 할 수 있다. 아주 간단한 코드를 작성하더라도 이런 문제는 발생할 수 있다. 오히려 간단하기 때문에 실수하는 경우가 많다. 예를 들어, 다음과 같은 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getFirstElement</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> list<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 리스트의 첫번째 값을 찾아 불러오는 아주 간단한 함수다. 얼핏보면 큰 문제가 없어보이나 \", React.createElement(_components.strong, null, \"리스트가 비어있을 때 문제가 발생\"), \"한다. 물론 이런 간단한 문제는 쉽게 해결할 수 있지만 막상 작성할 때 실수하는 경우가 많다.\"), \"\\n\", React.createElement(_components.p, null, \"사이드 이펙트는 프로그램의 흐름을 예측하기 어렵게 만들며, 특히나 다른 개발자가 작성한 코드를 수정할 때 사이드 이펙트를 고려하지 않으면 예상치 못한 문제가 발생할 수 있다. 이러한 문제를 해결하기 위해서 다양한 방법이 존재한다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"다양한-해결-방법\"\n  }, React.createElement(_components.a, {\n    href: \"#다양한-해결-방법\"\n  }, \"다양한 해결 방법\")), \"\\n\", React.createElement(_components.p, null, \"단순히 분기를 이용하는 것 외에도 사이드 이펙트를 해결 할 수 있는 방법은 다양하다. ROP에 대해 알아보기 전에 다른 방법들을 먼저 살펴보자. 사이드 이펙트를 해결하는 방법은 크게 두 가지로 나뉜다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"LBYL (Look Before You Leap)\"), \"\\n\", React.createElement(_components.li, null, \"EAFP (Easier to Ask for Forgiveness than Permission)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"LBYL은 \", React.createElement(_components.strong, null, \"뛰기 전에 보라\"), \"라는 뜻이고 EAFP는 \", React.createElement(_components.strong, null, \"허락보다는 용서를 구하는 것이 쉽다\"), \"라는 뜻이다. 아마 Python을 공부해봤다면 이 두 방법에 대해 들어본 적이 있을 것이다. LBYL은 로직 내에 명시적으로 조건을 검사하는 것을 말한다. 예를 들어, 다음과 같은 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getFirstElement</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int<span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isEmpty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> list<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 비어있는 리스트가 매개 변수로 들어올 것을 예상하여 \", React.createElement(_components.strong, null, \"분기를 통해 미리 예외 처리\"), \"를 한다. 반면 EAFP는 예외 처리를 통해 사이드 이펙트를 해결하는 방법이다. 예를 들어, 다음과 같은 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getFirstElement</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int<span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    list<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token operator\\\">:</span> Exception<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">null</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 LBYL과 달리 \", React.createElement(_components.strong, null, \"올바른 로직을 작성한 후 예외가 발생하면 잡는 방식\"), \"으로 사이드 이펙트를 해결한다. 말 그대로 먼저 처리한 후 예외에 대한 용서를 구하는 방식이다.\"), \"\\n\", React.createElement(_components.p, null, \"Python에서는 LBYL보다는 EAFP를 선호하지만 필자는 이 두 스타일에 우열은 없다고 생각한다. 상황에 따라 적절한 것이 있을 뿐이다. 이 방법들에 대한 사용 사례를 조금 더 자세히 살펴보자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"lbyl\"\n  }, React.createElement(_components.a, {\n    href: \"#lbyl\"\n  }, \"LBYL\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"순수-함수\"\n  }, React.createElement(_components.a, {\n    href: \"#순수-함수\"\n  }, \"순수 함수\")), \"\\n\", React.createElement(_components.p, null, \"외부와 상호작용 해야하는 I/O를 다루는 것이 아니라면 순수 함수로 작성하여 사이드 이펙트 문제를 해결 할 수 있다. 순수 함수는 \", React.createElement(_components.strong, null, \"동일한 인자\"), \"를 받았을 때 항상 \", React.createElement(_components.strong, null, \"같은 값\"), \"을 반환하는 함수를 말한다. 이말은 즉, \", React.createElement(_components.strong, null, \"결과를 예측할 수 있다\"), \"는 말과 동일하다. 다음과 같은 함수는 순수 함수라 할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"참고로 에러가 발생할 수 있는 예외는 처리해줘야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"프로그램은 컴퓨터 시스템 위에 올라가기 때문에 수학처럼 \", React.createElement(_components.strong, null, \"완전하게 순수할 수는 없다\"), \". 그래서 순수 함수의 범위가 애매하게 느껴질 수 있다. 예를 들면, 부동 소수점 문제가 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">var</span> num1<span class=\\\"token operator\\\">:</span> Double <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.0</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token number\\\">0</span> until <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  num1 <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1.0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">val</span> num2<span class=\\\"token operator\\\">:</span> Double <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1.0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>num1 <span class=\\\"token operator\\\">==</span> num2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// false</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 수학적으로 생각하면 num1과 num2는 같은 값이기 때문에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">true</code>\"\n    }\n  }), \"가 나와야 정상이다. 하지만 부동 소수점이라는 한계가 있기 때문에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">false</code>\"\n    }\n  }), \"가 나온다. 만약 위와 같이 부동 소수점을 다루는 함수가 있다면 과연 그 함수를 순수하다고 할 수 있을까?\"), \"\\n\", React.createElement(_components.p, null, \"이를 해결하기 위해서는 프로그램 목적에 따라 \", React.createElement(_components.strong, null, \"구현 스펙\"), \"을 정할 필요가 있다. 다시 부동 소수점을 예로 든다면 자세한 소수점이 필요 없다면 적절한 단위에서 반올림을 통해 문제를 해결하거나 정확한 계산이 필요하다면 Double 자료형을 쓰는 것이 아닌 문자열을 통해 정확한 소수점을 계산해주는 객체를 만들어 사용할 수 있다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"guard-clause-패턴\"\n  }, React.createElement(_components.a, {\n    href: \"#guard-clause-패턴\"\n  }, \"Guard Clause 패턴\")), \"\\n\", React.createElement(_components.p, null, \"Guard Clause 패턴은 로직의 시작 지점에 방어 조건을 먼저 작성하는 패턴이다. 패턴이라하니 복잡하다 느낄 수 있지만 실제로는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">if</code>\"\n    }\n  }), \"를 이용하여 간단하게 구현할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// JavaScript</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authorize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">user</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>role <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'admin'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>isBlocked<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n\\n  <span class=\\\"token comment\\\">// 권한이 있는 사용자에게만 보여줄 로직</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보다시피 매우 간단하다. Guard Clause 패턴의 핵심은 \", React.createElement(_components.strong, null, \"로직 상단에 방어 조건이 있는 것이며 중첩된 if를 피하는 것\"), \"이다. 이를 통해 함수의 \", React.createElement(_components.strong, null, \"가독성\"), \"을 높일 수 있다. 참고로 Swift는 언어 자체에서 Guard 문법을 지원한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code class=\\\"language-swift\\\"><span class=\\\"token comment\\\">// Swift</span>\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function-definition function\\\">authorize</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token class-name\\\">Bool</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// if와 달리 조건이 맞지 않으면 실행된다.</span>\\n  <span class=\\\"token keyword\\\">guard</span> user<span class=\\\"token punctuation\\\">.</span>role <span class=\\\"token operator\\\">==</span> <span class=\\\"token punctuation\\\">.</span>admin <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">guard</span> <span class=\\\"token operator\\\">!</span>user<span class=\\\"token punctuation\\\">.</span>isBlocked <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 권한이 있는 사용자에게만 보여줄 로직</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"eafp\"\n  }, React.createElement(_components.a, {\n    href: \"#eafp\"\n  }, \"EAFP\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"try-catch-문법\"\n  }, React.createElement(_components.a, {\n    href: \"#try-catch-문법\"\n  }, \"try-catch 문법\")), \"\\n\", React.createElement(_components.p, null, \"순수 함수는 결과를 예측하게 해주지만 \", React.createElement(_components.strong, null, \"외부 I/O와 개발자가 미처 알아차리지 못한 문제\"), \"는 해결해주지 않는다. 특히 요즘 제작되는 대부분의 소프트웨어는 거의 반드시 외부 I/O를 다루기 때문에 새로운 해결 방법을 찾아야 한다. 그 중 하나가 \", React.createElement(_components.strong, null, \"try-catch 문법\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, \"try-catch 문법은 이미 오래전부터 많은 언어가 지원하고 있다. 그래서 많은 개발자들이 잘 알고있는 예외 처리 방법이기도 하다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 예외가 발생할 수 있는 코드</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token operator\\\">:</span> Exception<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 예외가 발생했을 때 실행할 코드</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// JavaScript</span>\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 예외가 발생할 수 있는 코드</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 예외가 발생했을 때 실행할 코드</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># Python</span>\\n<span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token comment\\\"># 예외가 발생할 수 있는 코드</span>\\n<span class=\\\"token keyword\\\">except</span> Exception <span class=\\\"token keyword\\\">as</span> e<span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token comment\\\"># 예외가 발생했을 때 실행할 코드</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"언어마다 조금씩 문법은 조금씩 다르지만 형태는 거의 같다. try-catch 문법은 \", React.createElement(_components.strong, null, \"예외가 발생할 수 있는 코드를 try 블록에 작성\"), \"하고 \", React.createElement(_components.strong, null, \"예외가 발생했을 때 실행할 코드를 catch 블록에 작성\"), \"한다. 이렇게 작성하면 예외가 발생했을 때 catch 블록의 코드가 실행된다. try-catch는 어디에서 사용되어야 할까? 대체로 함수를 사용하는 상위 로직에서 사용한다. 그리고 사용 당하는 함수는 에러만을 던진다. 이는 개발자가 미리 알고 의도한 에러든 예상치 못한 에러든 상관없다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">authorize</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token operator\\\">:</span> User<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>role <span class=\\\"token operator\\\">!=</span> Role<span class=\\\"token punctuation\\\">.</span>ADMIN<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">RuntimeException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"권한이 없습니다.\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">login</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">authorize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">User</span><span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"kciter\\\"</span></span><span class=\\\"token punctuation\\\">,</span> role <span class=\\\"token operator\\\">=</span> Role<span class=\\\"token punctuation\\\">.</span>USER<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token operator\\\">:</span> Exception<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"try-catch 문법은 크게 문제가 없어보이지만 \", React.createElement(_components.strong, null, \"가독성\"), \"에 조금 문제가 있다. try-catch는 순차적으로 흐르지 않는다. 에러가 발생하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">catch</code>\"\n    }\n  }), \" 절로 이동하고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">finally</code>\"\n    }\n  }), \"와 같은 문법을 사용할 경우 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">try</code>\"\n    }\n  }), \"에서 처리된 후 온 것인지 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">catch</code>\"\n    }\n  }), \"에서 처리된 후 온 것인지 확인이 필요하다. 그렇기 때문에 프로그램을 그대로 종료할 것이 아니라면 어떤 절로 로직이 마무리 되더라도 문제없이 진행될 수 있도록 개발자가 신경써야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"또한, 해당 함수가 \", React.createElement(_components.strong, null, \"어떤 에러를 반환하는지 개발자가 미리 알아야 한다는 문제\"), \"가 있다. 특히 사용자 지정 에러가 많은 경우 생산성에 문제가 될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 try-catch가 나쁘다는 의미는 아니다. 서버 프로그램과 같이 \", React.createElement(_components.strong, null, \"절대로 패닉이 발생해선 안되는 프로그램\"), \"에서는 try-catch 문법은 매우 유용하다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> server <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">ServerSocket</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">8080</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Server is running on port </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">server<span class=\\\"token punctuation\\\">.</span>localPort</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> socket <span class=\\\"token operator\\\">=</span> server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">accept</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">val</span> reader <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Scanner</span><span class=\\\"token punctuation\\\">(</span>socket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInputStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">val</span> writer <span class=\\\"token operator\\\">=</span> socket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOutputStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Client connected: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">socket<span class=\\\"token punctuation\\\">.</span>inetAddress<span class=\\\"token punctuation\\\">.</span>hostAddress</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n    thread <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">val</span> text <span class=\\\"token operator\\\">=</span> reader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nextLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n          writer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toByteArray</span><span class=\\\"token punctuation\\\">(</span>Charset<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defaultCharset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token operator\\\">:</span> Exception<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span>\\n          socket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">break</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(\"figcaption\", {\n    style: {\n      marginTop: -16\n    }\n  }, \"서버는 신뢰성을 위해 최대한 살아있어야 한다\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"functor와-monad\"\n  }, React.createElement(_components.a, {\n    href: \"#functor와-monad\"\n  }, \"Functor와 Monad\")), \"\\n\", React.createElement(_components.p, null, \"펑터와 모나드는 \", React.createElement(_components.strong, null, \"함수형 프로그래밍\"), \"을 접하면 자주 들을 수 있는 개념이다. 일반적으로 처음 프로그래밍을 접하며 배운 내용들과는 이질적이기도 하고 설명에 수학적인 내용이 들어가는 경우도 있어서 어렵게 느껴질 수 있다. 하지만 하나씩 살펴보면 그리 어려운 개념은 아니다. 함수형 프로그래밍에 대한 설명은 이 글의 범위를 벗어나므로 어려운 개념은 생략하고 간단하게 펑터와 모나드를 살펴볼 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"먼저 펑터와 모나드를 이해하기 전에 \", React.createElement(_components.strong, null, \"타입\"), \"에 대해 살펴볼 필요가 있다. 함수형 프로그래밍에서 타입은 \", React.createElement(_components.strong, null, \"함수 합성\"), \"을 하기 위한 중요한 개념이다. 수학적 정의와 마찬가지로 프로그래밍 세계의 함수도 \", React.createElement(_components.strong, null, \"정의역과 치역\"), \"으로 이루어져 있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-17-railway-oriented-programming/domain-range.png\",\n    caption: \"정의역과 치역 그리고 공역\",\n    width: \"80%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"함수의 정의역과 치역은 집합이다. 그리고 프로그래밍 언어에선 이를 타입으로 표현한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Boolean <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span>\\nShort <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">32768</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">32767</span><span class=\\\"token punctuation\\\">}</span>\\nInt <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2147383647</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2147483647</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">...</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"그렇다면 다음 함수는 Int 집합에서 Double 집합으로 변형하는 함수라고 볼 수 있다. 즉, \", React.createElement(_components.strong, null, \"정의역은 매개 변수의 타입이고 치역은 반환 타입\"), \"이다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Double <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toDouble</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toDouble</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"하지만 위 함수는 b가 0일 경우 DivideByZero 에러가 발생하기 때문에 순수 함수가 아니다. 이 경우 \", React.createElement(_components.strong, null, \"치역을 온전한 Double\"), \"이라고 말할 수는 없다. 분기를 이용한 예외 처리로 이를 해결할 수 있지만 만약 에러마저도 치역에 포함시키고 싶다면 다른 방법을 사용해야 한다. 이 문제를 해결하는 것이 어렵게 느껴질 수 있지만 사실 상당히 간단한 일이다. Double이라는 집합으로는 에러를 담아낼 수 없기 때문에 새로운 집합이 필요하다. 즉, \", React.createElement(_components.strong, null, \"새로운 타입\"), \"을 만들어내면 되는 것이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-17-railway-oriented-programming/new-range.png\",\n    caption: \"묶어서 하나의 타입\"\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같은 개념이 \", React.createElement(_components.strong, null, \"펑터\"), \"라고 할 수 있다. 지금부터 프로그래밍 세계에서 펑터를 어떻게 구현할 수 있을지 알아보자.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"functor\"\n  }, React.createElement(_components.a, {\n    href: \"#functor\"\n  }, \"Functor\")), \"\\n\", React.createElement(_components.p, null, \"펑터라는 개념을 이용하면 타입을 확장하여 새로운 타입을 만들어낼 수 있다. 이를 통해 에러를 담아낼 수 있다. 코드를 살펴보기 전에 먼저 \", React.createElement(_components.strong, null, \"개념적인 이미지\"), \"부터 살펴보자.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-17-railway-oriented-programming/functor.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"위 이미지를 보면 펑터는 박스와 같다는 것을 알 수 있다. 박스 안에는 값이 들어있고 이를 \", React.createElement(_components.strong, null, \"꺼내서(unwrap value)\"), \" 함수를 \", React.createElement(\"strong\", null, \"적용(apply function)\"), \"한다. 그리고 다시 박스에 \", React.createElement(_components.strong, null, \"집어넣는다(rewrap value)\"), \". 왜 이런 번거로운 짓을 하는 걸까? 그 이유는 \", React.createElement(_components.strong, null, \"값에 함수를 적용할 때 발생하는 문제를 해결\"), \"하기 위함이다. 다시 다음 이미지를 살펴보자.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-17-railway-oriented-programming/functor-error.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"이번엔 펑터에 0을 나누는 함수를 적용했다. 이 경우 당연히 에러가 발생한다. 여기서 개발자는 적절한 로직을 통해 예외 처리를 할 수 있다. 이때 \", React.createElement(_components.strong, null, \"예외 처리를 통해 얻은 에러 객체를 펑터\"), \"에 넣어주면 된다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 코드로 구현하면 다음과 같다. 여기선 예제로 Kotlin을 사용하겠다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> Functor<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Functor<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token function\\\">Functor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"펑터에서 \", React.createElement(_components.strong, null, \"함수를 받아 값을 변형하는 함수\"), \"를 보통 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map</code>\"\n    }\n  }), \"이라고 한다. 어디서 많이본 함수 아닌가? 그렇다. 우리는 이미 펑터라는 개념을 자주 써왔다! 그럼 이번엔 위 Functor 클래스를 이용하는 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> Functor<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Functor<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token function\\\">Functor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Functor(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">value</span></span><span class=\\\"token string\\\">)\\\"</span></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> functor <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Functor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> functor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// Functor(2)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"아주 간단한 코드다. 펑터는 1이라는 값을 가지고 있고 이를 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map</code>\"\n    }\n  }), \" 함수를 통해 1을 더한 값을 반환한다. 이를 통해 펑터는 \", React.createElement(_components.strong, null, \"값을 변형하는 함수를 적용할 수 있다\"), \"는 것을 알 수 있다. 이제 펑터를 이용하여 조금 더 복잡한 것을 만들어보자. 이번에는 값이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">null</code>\"\n    }\n  }), \"인지 알 수 있는 펑터를 구현해볼 것이다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> Option<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Some<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Option<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">object</span> None<span class=\\\"token operator\\\">:</span> Option<span class=\\\"token operator\\\">&lt;</span>Nothing<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">companion</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> T<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Option<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">-></span> None\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">Some</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> Some <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Some(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">value</span></span><span class=\\\"token string\\\">)\\\"</span></span>\\n      <span class=\\\"token keyword\\\">is</span> None <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"None\\\"</span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token punctuation\\\">,</span> R<span class=\\\"token operator\\\">></span> Option<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Option<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Option<span class=\\\"token punctuation\\\">.</span>Some <span class=\\\"token operator\\\">-></span> Option<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Option<span class=\\\"token punctuation\\\">.</span>None <span class=\\\"token operator\\\">-></span> Option<span class=\\\"token punctuation\\\">.</span>None\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> option <span class=\\\"token operator\\\">=</span> Option<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Hello, World!\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> result1 <span class=\\\"token operator\\\">=</span> option<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toIntOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">val</span> result2 <span class=\\\"token operator\\\">=</span> option<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// None</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// Some</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Option</code>\"\n    }\n  }), \"이라는 값이 적용될 때 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">null</code>\"\n    }\n  }), \"인지 아닌지 판단하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">null</code>\"\n    }\n  }), \"이라면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">None</code>\"\n    }\n  }), \"을 값이 있다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Some</code>\"\n    }\n  }), \"으로 타입을 분류하는 펑터를 구현했다. 이를 이용하여 NullPointerException과 같은 문제를 예방할 수 있다. 그리고 패턴 매칭이 지원되는 언어라면 다음과 같이 더 안전하게 사용이 가능하다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> option <span class=\\\"token operator\\\">=</span> Option<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Hello, World!\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>option<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Some <span class=\\\"token operator\\\">-></span> option<span class=\\\"token punctuation\\\">.</span>value\\n    <span class=\\\"token keyword\\\">is</span> None <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"None\\\"</span></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// result는 null이 아님을 보장한다.</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// Hello, World!</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"만약 펑터를 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">null</code>\"\n    }\n  }), \"을 판단하는 것이 아니라 에러를 판단한다면 어떨까? 이번에는 에러를 판단하는 펑터를 구현해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> Result<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> V<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> E<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Success<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> V<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> V<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> Nothing<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Failure<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> error<span class=\\\"token operator\\\">:</span> E<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Nothing<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">companion</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> V<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">Success</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token operator\\\">:</span> Throwable<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">Failure</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Success(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">value</span></span><span class=\\\"token string\\\">)\\\"</span></span>\\n      <span class=\\\"token keyword\\\">is</span> Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Failure(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">error</span></span><span class=\\\"token string\\\">)\\\"</span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> R<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>V<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Option</code>\"\n    }\n  }), \"과 거의 비슷하다. 다만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">null</code>\"\n    }\n  }), \"을 판단하는 것이 아니라 try-catch를 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Throwable</code>\"\n    }\n  }), \"을 판단한다는 것이 다르다. 이를 이용하여 다음과 같이 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// Failure(error=java.lang.ArithmeticException: / by zero)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">of</code>\"\n    }\n  }), \" 메서드를 통해 에러가 발생한다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Failure</code>\"\n    }\n  }), \" 타입이 반환되고 발생하지 않는다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Success</code>\"\n    }\n  }), \" 타입이 반환된다. 마찬가지로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map</code>\"\n    }\n  }), \"을 이용해 값을 변형할 때 에러가 발생한다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Failure</code>\"\n    }\n  }), \"를 반환하고 발생하지 않는다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Success</code>\"\n    }\n  }), \"를 반환한다. 이를 통해 에러를 안전하게 처리할 수 있다. 여기서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Option</code>\"\n    }\n  }), \"때와 마찬가지로 패턴 매칭을 사용한다면 다음과 같이 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"여기까지는 아무런 문제가 없지만 다음과 같은 상황이 있을 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> a <span class=\\\"token operator\\\">+</span> b <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> a <span class=\\\"token operator\\\">/</span> b <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// Result&lt;Result&lt;Int, Throwable>, Throwable></span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 타입이 맞지 않아 컴파일 에러가 발생한다.</span>\\n\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// java.lang.ArithmeticException: / by zero</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드와 같이 함수마다 에러를 판단하기 위해 Result라는 펑터 타입을 사용한다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map</code>\"\n    }\n  }), \"을 이용할 때 \", React.createElement(_components.strong, null, \"박스를 다시 박스로 감싸는 문제\"), \"가 발생하게 된다. 이를 해결하기 위해서는 박스로 다시 감싸지 않고 값을 변형하는 해야한다. 프로그래밍 세계에서 이를 구현하기 위해 \", React.createElement(_components.strong, null, \"모나드\"), \"라는 개념을 이용할 수 있다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"monad\"\n  }, React.createElement(_components.a, {\n    href: \"#monad\"\n  }, \"Monad\")), \"\\n\", React.createElement(_components.p, null, \"모나드는 굉장히 어렵다라는 소문이 자자한 개념이다. 그러다보니 \", React.createElement(_components.a, {\n    href: \"https://xtendo.org/ko/monad#1\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"모나드 괴담\"), \"이라는 자료까지 생겨나곤했다. 하지만 이론적인 내용을 배제하고 하나씩 살펴보면 그다지 어렵지 않다는 것을 알 수 있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-17-railway-oriented-programming/monad-problem.jpeg\",\n    caption: \"일단 수학 용어는 치워보자\"\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 모나드는 펑터의 중첩을 해결 할 수 있다고 말했다. 실제로 프로그래밍 세계의 모나드는 이를 위해 탄생했다. 게다가 심지어 많은 개발자가 이미 모나드를 사용하고 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">val</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> list\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> it <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// listOf 함수는 List&lt;T> 타입을 반환한다.</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \"이라는 함수에 대해 다뤄본적이 있다면 위 코드는 익숙할 것이다. 만약 리스트를 변형하던 중 다시 리스트 타입을 반환해야 한다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \"을 사용한다. 만약 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map</code>\"\n    }\n  }), \" 함수였다면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;Int></code>\"\n    }\n  }), \" 타입을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;List&lt;Int>></code>\"\n    }\n  }), \" 타입으로 변형했겠지만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \"은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;Int></code>\"\n    }\n  }), \" 타입으로 변형할 수 있다. 간단하게 표현하자면 \", React.createElement(_components.strong, null, \"flatMap 함수가 반환한 것을 값으로 그대로 사용하는 것\"), \"이라 볼 수 있다. 이것이 모나드다.\"), \"\\n\", React.createElement(_components.p, null, \"다시 정리하면 모나드는 중첩을 해결한다. 이제 Result 펑터를 이용하여 모나드를 구현해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> Result<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> V<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> E<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Success<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> V<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> V<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> Nothing<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Failure<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> error<span class=\\\"token operator\\\">:</span> E<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Nothing<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">companion</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> V<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">Success</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token operator\\\">:</span> Throwable<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">Failure</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Success(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">value</span></span><span class=\\\"token string\\\">)\\\"</span></span>\\n      <span class=\\\"token keyword\\\">is</span> Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Failure(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">error</span></span><span class=\\\"token string\\\">)\\\"</span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> R<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>V<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// flatMap은 결과값을 그대로 사용한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> R<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>V<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Result<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 Result 펑터를 구현한 코드이다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map</code>\"\n    }\n  }), \" 함수는 펑터의 특징을 그대로 따르고 있고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \" 함수는 모나드의 특징을 그대로 따르고 있다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \" 함수는 결과값을 그대로 사용한다는 특징을 가지고 있다. 이제 모나드를 이용하여 펑터 쪽 예제에서 불가능했던 문제를 해결해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> a <span class=\\\"token operator\\\">+</span> b <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> a <span class=\\\"token operator\\\">/</span> b <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">of</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 타입이 일치한다!</span>\\n\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// java.lang.ArithmeticException: / by zero</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이제 문제가 해결된 것을 볼 수 있다. 모나드에 대해서는 이론적인 내용이 많이 있지만 실용적인 것만 따진다면 이렇게 간단하게 구현할 수 있다. 이제 펑터와 모나드를 이용하면 기존과는 다른 방식으로도 예외 처리를 할 수 있다는 것을 알았을 것이다. 이제 본격적으로 ROP에 대해서 알아보자.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"railway-oriented-programming\"\n  }, React.createElement(_components.a, {\n    href: \"#railway-oriented-programming\"\n  }, \"Railway-Oriented Programming\")), \"\\n\", React.createElement(_components.p, null, \"ROP는 사이드 이펙트를 제어하기 위한 함수형 패러다임 기반 방법론이다. ROP라는 방법론은 널리 알려지진 않았지만 Rust는 try-catch 문법을 지원하지 않는대신 ROP 철학을 일부 따르고 있다. 즉, 배워둬서 나쁠건 없다고 생각한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"rust\\\"><pre class=\\\"language-rust\\\"><code class=\\\"language-rust\\\"><span class=\\\"token comment\\\">// Rust 예제</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token namespace\\\">std<span class=\\\"token punctuation\\\">::</span>fs<span class=\\\"token punctuation\\\">::</span></span><span class=\\\"token class-name\\\">File</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">fn</span> <span class=\\\"token function-definition function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">File</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hello.txt\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Result 객체를 반환한다.</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">match</span> f <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token class-name\\\">Ok</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> file<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 파일이 정상적으로 열렸다면 파일 객체를 반환한다.</span>\\n    <span class=\\\"token class-name\\\">Err</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token macro property\\\">panic!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"There was a problem opening the file: {:?}\\\"</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 에러를 처리한다.</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이어서 설명하면 ROP는 굉장히 단순하다. 간단하게 요약하면 \", React.createElement(_components.strong, null, \"로직은 성공 혹은 실패로 나뉘고 그에 따라 새로운 선로를 설치\"), \"해서 신뢰할 수 있는 소프트웨어를 구축한다는 방법론이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2023-07-17-railway-oriented-programming/rail.png\",\n    caption: \"성공 혹은 실패\"\n  }), \"\\n\", React.createElement(_components.p, null, \"이를 위해 기본적으로 위에서 구현한 \", React.createElement(_components.strong, null, \"Result라는 모나드 객체를 사용\"), \"한다. 그리고 에러를 체크하는 것은 어떤 방법을 사용하더라도 상관없다. 중요한 것은 \", React.createElement(_components.strong, null, \"ROP라는 방법론의 철학을 이해\"), \"하는 것이다. ROP는 다음과 같은 철학을 따른다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"모든 기능은 순차적으로 실행된다.\"), \"\\n\", React.createElement(_components.li, null, \"모든 기능은 성공 혹은 실패로 나뉜다.\"), \"\\n\", React.createElement(_components.li, null, \"프로그램은 패닉이 발생하면 안된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 간단한 철학을 따르면서도 ROP는 사고적으로 굉장히 강력한 방법론이다. 우리는 프로그래밍을 할 때 항상 기능에 대한 추상화를 한다. ROP에선 \", React.createElement(_components.strong, null, \"기능을 선로에 빗대어 추상화\"), \"하며 선로를 구성하는 기능들은 모두 성공 혹은 실패로 나눈다. 이렇게 추상화를 하면 \", React.createElement(_components.strong, null, \"기능의 단위를 성공과 실패로 나눌 수 있는 적절한 크기로 나누게 되므로\"), \" 구현과 리팩토링 하는 것이 편해진다.\"), \"\\n\", React.createElement(_components.p, null, \"또한, 모든 기능을 \", React.createElement(_components.strong, null, \"순차적으로 실행하기 때문에 프로그램의 흐름을 이해하기 쉬워지고 가독성이 좋아진다\"), \". 이러한 장점들을 통해 ROP는 신뢰할 수 있는 소프트웨어를 구축하는데 도움을 준다. 이제 Result에 대한 추가적인 내용에 대해 알아보자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"복구-선로\"\n  }, React.createElement(_components.a, {\n    href: \"#복구-선로\"\n  }, \"복구 선로\")), \"\\n\", React.createElement(_components.p, null, \"이미 Result를 구현한 시점에서 ROP의 설명은 거의 끝났다고 볼 수 있다. 하지만 앞서 설명하지 않은 내용 중 \", React.createElement(_components.strong, null, \"복구\"), \"라는 개념이 있다. ROP는 세 가지 선로로 분류된다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"성공 선로\"), \"\\n\", React.createElement(_components.li, null, \"실패 선로\"), \"\\n\", React.createElement(_components.li, null, \"복구 선로\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"성공 선로는 간단하다. 우리가 생각했던 베스트 케이스대로 로직이 구성되는 것이다. 반면 실패 선로는 각각의 선로를 지나가던 중(함수를 실행하는 도중) 문제가 발생하여 실패하는 경우다. 복구 선로는 실패 선로를 지나가던 중 문제가 발생했지만 복구할 수 있는 경우이다. 그러면 다시 성공 선로로 이동한다. 이미 펑터와 모나드를 설명하며 성공 선로와 실패 선로를 구축하는 것은 Result를 구현하며 보았기 때문에 복구하는 방법을 살펴보자.\"), \"\\n\", React.createElement(_components.p, null, \"복구 선로를 만드는 함수는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rescue</code>\"\n    }\n  }), \" 혹은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">recover</code>\"\n    }\n  }), \"라는 이름으로 구현된다. 어떤 이름을 사용하던 상관은 없다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> Result<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> V<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> E<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Success<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> V<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> V<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> Nothing<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Failure<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">out</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> error<span class=\\\"token operator\\\">:</span> E<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Nothing<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Other functions...</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span> Result<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token punctuation\\\">,</span> E<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">recover</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>E<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> V<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token punctuation\\\">.</span>Success<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Success</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">recover</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 복구 선로 후에는 무조건 Success다.</span>\\n\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 0</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"필자는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">recover</code>\"\n    }\n  }), \"라는 함수를 구현하여 실패에 대한 처리를 할 수 있도록 구현했다. 위 코드를 보다시피 매우 간단하다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"에러-타입-제한\"\n  }, React.createElement(_components.a, {\n    href: \"#에러-타입-제한\"\n  }, \"에러 타입 제한\")), \"\\n\", React.createElement(_components.p, null, \"try-catch의 경우 어떤 에러가 발생할지 알기 어렵다는 점이 있다. 그래서 사용할 함수 내부를 파악하고 사용하는 쪽 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">throw</code>\"\n    }\n  }), \"에서 분기 혹은 타입 패턴 매칭을 사용하는 경우가 많다. 하지만 Result를 사용하면 에러를 구분하여 처리할 수 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> NumberException<span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">RuntimeException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">DivideByZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> message<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">NumberException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">TooBig</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> message<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">NumberException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">TooSmall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> message<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">NumberException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token punctuation\\\">,</span> NumberException<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> a <span class=\\\"token operator\\\">+</span> b\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Failure</span><span class=\\\"token punctuation\\\">(</span>NumberException<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TooBig</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Too Big\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Failure</span><span class=\\\"token punctuation\\\">(</span>NumberException<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TooSmall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Too Small\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Success</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token punctuation\\\">,</span> NumberException<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Failure</span><span class=\\\"token punctuation\\\">(</span>NumberException<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">DivideByZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Divide By Zero\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Success</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">/</span> b<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">divide</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">recover</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">is</span> NumberException<span class=\\\"token punctuation\\\">.</span>DivideByZero <span class=\\\"token operator\\\">-></span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">is</span> NumberException<span class=\\\"token punctuation\\\">.</span>TooBig <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">100</span>\\n        <span class=\\\"token keyword\\\">is</span> NumberException<span class=\\\"token punctuation\\\">.</span>TooSmall <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">0</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// -1</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">recover</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">when</code>\"\n    }\n  }), \" 부분을 보자. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sealed clas</code>\"\n    }\n  }), \"를 통해 제한된 타입을 패턴 매칭을 통해 안전하게 처리하는 것을 볼 수 있다. 이를 통해 더욱 더 안전하게 예외를 관리할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"monad-comprehension\"\n  }, React.createElement(_components.a, {\n    href: \"#monad-comprehension\"\n  }, \"Monad Comprehension\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \"을 사용하여 박스를 중첩하지 않아도 된다는 것을 앞서 배웠다. 웬만하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \"만으로 깔끔하게 코드를 작성하는 것이 가능하지만 다음과 같은 경우가 있을 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getUserById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span> <span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token operator\\\">-></span>\\n      <span class=\\\"token function\\\">getAllPosts</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> posts <span class=\\\"token operator\\\">-></span>\\n          posts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>userId <span class=\\\"token operator\\\">==</span> user<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// user가 필요하다.</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">flatMap</code>\"\n    }\n  }), \"을 사용하여도 점점 Nested 되기 때문에 코드가 복잡하다. 위 코드처럼 선행된 값을 알아야하기 때문에 Nested한 코드를 어쩔 수 없이 작성하는 경우가 많다. 이를 해결하기 위해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Monad Comprehension</code>\"\n    }\n  }), \"이라는 것을 사용할 수 있다. 다만, 이 글에서 예제 코드를 위해 전반적으로 사용하는 Kotlin에선 Monad Comprehension을 지원하지 않는다. 이 기능을 제공하는 언어는 대표적으로 Scala와 Haskell이 있다. 여기서는 Scala 예제를 통해 Monad Comprehension을 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"scala\\\"><pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">def</span> getUserById<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Either<span class=\\\"token punctuation\\\">[</span>Exception<span class=\\\"token punctuation\\\">,</span> User<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">def</span> getAllPosts<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Either<span class=\\\"token punctuation\\\">[</span>Exception<span class=\\\"token punctuation\\\">,</span> List<span class=\\\"token punctuation\\\">[</span>Post<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">def</span> main<span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">{</span>\\n    user <span class=\\\"token keyword\\\">&lt;-</span> getUserById<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    posts <span class=\\\"token keyword\\\">&lt;-</span> getAllPosts<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">.</span>filter<span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">.</span>userId <span class=\\\"token operator\\\">==</span> user<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">yield</span> posts<span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">)</span>\\n\\n  result <span class=\\\"token keyword\\\">match</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> Right<span class=\\\"token punctuation\\\">(</span>posts<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> println<span class=\\\"token punctuation\\\">(</span>posts<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">case</span> Left<span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> println<span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">for ~ yield</code>\"\n    }\n  }), \" 부분이 For Comprehension이라 부르는 문법으로 Monad Comprehension을 쉽게 사용할 수 있게 해주는 Syntactic Sugar 문법이다. 이런식으로 Nested를 제거할 수 있다. 참고로 Kotlin에서 이 문법 흉내내기 위해서 Context Receiver라는 것을 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result<span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>List<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> binding <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getUserById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">val</span> posts <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getAllPosts</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    posts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>userId <span class=\\\"token operator\\\">==</span> user<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"여기서 Context Receiver를 이용한 구현은 이 글의 범위를 벗어나기 때문에 생략한다. 만약 이에 대해 궁금하다면 \", React.createElement(_components.a, {\n    href: \"https://arrow-kt.io/learn/design/receivers-flatmap/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"ArrowKt 공식 홈페이지\"), \"를 참고하길 바란다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"중첩-컨테이너-문제\"\n  }, React.createElement(_components.a, {\n    href: \"#중첩-컨테이너-문제\"\n  }, \"중첩 컨테이너 문제\")), \"\\n\", React.createElement(_components.p, null, \"만약 Result를 다른 모나드와 함께 사용하고 싶다면 어떻게 해야할까? 예를 들면, 위에서 만든 Option 모나드를 함께 사용하고 싶을 수도 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getUserById</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Option<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getPostByUserId</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Result<span class=\\\"token operator\\\">&lt;</span>Post<span class=\\\"token punctuation\\\">,</span> Throwable<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getUserById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flatMap</span> <span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token operator\\\">-></span>\\n      <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// user는 Option&lt;User> 타입이다.</span>\\n        <span class=\\\"token keyword\\\">is</span> Option<span class=\\\"token punctuation\\\">.</span>Some <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">getPostsByUserId</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> posts <span class=\\\"token operator\\\">-></span> \\n              posts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> it<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token punctuation\\\">}</span> \\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">is</span> Option<span class=\\\"token punctuation\\\">.</span>None <span class=\\\"token operator\\\">-></span> Result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Failure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Throwable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"User not found\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Success <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">is</span> Result<span class=\\\"token punctuation\\\">.</span>Failure <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">getUserById</code>\"\n    }\n  }), \" 함수가 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Result&lt;Option&lt;User>, Throwable></code>\"\n    }\n  }), \" 타입이기 때문에 중간에 패턴 매칭을 통해 박스를 벗겨내는 것을 볼 수 있다. 여기서는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Option</code>\"\n    }\n  }), \"을 Nullable로 대체하면 해결할 수 있지만 실제로 여러 모나드를 사용할 경우 점점 코드가 복잡해질 수 있다. 이처럼 이미 다른 모나드를 주력으로 사용하고 있는 상황이라면 문제가 될 수 있다. 예를 들어, Spring 환경에서 Reactive Programming을 위해 Mono, Flux 등을 사용하는 경우 혹은 Rx 계열 라이브러리를 사용하는 경우를 예시로 들 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 해결하기 위해서는 \", React.createElement(_components.strong, null, \"Higher-Kinded Type\"), \"(이하 HKT)이라는 개념이 필요하다. 다만, 안타깝게도 몇 언어를 제외하면 HKT를 제공하는 언어는 드물기 때문에 이 문제를 해결하기는 쉽지 않다. 이 글 전반적으로 사용되는 Kotlin에선 해당 기능을 제공하지 않는다.\"), \"\\n\", React.createElement(_components.p, null, \"Scala에선 HKT를 지원한다. 이를 통해 \", React.createElement(_components.strong, null, \"Monad Transfomer\"), \"이라는 것을 구현할 수 있는데, 이를 통해 문제를 해결할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"scala\\\"><pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">def</span> getUserById<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Either<span class=\\\"token punctuation\\\">[</span>Exception<span class=\\\"token punctuation\\\">,</span> Option<span class=\\\"token punctuation\\\">[</span>User<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  Right<span class=\\\"token punctuation\\\">(</span>Option<span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">def</span> getPostsByUserId<span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Either<span class=\\\"token punctuation\\\">[</span>Exception<span class=\\\"token punctuation\\\">,</span> List<span class=\\\"token punctuation\\\">[</span>Post<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  Right<span class=\\\"token punctuation\\\">(</span>List<span class=\\\"token punctuation\\\">(</span>Post<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"A\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Post<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"B\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">def</span> main<span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Unit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// OptionT 타입은 cats 라이브러리를 통해 사용했다.</span>\\n    user <span class=\\\"token keyword\\\">&lt;-</span> OptionT<span class=\\\"token punctuation\\\">(</span>getUserById<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    posts <span class=\\\"token keyword\\\">&lt;-</span> OptionT<span class=\\\"token punctuation\\\">.</span>liftF<span class=\\\"token punctuation\\\">(</span>getPostsByUserId<span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">yield</span> posts<span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">)</span>\\n\\n  result<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token keyword\\\">match</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> Right<span class=\\\"token punctuation\\\">(</span>posts<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> println<span class=\\\"token punctuation\\\">(</span>posts<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">case</span> Left<span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> println<span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보다시피 Nested한 코드가 제거되어 조금 더 깔끔한 모습을 볼 수 있다. 아쉽게도 이를 지원하지 않는 언어는 사용이 불가능하다. 따라서 ROP를 도입하고 싶은 개발자는 자신의 환경을 고려할 필요가 있다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"ROP를 사용한다면 조금 더 안전하고 직관적인 코딩을 할 수 있다. 다만, 환경에 따라 사용하기 힘들 수 있으니 이를 고려하여 사용하도록 하자. 또한, ROP를 사용하더라도 모든 함수에 대해 Result를 사용하는 것은 권장하지 않는다. 이는 코드의 가독성을 떨어뜨릴 수 있기 때문이다. 따라서, 필요한 함수에 대해서만 사용하는 것이 좋다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  console.log(isExpanded);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              zIndex: 1000\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <img\n              src={src}\n              width=\"100%\"\n              style={{\n                display: 'block',\n                borderRadius: 8,\n                width: 'auto',\n                height: 'auto',\n                maxWidth: 1440,\n                maxHeight: '80vh',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            />\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","span","h1","a","ul","li","h2","h3","h4","_provideComponents","components","React","dangerouslySetInnerHTML","__html","Image","src","caption","id","href","style","marginTop","width","rel","wrapper","MDXLayout","_ref","maxWidth","expandable","isExpanded","toggleExpanded","useState","console","log","___EmotionJSX","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","zIndex","display","borderRadius","maxHeight","transform","document","body"],"sourceRoot":""}