"use strict";(self.webpackChunkkciter_so=self.webpackChunkkciter_so||[]).push([[6215],{5268:function(n,a,s){s.r(a);var t=s(8857),p=s(9474),e=s(5799);function o(n){const a=Object.assign({p:"p",a:"a",span:"span",strong:"strong",h1:"h1",h2:"h2"},(0,t.RP)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"이전에 ",p.createElement(a.a,{href:"/posts/polymorphic-react-component"},"Polymorphic한 React 컴포넌트 만들기"),"라는 글을 통해 컴포넌트에 다형성을 적용하는 방법을 소개했었다. 해당 글에서는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}})," 속성을 이용하여 컴포넌트를 변형시키는 것을 소개하는 데 이를 이용하면 하나의 컴포넌트로 여러 요소(Element)나 그에 따른 속성(Attribute)을 이용할 수 있고 이를 넘어 다른 컴포넌트를 합성하는 것도 가능하다. 따라서 이를 이용하여 ",p.createElement(a.strong,null,"무엇이든지 될 수 있는 가장 추상화된 형태의 컴포넌트"),"를 만들 수 있다."),"\n",p.createElement(a.p,null,"다만 이 방법은 여러 비판을 받기도 하는데 가장 큰 이유는 ",p.createElement(a.strong,null,"모호성")," 때문이다. ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}})," 속성을 이용하여 컴포넌트를 결합하는 경우 전달할 수 있는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prop</code>'}}),"이 어떤 컴포넌트의 것인지 알기 힘들다는 점과 코드만 봐서는 어떻게 렌더링 되는지 알기 힘들다는 점이다. 그 외의 비판점으로는 자동 완성이 느려진다거나 TypeScript에서 타입을 추론하기 어렵다는 점 등이 있다."),"\n",p.createElement(a.p,null,"따라서 이에 대한 대안으로 자신의 속성과 행동을 자식 컴포넌트에 넘긴 후 자식이 직접 부모 컴포넌트를 대신하여 렌더링하는 방법인 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Render Delegation</code>'}}),"[^1]이 등장했다. 이는 ",p.createElement(a.a,{href:"https://www.radix-ui.com"},"Radix"),"라는 오픈소스 리액트 컴포넌트 라이브러리를 통해 유명해진 방법으로 Render Delegation 기능을 제공하는 라이브러리는 보통 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asChild</code>'}}),"라는 속성을 통해 해당 기능을 이용할 수 있게 제공한다."),"\n",p.createElement(e.A,{src:"/images/2024-02-18-render-delegation-react-component/render-delegation-component.png",width:"70%",caption:"Render Delegation 컴포넌트의 구성"}),"\n",p.createElement(a.p,null,"Render Delegation 컴포넌트는 보통 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}}),"과 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}}),"이라는 두 컴포넌트를 통해 구성된다. ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}}),"은 자식 컴포넌트를 렌더링하는 역할을 하고 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}}),"은 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}}),"에 들어갈 것이 무엇인지를 나타낸다."),"\n",p.createElement(a.p,null,"참고로 Polymorphic 컴포넌트처럼 변형을 통한 다형성 문제 해결이라는 점은 같지만 Render Delegation 컴포넌트는 ",p.createElement(a.strong,null,"기존 컴포넌트와 합성이될 컴포넌트를 코드에서 분리한다는 점"),"이 다르다."),"\n",p.createElement(a.h1,{id:"문제-인식하기",style:{position:"relative"}},p.createElement(a.a,{href:"#%EB%AC%B8%EC%A0%9C-%EC%9D%B8%EC%8B%9D%ED%95%98%EA%B8%B0","aria-label":"문제 인식하기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제 인식하기"),"\n",p.createElement(a.p,null,"만약 앞서 언급한 Polymorphic 컴포넌트와 이번 글에서 다룰 Render Delegation 컴포넌트가 왜 필요한지 잘 모를 수 있다. 이전에 작성한 글에서도 설명했지만 다시 한번 간단히 설명해 보겠다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Button.jsx\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> \n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> backgroundColor<span class="token operator">:</span> <span class="token string">\'black\'</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">\'white\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> \n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * App.jsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'Good!\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"설명이 필요 없을 정도로 간단한 코드다. 단순하게 표현했지만 위 코드처럼 스타일만 적용한 컴포넌트는 실제로도 많이 사용된다. Button 컴포넌트는 prop으로 넘기는 값을 button 태그의 속성으로 전부 넘기기 때문에 꽤 확장성 있게 사용할 수 있는 컴포넌트라고 생각할 수 있다. 그런데 만약 버튼에 페이지 링크를 추가하고 싶다면 어떻게 해야 할까?"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"위 코드처럼 작성할 수도 있겠지만 재사용성 측면에선 그다지 좋은 방법은 아니다. 추후 재사용을 고려하여 새로운 컴포넌트를 만들 수도 있다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Button.jsx\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> \n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> backgroundColor<span class="token operator">:</span> <span class="token string">\'black\'</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">\'white\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> \n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * LinkButton.jsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./Button\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">LinkButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> href<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * App.jsx\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> LinkButton <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./LinkButton\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LinkButton</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click Me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LinkButton</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"혹은 위와 같이 작성할 수도 있지만 이 경우 a 태그가 확장되지 않는다는 문제점이 있고 컴포넌트의 의존 관계가 새롭게 추가된다는 문제점이 있다. 그리고 만약 react-router나 Next.js를 사용하여 SPA를 위한 Link 컴포넌트를 사용한다면 또 새로운 컴포넌트를 만들어줄 수밖에 없다. 이 문제의 해결법으로 이전 글에서 다룬 Polymorphic 컴포넌트나 이번 글에서 다룰 Render Delegation 컴포넌트를 사용할 수 있다."),"\n",p.createElement(a.h1,{id:"살펴보기",style:{position:"relative"}},p.createElement(a.a,{href:"#%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0","aria-label":"살펴보기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"살펴보기"),"\n",p.createElement(a.p,null,"앞서 언급한 ",p.createElement(a.a,{href:"https://www.radix-ui.com"},"Radix"),"에서는 ",p.createElement(a.a,{href:"https://www.radix-ui.com/primitives/docs/guides/composition"},"asChild"),"를 통해 Render Delegation이 가능한 컴포넌트를 제공한다. 해당 라이브러리를 통해 동작을 살펴보자."),"\n",p.createElement(a.h2,{id:"엿보기",style:{position:"relative"}},p.createElement(a.a,{href:"#%EC%97%BF%EB%B3%B4%EA%B8%B0","aria-label":"엿보기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"엿보기"),"\n",p.createElement(a.p,null,"먼저 아주 간단한 예제를 살펴보자. 다음은 Radix에서 제공하는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Label</code>'}}),"을 사용하는 예제다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Label <span class="token keyword">from</span> <span class="token string">"@radix-ui/react-label"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token comment">/* asChild를 사용하지 않은 경우 */</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Label.Root</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        https://kciter.so\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Label.Root</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"위 코드에서 사용하는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Label.Root</code>'}})," 컴포넌트를 이용하면 특별한 기능 없이 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">label</code>'}}),"을 렌더링할 수 있다. 여기서 만약 링크를 추가하고 싶다면 다음과 같이 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asChild</code>'}})," 속성을 사용할 수 있다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Label <span class="token keyword">from</span> <span class="token string">"@radix-ui/react-label"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token comment">/* asChild를 사용한 경우 */</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Label.Root</span></span> <span class="token attr-name">asChild</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">https://kciter.so</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Label.Root</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(e.A,{src:"/images/2024-02-18-render-delegation-react-component/aschild-basic-example.png",caption:"요소가 변경되었다"}),"\n",p.createElement(a.p,null,"위와 같이 작성하면 렌더링 되는 요소가 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">a</code>'}}),"로 변경된다."),"\n",p.createElement(a.h2,{id:"slot-사용하기",style:{position:"relative"}},p.createElement(a.a,{href:"#slot-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0","aria-label":"slot 사용하기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Slot 사용하기"),"\n",p.createElement(a.p,null,"앞서 살펴본 예제는 기본적으로 제공하는 컴포넌트에서 단순히 요소를 변경하기만 하는 아주 간단한 예제였다. Radix에서 제공하는 ",p.createElement(a.a,{href:"https://www.radix-ui.com/primitives/docs/utilities/slot"},"Slot"),"을 이용하면 사용자가 직접 Render Delegation이 가능한 컴포넌트를 만들 수 있다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Slot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@radix-ui/react-slot"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> asChild<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Element <span class="token operator">=</span> asChild <span class="token operator">?</span> Slot <span class="token operator">:</span> <span class="token string">"button"</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        padding<span class="token operator">:</span> <span class="token string">"10px"</span><span class="token punctuation">,</span>\n        border<span class="token operator">:</span> <span class="token string">"1px solid #000"</span><span class="token punctuation">,</span>\n        borderRadius<span class="token operator">:</span> <span class="token string">"5px"</span><span class="token punctuation">,</span>\n        backgroundColor<span class="token operator">:</span> <span class="token string">\'transparent\'</span><span class="token punctuation">,</span>\n        fontSize<span class="token operator">:</span> <span class="token number">12</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        This is button\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">asChild</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">This is link</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}})," 컴포넌트는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"으로 받은 JSX 요소를 렌더링한다. 위 코드를 살펴보면 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asChild</code>'}})," 속성이 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}}),"일 때는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}})," 컴포넌트를 사용하고 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">false</code>'}}),"일 때는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">button</code>'}}),"를 사용한다. 따라서 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asChild</code>'}}),"를 사용한 컴포넌트의 렌더링 결과를 보면 기존 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Button</code>'}})," 컴포넌트에서 설정한 스타일은 변하지 않지만 요소가 변경된 것을 확인할 수 있다."),"\n",p.createElement(e.A,{src:"/images/2024-02-18-render-delegation-react-component/slot-example.png",width:"50%",caption:"asChild 여부에 따라 렌더링이 달라진다"}),"\n",p.createElement(a.p,null,"즉 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}}),"을 이용하여 부모 컴포넌트의 속성을 자식 컴포넌트에 넘기고 렌더링을 위임했다고 볼 수 있다."),"\n",p.createElement(a.h2,{id:"slottable-사용하기",style:{position:"relative"}},p.createElement(a.a,{href:"#slottable-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0","aria-label":"slottable 사용하기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Slottable 사용하기"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}}),"을 이용하면 ",p.createElement(a.strong,null,"일부분만 위임"),"하는 것도 가능하다. 다음 예제를 살펴보자."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Slot<span class="token punctuation">,</span> Slottable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@radix-ui/react-slot"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Icon</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">🔴</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> asChild<span class="token punctuation">,</span> icon<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Element <span class="token operator">=</span> asChild <span class="token operator">?</span> Slot <span class="token operator">:</span> <span class="token string">"button"</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> \n      <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        padding<span class="token operator">:</span> <span class="token string">"10px"</span><span class="token punctuation">,</span>\n        border<span class="token operator">:</span> <span class="token string">"1px solid #000"</span><span class="token punctuation">,</span>\n        borderRadius<span class="token operator">:</span> <span class="token string">"5px"</span><span class="token punctuation">,</span>\n        backgroundColor<span class="token operator">:</span> <span class="token string">\'transparent\'</span><span class="token punctuation">,</span>\n        fontSize<span class="token operator">:</span> <span class="token number">12</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>icon<span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slottable</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Slottable</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Element</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">icon</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Icon</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        This is button\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">icon</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Icon</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span> <span class="token attr-name">asChild</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">This is link</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}})," 컴포넌트는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}})," 컴포넌트로 렌더링 될 컴포넌트의 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"이 들어갈 곳을 정할 수 있다. 즉, 위 코드에선 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Button</code>'}}),"의 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"이 아닌 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">a</code>'}})," 요소의 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"이 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}})," 컴포넌트 내부로 들어가게 된다."),"\n",p.createElement(e.A,{src:"/images/2024-02-18-render-delegation-react-component/slottable-example.png",width:"50%",caption:"렌더링 결과"}),"\n",p.createElement(a.p,null,"실제로 렌더링 된 HTML을 보면 다음과 같다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css">...</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>🔴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    This is button\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css">...</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>🔴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    This is link\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"결과적으로 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">icon</code>'}})," 속성은 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Button</code>'}})," 컴포넌트에서 설정한 대로 따르지만, 그 외 속성은 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asChild</code>'}})," 속성에 따라 위임된다. 즉, ",p.createElement(a.strong,null,"위임하고 싶은 부분만 따로 지정해서 구현하는 것"),"이 가능하다. 이렇게 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}}),"을 사용하면 조금 더 풍부한 표현이 가능해진다. 참고로 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}}),"만 사용하는 것은 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}})," 내부에 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}}),"을 최상위로 둬서 사용하는 것과 같다."),"\n",p.createElement(a.h1,{id:"javascript에서-구현하기",style:{position:"relative"}},p.createElement(a.a,{href:"#javascript%EC%97%90%EC%84%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0","aria-label":"javascript에서 구현하기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"JavaScript에서 구현하기"),"\n",p.createElement(a.p,null,"이제 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}}),"과 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}})," 컴포넌트가 어떻게 동작하는지 알았으니 이 두 컴포넌트를 직접 만들어보자. 여기서는 먼저 편의를 위해 JavaScript로 구현해 볼 것이다."),"\n",p.createElement(a.h2,{id:"slot-구현하기",style:{position:"relative"}},p.createElement(a.a,{href:"#slot-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0","aria-label":"slot 구현하기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Slot 구현하기"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}})," 컴포넌트는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"을 조금만 변형해서 렌더링하면 되기 때문에 아주 쉽게 구현할 수 있다. 다음 코드를 살펴보자."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Slot.jsx\n */</span>\n\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Slot</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>props<span class="token punctuation">,</span>\n      <span class="token operator">...</span>children<span class="token punctuation">.</span>props<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 올바르지 않은 컴포넌트라면 경고 로그를 출력하고 null을 반환</span>\n  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Slot component should have only one React element as a child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"위 코드에서 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}})," 컴포넌트는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"으로 받은 JSX 요소를 렌더링한다. 만약 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"이 JSX 요소라면 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">props</code>'}}),"를 합성하여 새로운 컴포넌트를 만들어 렌더링하고 그렇지 않다면 렌더링하지 않는다. 이때 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">children</code>'}}),"이 React Element가 아니거나 여러 개 들어오는 경우엔 경고 로그를 보여주고 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">null</code>'}}),"을 반환하도록 구현했다. 그럼 벌써 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}}),"을 구현했다. 이전에 Radix 예제에 사용했던 코드로 테스트하면 잘 돌아가는 것을 확인할 수 있다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * App.jsx\n */</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Slot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Slot"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> asChild<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Element <span class="token operator">=</span> asChild <span class="token operator">?</span> Slot <span class="token operator">:</span> <span class="token string">"button"</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        This is button\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">asChild</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kciter.so<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">This is link</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(e.A,{src:"/images/2024-02-18-render-delegation-react-component/handmade-slot.png",width:"70%",caption:"잘 동작한다"}),"\n",p.createElement(a.h2,{id:"slottable-구현하기",style:{position:"relative"}},p.createElement(a.a,{href:"#slottable-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0","aria-label":"slottable 구현하기 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Slottable 구현하기"),"\n",p.createElement(a.p,null,"그럼 이번에는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}})," 개념을 구현해보자."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Slottable.jsx\n */</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Slottable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">children</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"사실 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}})," 컴포넌트는 따로 하는 게 없다. 그저 스스로 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}}),"라는 것을 알려줄 수만 있으면 되기에 위와 같이 구현하면 된다. 대신 기존에 구현했던 Slot 컴포넌트의 로직을 변경할 필요가 있다. 이 부분이 조금 어려울 수 있다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">/**\n * Slot.jsx\n */</span>\n\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Slottable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Slottable"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Slot</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> childrenArray <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> slottable <span class="token operator">=</span> childrenArray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>type <span class="token operator">===</span> Slottable\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>slottable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Slottable이 있다면</span>\n    <span class="token keyword">const</span> newElement <span class="token operator">=</span> slottable<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> newChildren <span class="token operator">=</span> childrenArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// Slottable이 아닌 것은 그대로 반환</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> slottable<span class="token punctuation">)</span> <span class="token keyword">return</span> child<span class="token punctuation">;</span>\n\n      <span class="token comment">// Slottable이라면 해당 영역을 자식 컴포넌트의 children으로 교체</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> newElement<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token string">"Slot component should have only one React element as a child"</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 새로운 요소를 렌더링</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span>\n      <span class="token operator">?</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>\n          newElement<span class="token punctuation">,</span> \n          <span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>newElement<span class="token punctuation">.</span>props <span class="token punctuation">}</span><span class="token punctuation">,</span> \n          newChildren\n        <span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>props<span class="token punctuation">,</span>\n      <span class="token operator">...</span>children<span class="token punctuation">.</span>props<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Slot component should have only one React element as a child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"기존 코드에서 달라진 점은 Slottable이 있는지 확인하고 있다면 이에 대해 처리해 주는 부분이다. 이 부분을 제외하면 기존 코드와 동일하다. 이렇게 만들어진 Slot과 Slottable을 이용하여 이전에 사용했던 예제로 실행해 보면 잘되는 것을 확인할 수 있다."),"\n",p.createElement(e.A,{src:"/images/2024-02-18-render-delegation-react-component/handmade-slottable.png",width:"70%",caption:"아주 잘 동작한다"}),"\n",p.createElement(a.h1,{id:"typescript에서-구현",style:{position:"relative"}},p.createElement(a.a,{href:"#typescript%EC%97%90%EC%84%9C-%EA%B5%AC%ED%98%84","aria-label":"typescript에서 구현 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"TypeScript에서 구현"),"\n",p.createElement(a.p,null,"이제 TypeScript에서 구현해 보자. 타입을 신경써야 해서 구현이 복잡하지 않을까 싶지만 Render Delegation 컴포넌트는 Polymorphic 컴포넌트와 다르게 변형할 컴포넌트가 코드에서 분리되기 때문에 타입 추론이 쉽다. 그래서 TypeScript에서 구현하는 것은 JavaScript 구현과 크게 다르지 않다."),"\n",p.createElement(a.p,null,"먼저 Slot 컴포넌트에 타입을 붙이면서 다시 구현해 보자."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">/**\n * Slot.tsx\n */</span>\n\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SlotProps</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>HTMLAttributes<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span> <span class="token punctuation">{</span>\n  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RenderDelegationProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  asChild<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Slot</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> SlotProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>props<span class="token punctuation">,</span>\n      <span class="token operator">...</span>children<span class="token punctuation">.</span>props<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Slot component should have only one React element as a child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"타입을 상식적인 수준 정도로만 붙였는데 벌써 완성됐다. 코드 중 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RenderDelegationProps</code>'}}),"는 Render Delegation을 사용할 컴포넌트에 붙일 수 있는 타입이다. 이 타입을 이용하면 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asChild</code>'}})," 속성을 사용할 수 있게 된다."),"\n",p.createElement(a.p,null,"이어서 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}})," 개념과 관련된 로직에 타입을 붙이면서 다시 구현해 보자."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">/**\n * Slottable.tsx\n */</span>\n\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SlottableProps</span> <span class="token punctuation">{</span>\n  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Slottable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> SlottableProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">children</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"마찬가지로 아주 간단하게 구현할 수 있다. 이제 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slot</code>'}})," 컴포넌트의 로직을 변경하면서 타입을 붙이면 된다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">/**\n * Slot.tsx\n */</span>\n\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Slottable<span class="token punctuation">,</span> SlottableProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Slottable"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SlotProps</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>HTMLAttributes<span class="token operator">&lt;</span>HTMLElement<span class="token operator">></span> <span class="token punctuation">{</span>\n  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">AsChildProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  asChild<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Slot</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> SlotProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> childrenArray <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> slottable <span class="token operator">=</span> childrenArray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> Slottable<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span>SlottableProps<span class="token operator">></span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>slottable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> newElement <span class="token operator">=</span> slottable<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> newChildren <span class="token operator">=</span> childrenArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> slottable<span class="token punctuation">)</span> <span class="token keyword">return</span> child<span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> newElement<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token string">"Slot component should have only one React element as a child"</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span>\n      <span class="token operator">?</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>\n          newElement<span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>newElement<span class="token punctuation">.</span>props <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          newChildren\n        <span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>props<span class="token punctuation">,</span>\n      <span class="token operator">...</span>children<span class="token punctuation">.</span>props<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Slot component should have only one React element as a child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"마찬가지로 기존 코드와 크게 다른 점이 없다. 딱 한 라인이 추가되었는데 이는 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Slottable</code>'}})," 컴포넌트를 찾은 후 어떤 타입인지 명시해 주는 것뿐이다. 만약 TypeScript의 ",p.createElement(a.a,{href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"},"사용자 정의 타입 가드 문법"),"을 사용하면 다음과 같이 작성하는 것도 가능하다."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">/**\n * Slot.tsx\n */</span>\n\n<span class="token keyword">function</span> <span class="token function">isSlottable</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode</span><span class="token punctuation">)</span><span class="token operator">:</span> child <span class="token keyword">is</span> React<span class="token punctuation">.</span>ReactElement <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> Slottable<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Slot</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> SlotProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> childrenArray <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> slottable <span class="token operator">=</span> childrenArray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>isSlottable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n","\n",p.createElement(a.h1,{id:"마치며",style:{position:"relative"}},p.createElement(a.a,{href:"#%EB%A7%88%EC%B9%98%EB%A9%B0","aria-label":"마치며 permalink",className:"anchor-header before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"마치며"),"\n",p.createElement(a.p,null,"이전에 포스팅한 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">as</code>'}}),"를 이용한 Polymorphic 컴포넌트와 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asChild</code>'}}),"를 이용하는 Slottable 컴포넌트는 각각 장단점이 있다. 따라서 무엇이 더 좋다면서 추종하는 것보단 다양한 패턴이 있음을 인지하고 상황에 따라 적절한 방법을 선택하여 사용하는 것이 중요하다. 참고로 이 포스팅을 통해 만들어진 최종적인 코드는 ",p.createElement(a.a,{href:"https://github.com/kciter/render-delegation-react-component-sample"},"GitHub 저장소"),"에서 확인할 수 있다."),"\n",p.createElement(a.p,null,"[^1]: 렌더링을 다른 컴포넌트에 맡기기 때문에 Render Delegation이라 부른다."))}a.default=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.RP)(),n.components);return a?p.createElement(a,n,p.createElement(o,n)):o(n)}},5799:function(n,a,s){var t=s(9474),p=s(1615);a.A=n=>{let{src:a,caption:s,width:e,expandable:o}=n;const{0:c,1:l}=(0,t.useState)(!1);return t.createElement("figure",null,t.createElement("img",{src:a,width:e,style:{cursor:o?"zoom-in":"default"},onClick:o?()=>l(!0):void 0}),s&&t.createElement("figcaption",{dangerouslySetInnerHTML:{__html:s}}),c&&p.createPortal(t.createElement("div",{style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"zoom-out",backgroundColor:"rgba(0, 0, 0, 0.7)"},onClick:()=>l(!1)},t.createElement("div",{style:{borderRadius:8,maxWidth:1200,width:"80%",position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white"}},t.createElement("img",{src:a,width:"100%"}))),document.body))}}}]);
//# sourceMappingURL=731a99ed555304c40c614248f1939b40f589d112-cb76e9826be3530a1b64.js.map