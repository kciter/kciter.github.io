{"version":3,"file":"component---src-pages-index-tsx-2f066135ae7c11152be5.js","mappings":"0HA8BA,IArBoBA,IAAkD,IAAjD,MAAEC,EAAK,QAAEC,EAAO,MAAEC,GAAyBH,EAC9D,OACEI,EAAAA,cAAA,OAAKC,UAAU,UAAUF,MAAOA,GAC9BC,EAAAA,cAAA,OAAKC,UAAU,iBACZJ,EAAMK,KACJC,GACCA,EAAKC,KAAKC,OAAOC,OAASR,GACxBE,EAAAA,cAAA,OAAKC,UAAU,eAAeM,IAAKJ,EAAKC,KAAKC,OAAOC,MAClDN,EAAAA,cAAA,KAAGQ,KAAML,EAAKC,KAAKC,OAAOC,MACxBN,EAAAA,cAAA,OAAKS,IAAKN,EAAKC,KAAKM,YAAYC,QAChCX,EAAAA,cAAA,OAAKC,UAAU,SAASE,EAAKC,KAAKM,YAAYE,OAC9CZ,EAAAA,cAAA,aAAQG,EAAKC,KAAKC,OAAOQ,WAMjC,C,wDCPV,MAAMC,EAAMlB,IAA6C,IAADmB,EAAAC,EAAAC,EAAA,IAA3C,MAAEL,EAAK,YAAEM,EAAW,KAAEC,GAAgBvB,EACjD,MAAM,KAAEwB,IAASC,EAAAA,EAAAA,IAAe,YAc1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAYZ,IAA0B,QAArBG,EAAIK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBH,OAE9C,OACEZ,EAAAA,cAACyB,EAAAA,EAAM,CACLC,eAAgB,CACdC,GAAI,MAENf,MAAOY,EACPI,cAAehB,EAAK,sBAAsBiB,EAC1CV,KAAM,CACJ,CACEW,KAAK,cACLC,QAAST,GAEX,CACEU,SAAS,SACTD,QAAQ,iBAEV,CACEC,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAAST,GAEX,CACEU,SAAS,UACTD,QAAQ,WAEV,CACEC,SAAS,eACTD,QAAQ,aAEV,CACEC,SAAS,YACTD,QAAQ,SAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAS,gBAEX,CACED,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAAST,GAEX,CACEU,SAAS,WACTD,QACiE,QAD1Df,EACiD,QADjDC,EACLE,EAAKc,MAAMC,GAAgC,aAAlBA,EAAKF,kBAAwB,IAAAf,OAAA,EAAtDA,EAAwDc,eAAO,IAAAf,EAAAA,EAC/D,oCAEJmB,OAAOhB,IACT,EAINL,EAAIsB,aAAe,CACjBC,KAAK,KACLlB,KAAM,GACND,YAAY,IAUd,K,gHChGA,MAfYoB,IAERtC,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAAA,OAAKC,UAAU,UACbD,EAAAA,cAAA,OAAKS,IAAI,8BAGXT,EAAAA,cAAA,OAAKC,UAAU,WACbD,EAAAA,cAAA,OAAKC,UAAU,QAAO,OACtBD,EAAAA,cAAA,OAAKC,UAAU,eAAc,Y,UC8CrC,MAlDcsC,KACZ,MAAMC,GAASnB,EAAAA,EAAAA,IAAe,cA0BxBxB,GAAQ4C,EAAAA,EAAAA,UACZ,IACED,EAAOE,OAAOC,MACXC,MACC,CAACC,EAAQC,KACN,IAAIC,KAAKD,EAAE1C,KAAKC,OAAOQ,OAAS,IAAIkC,KAAKF,EAAEzC,KAAKC,OAAOQ,QAE3DmC,OAAO,EAAG,IACf,CAACR,IAGH,OACExC,EAAAA,cAACiD,EAAAA,EAAe,KACdjD,EAAAA,cAACc,EAAAA,EAAG,CAACF,MAAM,KAEXZ,EAAAA,cAACsC,EAAG,MAEJtC,EAAAA,cAAA,MAAID,MAAO,CAAEmD,UAAW,WAAY,SACnCrD,GAASG,EAAAA,cAACmD,EAAAA,EAAW,CAACtD,MAAOA,EAAOE,MAAO,CAAEqD,QAAS,KACvC,C","sources":["webpack://kciter.so/./src/components/RelatedPost/index.tsx","webpack://kciter.so/./src/components/SEO/index.tsx","webpack://kciter.so/./src/components/Bio/index.tsx","webpack://kciter.so/./src/pages/index.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\";\nimport React from \"react\";\n\ninterface RelatedPostProps {\n  posts: any;\n  current?: string;\n  style?: React.CSSProperties;\n}\n\nconst RelatedPost = ({ posts, current, style }: RelatedPostProps) => {\n  return (\n    <div className=\"related\" style={style}>\n      <div className=\"related-posts\">\n        {posts.map(\n          (post: any) =>\n            post.node.fields.slug !== current && (\n              <div className=\"related-post\" key={post.node.fields.slug}>\n                <a href={post.node.fields.slug}>\n                  <img src={post.node.frontmatter.image} />\n                  <div className=\"title\">{post.node.frontmatter.title}</div>\n                  <small>{post.node.fields.date}</small>\n                </a>\n              </div>\n            )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RelatedPost;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  imagePath?: string;\n  meta?: any;\n}\n\nconst SEO = ({ title, description, meta }: SEOProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const metaTitle = title || site.siteMetadata?.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        ko: \"ko\",\n      }}\n      title={metaTitle}\n      titleTemplate={title ? `%s | kciter.so` : undefined}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `author`,\n          content: `Lee Sun-Hyoup`,\n        },\n        {\n          property: `og:title`,\n          content: metaTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:site_name`,\n          content: `kciter.so`,\n        },\n        {\n          property: `og:locale`,\n          content: `ko_KR`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: \"Sunhyoup Lee\",\n        },\n        {\n          name: `twitter:title`,\n          content: metaTitle,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:image`,\n          content:\n            meta.find((item: any) => item.property === \"og:image\")?.content ??\n            \"https://kciter.so/images/og.png\",\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from \"react\";\n\nconst Bio = () => {\n  return (\n    <div className=\"member-container\">\n      <div className=\"avatar\">\n        <img src=\"/images/about/avatar.jpg\" />\n      </div>\n\n      <div className=\"summary\">\n        <div className=\"name\">이선협</div>\n        <div className=\"description\">그냥 개발자</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Bio;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport DefaultTemplate from \"@templates/default\";\nimport SEO from \"@components/SEO\";\nimport RelatedPost from \"@components/RelatedPost\";\nimport Bio from \"@components/Bio\";\nimport { graphql, PageProps, useStaticQuery } from \"gatsby\";\n\nconst Index = () => {\n  const result = useStaticQuery(graphql`\n    {\n      allMdx(\n        limit: 9\n        sort: { fields: { date: DESC } }\n        filter: {\n          fields: { type: { eq: \"post\" } }\n          frontmatter: { draft: { ne: true }, hide: { ne: true } }\n        }\n      ) {\n        edges {\n          node {\n            fields {\n              date\n              slug\n            }\n            frontmatter {\n              title\n              image\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const posts = useMemo(\n    () =>\n      result.allMdx.edges\n        .sort(\n          (a: any, b: any) =>\n            +new Date(b.node.fields.date) - +new Date(a.node.fields.date)\n        )\n        .splice(0, 9),\n    [result]\n  );\n\n  return (\n    <DefaultTemplate>\n      <SEO title=\"\" />\n\n      <Bio />\n\n      <h2 style={{ textAlign: \"center\" }}>Posts</h2>\n      {posts && <RelatedPost posts={posts} style={{ padding: 0 }} />}\n    </DefaultTemplate>\n  );\n};\n\nexport default Index;\n"],"names":["_ref","posts","current","style","React","className","map","post","node","fields","slug","key","href","src","frontmatter","image","title","date","SEO","_site$siteMetadata","_meta$find$content","_meta$find","description","meta","site","useStaticQuery","metaDescription","siteMetadata","metaTitle","Helmet","htmlAttributes","ko","titleTemplate","undefined","name","content","property","find","item","concat","defaultProps","lang","Bio","Index","result","useMemo","allMdx","edges","sort","a","b","Date","splice","DefaultTemplate","textAlign","RelatedPost","padding"],"sourceRoot":""}