"use strict";(self.webpackChunkkciter_so=self.webpackChunkkciter_so||[]).push([[486],{4733:function(n,a,s){s.r(a);var t=s(9128),e=s(9474),l=s(5799);function p(n){const a=Object.assign({p:"p",span:"span",h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",h2:"h2",h3:"h3"},(0,t.R)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"현대적인 언어 중 하나인 Kotlin은 JetBrains에서 만든 언어로, Java와 100% 호환되는 언어이다. 그렇기 때문에 Kotlin은 Android 개발에서도 사용되고 있으며, 서버 개발에서도 사용되고 있다. JVM 생태계 뿐만 아니라 다양한 곳에서 점유율을 높이고 싶은지 JetBrains는 KMP(Kotlin Multiplatform)를 통해 iOS, JS, 웹 어셈블리 등 다양한 플랫폼에서 Kotlin을 사용할 수 있도록 밀어주고 있다."),"\n",e.createElement(a.p,null,"재밌는 점은 Kotlin 커뮤니티에서 잘 언급되지는 않지만 Kotlin은 Python이나 Ruby, JavaScript와 같이 스크립트 언어로도 사용할 수 있다. 그런데 언급하지 않는 이유가 있다."),"\n",e.createElement(l.A,{src:"/images/2025-01-19-using-kotlin-script/experimental.png"}),"\n",e.createElement(a.p,null,"바로 2025년 1월 19일 현재 기준으로 출시된지 7년 정도된 기술임에도 불구하고 아직까지 실험적인 기능으로 분류되어 있다. 그렇기 때문에 안정성이나 성능에 대한 보장이 없다. 하지만 우리는 이미 Kotlin Script를 잘 사용하고 있다."),"\n",e.createElement(l.A,{src:"/images/2025-01-19-using-kotlin-script/kotlin-gradle-dsl.png"}),"\n",e.createElement(a.p,null,"Spring 서버 개발, 안드로이드 앱 개발 등을 해봤다면 높은 확률로 Gradle Kotlin DSL을 사용해봤을 것이다. Gradle Kotlin DSL은 Kotlin Script를 사용한다. 자세히보면 확장자가 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.kts</code>'}}),"로 이는 Kotlin Script를 의미한다. 빌드 스크립트로 널리 사용되고 있음에도 불구하고 실험적인 기능으로 분류하는 것이 황당하지만 이미 정착된 기술이라고 할 수는 있을 것 같다. 이번 글에서는 Gradle Kotlin DSL을 제외하고 Kotlin Script를 어떻게 활용할 수 있을지 알아보자."),"\n",e.createElement(a.h1,{id:"kotlin-script-개념"},e.createElement(a.a,{href:"#kotlin-script-개념"},"Kotlin Script 개념")),"\n",e.createElement(a.p,null,"일단 Kotlin Script에 대해 아주 간단히 알아보자. Script가 붙은 것처럼 Kotlin Script는 Kotlin을 마치 스크립트 언어처럼 사용할 수 있게 해준다. 즉, 컴파일이나 패키징 없이 바로 실행할 수 있다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// hello.kts</span>\n<span class="token keyword">fun</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello, Kotlin!"</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"위 코드를 쉘에서 실행하면 따로 빌드하지 않아도 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Hello, Kotlin!</code>'}}),"이 출력된다. 로컬에 Kotlin이 설치되어 있다면 다음과 같이 실행할 수 있다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ kotlinc <span class="token parameter variable">-script</span> hello.kts\nHello, Kotlin<span class="token operator">!</span></code></pre></div>'}}),"\n",e.createElement(a.h1,{id:"어디에-쓸-수-있을까"},e.createElement(a.a,{href:"#어디에-쓸-수-있을까"},"어디에 쓸 수 있을까?")),"\n",e.createElement(a.p,null,"간단하게 실행할 수 있다는 것은 좋은데 어디에 쓸 수 있을까? 그전에 써야할 필요가 있을까? 오히려 쓰지 말아야 할 이유가 더 많아보인다."),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"베타도 아니고 실험 단계"),"\n",e.createElement(a.li,null,"현재 JVM 환경에서만 가능"),"\n",e.createElement(a.li,null,e.createElement(a.strong,null,"솔직히 대안이 많다")),"\n"),"\n",e.createElement(a.p,null,"사실 써야할 이유는 전혀 없다고 볼 수 있다. 그럼에도 불구하고 이 글을 쓰는 이유는 두 가지로 재밌어 보이고 없어질 것 같지는 않기 때문이다. 이 글을 보는 여러분은 굳이 직접 설치해서 사용할 필요는 없다. 이 글을 보면서 재밌게 보고 가면 된다. 그럼 이번엔 어디에 쓸 수 있을지 알아보자."),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"빌드를 위한 스크립트","\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"이미 Gradle Kotlin DSL에서 잘 사용되고 있음"),"\n"),"\n"),"\n",e.createElement(a.li,null,"CLI 환경에서 스크립트 실행"),"\n",e.createElement(a.li,null,"Kotlin 프로그램 런타임에서 스크립트 실행"),"\n"),"\n",e.createElement(a.p,null,"빌드 스크립트를 제외하고 두 가지 사용 사례가 있을 수 있다. CLI 환경에서 스크립트를 실행할 때는 다른 스크립트 언어를 사용하거나 Shell Script를 사용할 수 있지만 Kotlin Script를 사용할 수도 있다. 또한 Kotlin 프로그램 런타임에서 스크립트를 실행할 때도 Kotlin Script를 사용할 수 있다."),"\n",e.createElement(a.h1,{id:"cli-환경에서-스크립트-실행"},e.createElement(a.a,{href:"#cli-환경에서-스크립트-실행"},"CLI 환경에서 스크립트 실행")),"\n",e.createElement(a.p,null,"앞서 말한 것 처럼 다른 스크립트 언어나 Shell Script 대신 Kotlin Script를 사용할 수 있다. 그렇다면 Kotlin Script를 사용하면 어떤 이점이 있을까?"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"Shell Script 보다는 쉬움"),"\n",e.createElement(a.li,null,"타입 안정성"),"\n",e.createElement(a.li,null,"외부 라이브러리 사용 가능"),"\n",e.createElement(a.li,null,"JVM 생태계와의 호환성"),"\n",e.createElement(a.li,null,"Kotlin 언어만 익숙한 경우"),"\n"),"\n",e.createElement(a.p,null,"이중에서 가장 큰 이점이 될 수 있는 것은 ",e.createElement(a.strong,null,"Kotlin 언어만 익숙한 경우"),"일 것이다. 다른 언어도 생태계가 충분히 큰 경우가 많고 타입 안정성 또한 보장해줄 수 있기 때문이다. 복잡하고 큰 연산의 경우 Kotlin Script를 사용하는 것이 좋을 수 있지만 보통 스크립트는 간단한 작업을 위해 사용되기 때문에 큰 이점이 되지는 못한다. 오히려 JVM 워밍업 시간이 필요하므로 간단한 스크립트라면 워밍업 시간이 0에 가까운 Python이나 Node.js에 비해 느리다."),"\n",e.createElement(a.p,null,"그렇지만 어차피 로컬에서 돌리는 스크립트라면 그 약간의 시간 차이가 크게 중요하지는 않을 것이다. 만약 코틀린을 사용하는 조직이라면 다양한 언어로 툴을 만드는 것보다 언어를 통일하는게 비용이나 유지보수 측면에서 더 좋을 가능성이 있다."),"\n",e.createElement(a.h2,{id:"설치-및-실행"},e.createElement(a.a,{href:"#설치-및-실행"},"설치 및 실행")),"\n",e.createElement(a.p,null,e.createElement(a.a,{href:"https://sdkman.io/",rel:"nofollow noopener noreferrer"},"SDKMAN"),"을 이용하여 Kotlin을 설치할 수 있다. 설치는 다음과 같이 가능하다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token comment"># Install sdkman</span>\n$ <span class="token function">curl</span> <span class="token parameter variable">-s</span> https://get.sdkman.io <span class="token operator">|</span> <span class="token function">bash</span>\n$ <span class="token builtin class-name">source</span> <span class="token string">"<span class="token environment constant">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span>\n\n<span class="token comment"># Install kotlin</span>\n$ sdk <span class="token function">install</span> kotlin</code></pre></div>'}}),"\n",e.createElement(a.p,null,"이후엔 다음과 같이 작성한 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hello.kts</code>'}}),"를 실행해볼 수 있다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// hello.kts</span>\n<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello, Kotlin!"</span></span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ kotlinc <span class="token parameter variable">-script</span> hello.kts\nHello, Kotlin<span class="token operator">!</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"다른 스크립트처럼 shebang을 사용하면 더 간단하게 실행할 수 있다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env kotlinc <span class="token operator">-</span>script\n\n<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello, Kotlin!"</span></span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">chmod</span> +x hello.kts\n$ ./hello.kts\nHello, Kotlin<span class="token operator">!</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"kscript"},e.createElement(a.a,{href:"#kscript"},"KScript")),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">kotlinc</code>'}}),"는 기본 기능만 있기 때문에 다른 언어를 대체하기는 역부족하다는 평가를 받는다. 그래서 ",e.createElement(a.a,{href:"https://github.com/kscripting/kscript",rel:"nofollow noopener noreferrer"},"KScript"),"라는 것이 오픈소스로 개발되었다. KScript는 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">kotlinc</code>'}}),"에 비해 스크립트 캐싱, 의존성 관리, 바이너리 패키징 등 다양한 기능을 추가로 제공한다. 설치는 마찬가지로 SDKMAN을 통해 가능하다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token comment"># Install kscript using sdkman</span>\n$ sdk <span class="token function">install</span> kscript</code></pre></div>'}}),"\n",e.createElement(a.p,null,"주의할 점으로 아직 Kotlin 2.0에선 실행이 안되기 때문에 1.9 버전대를 사용해야한다."),"\n",e.createElement(a.h3,{id:"외부-라이브러리-사용"},e.createElement(a.a,{href:"#외부-라이브러리-사용"},"외부 라이브러리 사용")),"\n",e.createElement(a.p,null,"KScript를 이용하면 외부 라이브러리를 편하게 사용할 수 있다. 다음은 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fuel</code>'}})," 라이브러리를 사용한 예시이다."),"\n",e.createElement(a.p,null,"노드의 package.json이나 파이썬의 requirements.txt 처럼 외부로 빼지 않고 스크립트 내부에 기술한다는 점이 좀 색다르긴 합니다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight has-highlighted-lines" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// main.kts</span>\n<span class="gatsby-highlight-code-line"><span class="token annotation builtin">@file:DependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.github.kittinunf.fuel:fuel:2.3.1"</span></span><span class="token punctuation">)</span></span>\n<span class="gatsby-highlight-code-line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>kittinunf<span class="token punctuation">.</span>fuel<span class="token punctuation">.</span>httpGet</span>\n<span class="token keyword">val</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> \n  <span class="token string-literal singleline"><span class="token string">"https://httpbin.org/get"</span></span>\n    <span class="token punctuation">.</span><span class="token function">httpGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">responseString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"코드를 보면 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DependsOn</code>'}}),"을 통해 의존성을 설정할 수 있고 그 후에 스크립트를 실행하면 알아서 설치하고 실행하는 것을 볼 수 있다. Node.js의 package.json이나 Python의 requirements.txt처럼 외부로 빼지 않고 스크립트 내부에 기술한다는 점이 좀 색다르다. 실행 결과는 다음과 같다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight has-highlighted-lines" data-language="shell"><pre class="language-shell"><code class="language-shell">$ kscript main.kts\n<span class="gatsby-highlight-code-line"><span class="token punctuation">[</span>kscript<span class="token punctuation">]</span> Resolving com.github.kittinunf.fuel:fuel:2.3.1<span class="token punctuation">..</span>.</span><span class="token punctuation">{</span>\n  <span class="token string">"args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,\n  <span class="token string">"headers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"Accept"</span><span class="token builtin class-name">:</span> <span class="token string">"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2"</span>,\n    <span class="token string">"Host"</span><span class="token builtin class-name">:</span> <span class="token string">"httpbin.org"</span>,\n<span class="token punctuation">..</span>.</code></pre></div>'}}),"\n",e.createElement(a.h3,{id:"바이너리-패키징"},e.createElement(a.a,{href:"#바이너리-패키징"},"바이너리 패키징")),"\n",e.createElement(a.p,null,"KScript를 이용하면 바이너리 패키징을 할 수 있다. 이를 통해 Kotlin이나 KScript가 없더라도 Java가 설치된 환경이라면 실행할 수 있게 배포할 수 있다. 바이너리 패키징을 하기 위해선 Gradle이 필요하다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ kscript <span class="token parameter variable">--package</span> main.kts <span class="token comment"># Need Gradle</span>\n<span class="token punctuation">[</span>kscript<span class="token punctuation">]</span> Packaging script <span class="token string">\'main\'</span> into standalone executable<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>kscript<span class="token punctuation">]</span> Packaged script <span class="token string">\'main\'</span> available at path:\n<span class="token punctuation">[</span>kscript<span class="token punctuation">]</span> /Users/kciter/Library/Caches/kscript/package_07f1f85044b41284dee18d4f8c159650/build/libs/main\n$ /Users/kciter/Library/Caches/kscript/package_07f1f85044b41284dee18d4f8c159650/build/libs\n$ ./main <span class="token comment"># Need Java</span>\n<span class="token punctuation">{</span>\n  <span class="token string">"args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,\n  <span class="token string">"headers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"Accept"</span><span class="token builtin class-name">:</span> <span class="token string">"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2"</span>,\n    <span class="token string">"Host"</span><span class="token builtin class-name">:</span> <span class="token string">"httpbin.org"</span>,\n    <span class="token string">"User-Agent"</span><span class="token builtin class-name">:</span> <span class="token string">"Java/17.0.3"</span>,\n    <span class="token string">"X-Amzn-Trace-Id"</span><span class="token builtin class-name">:</span> <span class="token string">"Root=1-6676a491-5935eb22586d7aa550e76b8d"</span>\n  <span class="token punctuation">}</span>,\n  <span class="token string">"origin"</span><span class="token builtin class-name">:</span> <span class="token string">"1.225.3.207"</span>,\n  <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://httpbin.org/get"</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"단순히 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">--package</code>'}}),"라는 옵션 하나만 추가하면 알아서 바이너리로 만들어준다. 바이너리로 만들면 자바 실행 환경만 갖추면 되기 때문에 만약 내가 내부 툴을 조직에 배포하고 싶다면 거쳐야할 허들이 줄어든다고 볼 수 있다."),"\n",e.createElement(a.h3,{id:"intellij와-함께-사용하기"},e.createElement(a.a,{href:"#intellij와-함께-사용하기"},"IntelliJ와 함께 사용하기")),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">kscript --idea</code>'}}),"를 사용하면 자동으로 IntelliJ에서 편집할 수 있게 구성해준다."),"\n",e.createElement(l.A,{src:"/images/2025-01-19-using-kotlin-script/autocomplete.png"}),"\n",e.createElement(a.p,null,"이를 통해 자동 완성이나 오류를 IDE에서 볼 수 있다."),"\n",e.createElement(a.h3,{id:"args-사용"},e.createElement(a.a,{href:"#args-사용"},"args 사용")),"\n",e.createElement(a.p,null,"KScript를 이용하면 자동으로 args를 받아올 수 있다"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">", "</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ kotlinc <span class="token parameter variable">--script</span> args.kts hi hello bye\n\n$ kscript args.kts hi hello bye\nhi, hello, bye</code></pre></div>'}}),"\n",e.createElement(a.p,null,"별도 라이브러리를 사용하고나 구현하지 않아도되니 간단한 스크립트를 만들때 편리하게 이용할 수 있다."),"\n",e.createElement(a.h2,{id:"사용-사례"},e.createElement(a.a,{href:"#사용-사례"},"사용 사례")),"\n",e.createElement(a.p,null,"뭔가 본격적으로 터미널 애플리케이션을 만든다면 여러 오픈소스 라이브러리를 이용할 수 있다. 대표적으로 다음과 같은 라이브러리가 있다."),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"Clikt : ",e.createElement(a.a,{href:"https://github.com/ajalt/clikt",rel:"nofollow noopener noreferrer"},"https://github.com/ajalt/clikt")),"\n",e.createElement(a.li,null,"Mordant : ",e.createElement(a.a,{href:"https://github.com/ajalt/mordant",rel:"nofollow noopener noreferrer"},"https://github.com/ajalt/mordant")),"\n"),"\n",e.createElement(a.p,null,"먼저 Clikt는 사용자가 전달하는 옵션이나 입력을 쉽게 처리할 수 있게 해준다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// ...</span>\n\n<span class="token keyword">class</span> Hello <span class="token operator">:</span> <span class="token function">CliktCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> count<span class="token operator">:</span> Int <span class="token keyword">by</span> <span class="token function">option</span><span class="token punctuation">(</span>help<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"Number of greetings"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">val</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> <span class="token function">option</span><span class="token punctuation">(</span>help<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"The person to greet"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Your name"</span></span><span class="token punctuation">)</span>\n\n  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ kscript clikt.kts <span class="token parameter variable">--count</span> <span class="token number">3</span>       \nYour name: kciter\nHello kciter<span class="token operator">!</span>\nHello kciter<span class="token operator">!</span>\nHello kciter<span class="token operator">!</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"코드를 보시다시피 입력 타입이나 사용자 입력인지, 옵션으로 전달되는지 디폴트 값이 있는지를 정의할 수 있다. 이 외에도 다양한 기능을 제공한다."),"\n",e.createElement(a.p,null,"다음으로 Mordant는 터미널에서 UI를 쉽게 그릴 수 있게 도와준다. DSL을 이용하므로 편리하다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> table <span class="token operator">=</span> table <span class="token punctuation">{</span>\n  tableBorders <span class="token operator">=</span> NONE\n  borderType <span class="token operator">=</span> SQUARE_DOUBLE_SECTION_SEPARATOR\n  align <span class="token operator">=</span> RIGHT\n  <span class="token function">column</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    align <span class="token operator">=</span> LEFT\n    style <span class="token operator">=</span> magenta\n  <span class="token punctuation">}</span>\n  <span class="token function">column</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    style <span class="token operator">=</span> magenta\n  <span class="token punctuation">}</span>\n  header <span class="token punctuation">{</span>\n    style <span class="token operator">=</span> magenta\n    <span class="token function">row</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Projected Cost"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Actual Cost"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Difference"</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">..</span><span class="token punctuation">.</span></code></pre></div>'}}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ kscript ./table.kts \n\n          │ Projected Cost │ Actual Cost │ Difference \n══════════╪════════════════╧═════════════╪════════════\n Food     │           <span class="token variable">$400</span>          <span class="token variable">$200</span> │       <span class="token variable">$200</span> \n──────────┼──────────────────────────────┼────────────\n Data     │           <span class="token variable">$100</span>          <span class="token variable">$150</span> │       $-50 \n──────────┼──────────────────────────────┼────────────\n Rent     │           <span class="token variable">$800</span>          <span class="token variable">$800</span> │         <span class="token variable">$0</span> \n──────────┼──────────────────────────────┼────────────\n Candles  │             <span class="token variable">$0</span>        <span class="token variable">$3</span>,600 │    $-3,600 \n──────────┼──────────────────────────────┼────────────\n Utility  │           <span class="token variable">$154</span>          <span class="token variable">$150</span> │        $-5 \n══════════╪══════════════════════════════╧════════════\n Subtotal │                                  $-3,455  </code></pre></div>'}}),"\n",e.createElement(a.p,null,"백오피스를 개발한다면 CSV나 엑셀 파일을 자주 건들게 되는데, 이럴 때 데이터를 파싱해서 취합하거나 확인하는 용도로 사용할 수도 있다."),"\n",e.createElement(a.h2,{id:"결론은"},e.createElement(a.a,{href:"#결론은"},"결론은?")),"\n",e.createElement(a.p,null,"일단 해볼 수 있는건 생각보다 많다."),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"배포 자동화"),"\n",e.createElement(a.li,null,"온보딩 툴"),"\n",e.createElement(a.li,null,"데이터 전처리"),"\n",e.createElement(a.li,null,"시드 데이터 추가"),"\n",e.createElement(a.li,null,"..."),"\n"),"\n",e.createElement(a.p,null,"이외에도 요즘은 GPT와 연동하여 다양한걸 만들어 볼 수도 있을 것이다. 필자가 몇 가지 예제를 더 만들어 두었다 만약 궁금하다면 다음 링크를 살펴보자. ",e.createElement(a.a,{href:"https://github.com/kciter/kotlin-script-examples",rel:"nofollow noopener noreferrer"},"https://github.com/kciter/kotlin-script-examples")),"\n",e.createElement(a.h1,{id:"런타임-환경에서-스크립트-실행"},e.createElement(a.a,{href:"#런타임-환경에서-스크립트-실행"},"런타임 환경에서 스크립트 실행")),"\n",e.createElement(a.p,null,"런타임 환경에서 Kotlin Script를 실행할 수 있는 방법은 ",e.createElement(a.strong,null,"Java Scripting API"),"나 ",e.createElement(a.strong,null,"Embeddable Host"),"를 사용하는 방법 두 가지가 있다. 그렇지만 사실 Java Scripting API가 내부적으론 Embeddable Host를 이용하기 때문에 같다고 볼 수 있다."),"\n",e.createElement(a.p,null,"런타임 환경에서 스크립트를 실행할 수 있으면 유용할 것 같지만 문제는 자료가 거의 없다! 그나마 튜토리얼과 예제 저장소가 유용하다."),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://kotlinlang.org/docs/custom-script-deps-tutorial.html",rel:"nofollow noopener noreferrer"},"https://kotlinlang.org/docs/custom-script-deps-tutorial.html")),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://github.com/Kotlin/kotlin-script-examples",rel:"nofollow noopener noreferrer"},"https://github.com/Kotlin/kotlin-script-examples")),"\n"),"\n",e.createElement(a.h2,{id:"java-scripting-api-jsr-223"},e.createElement(a.a,{href:"#java-scripting-api-jsr-223"},"Java Scripting API (JSR-223)")),"\n",e.createElement(a.p,null,"Java Scripting API는 스크립트 코드를 JVM 위에 동작하는 프로그램에서 실행할 수 있게 해준다. 인터페이스 API기 때문에 구현체만 있다면 어떠한 스크립트 언어라도 실행이 가능하다. 물론 Kotlin Script 구현체가 있기 때문에 Kotlin Script도 실행할 수 있다. 이를 위해 다음과 같이 의존성을 추가해야 한다."),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">org.jetbrains.kotlin:kotlin-scripting-jsr223</code>'}})," 의존성 필수","\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"라이브러리 이용이나 다른 스크립트 불러오기는 직접 구현해야함"),"\n"),"\n"),"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">kotlin-main-kts</code>'}}),"를 사용하는 경우 extension을 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main.kts</code>'}}),"로 지정하면 알아서 다 해준다","\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">org.jetbrains.kotlin:kotlin-main-kts</code>'}})," 추가 필요"),"\n",e.createElement(a.li,null,"의존성 관리, 다른 스크립트 불러오기 등 필요한 것들을 미리 다 구현해둠"),"\n"),"\n"),"\n"),"\n",e.createElement(a.p,null,"이후에 스크립트 실행은 다음과 같이 코드를 작성하여 실행할 수 있다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager\n\n<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> engine <span class="token operator">=</span> <span class="token function">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByExtension</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"main.kts"</span></span><span class="token punctuation">)</span><span class="token operator">!!</span>\n  engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>\n    <span class="token string-literal multiline"><span class="token string">"""\n      val a = 2\n      val b = 3\n      println("a + b = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression"><span class="token char">\'$\'</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">{a + b}")\n    """</span></span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Output: a + b = 5</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"코드가 생각보다 간단하다. 단순히 라이브러리 의존성만 추가해도 별도 설정없이 바로 사용이 가능하다. 물론 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">kotlin-main-kts</code>'}})," 라이브러리까지 추가해서 총 2개 의존성을 추가해야 알아서 다 해준다고 볼 수 있다."),"\n",e.createElement(a.p,null,"스크립트 시작 전 미리 값을 넣어두는 것도 가능하다. 키-벨류로 값을 넣어주면 스크립트 실행시 변수로 사용 가능하다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight has-highlighted-lines" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager\n\n<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> engine <span class="token operator">=</span> <span class="token function">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByExtension</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"main.kts"</span></span><span class="token punctuation">)</span><span class="token operator">!!</span>\n<span class="gatsby-highlight-code-line">  engine<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span><span class="gatsby-highlight-code-line">  engine<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>  engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>\n    <span class="token string-literal multiline"><span class="token string">"""</span>\n<span class="gatsby-highlight-code-line"><span class="token string">      println("a + b = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression"><span class="token char">\'$\'</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">{a + b}")</span></span><span class="token string">    """</span></span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"embeddable-host"},e.createElement(a.a,{href:"#embeddable-host"},"Embeddable Host")),"\n",e.createElement(a.p,null,"Embeddable Host는 Kotlin에서 직접 제공하는 내장 컴파일러를 이용하는 방식이다. 앞서 Java Scripting API도 사실 이걸 이용하고 있다고 말한 것처럼 결국 내부는 다 같다. 그런데 왜 굳이 둘로 분리하고 공식 홈페이지는 이 방식만 설명하는지는 잘 모르겠지만 추측해보면 추후 멀티플랫폼을 위함이 아닐까라고 생각한다."),"\n",e.createElement(a.p,null,"해당 방식은 구현하기 위해 Script Definition과 Scripting Host를 만들어야 한다. 코드가 좀 길어져서 이 글에서는 생략하고 넘어가겠다. 만약 궁금하다면 다음 공식 홈페이지 문서를 읽어보기를 바란다. ",e.createElement(a.a,{href:"https://kotlinlang.org/docs/custom-script-deps-tutorial.html",rel:"nofollow noopener noreferrer"},"https://kotlinlang.org/docs/custom-script-deps-tutorial.html")),"\n",e.createElement(a.h2,{id:"무엇을-할-수-있을까"},e.createElement(a.a,{href:"#무엇을-할-수-있을까"},"무엇을 할 수 있을까?")),"\n",e.createElement(a.p,null,"안타깝지만 Kotlin Script는 실험 단계이므로 프로덕션 환경에서 사용하기에는 무리가 있다. 그래도 몇 가지 실험적인 것을 해보는 것은 재미있을 수 있다. 다음으로 필자가 생각한 사용 사례 예시 두 가지를 살펴보자."),"\n",e.createElement(a.h3,{id:"html-template"},e.createElement(a.a,{href:"#html-template"},"HTML Template")),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">kotlinx.html</code>'}})," 라이브러리를 사용하면 HTML을 Kotlin DSL로 작성 가능하다. ",e.createElement(a.a,{href:"https://ktor.io/",rel:"nofollow noopener noreferrer"},"ktor"),"에선 이를 이용하여 템플릿을 만든다. 물론 결국 Kotlin DSL이므로 변경할 떄마다 다시 빌드를 해야한다는 단점이 있다. Auto Reload가 있긴하지만 그래도 약간의 시간이 필요하다."),"\n",e.createElement(a.p,null,"그런데 만약 Kotlin Script에서 해당 라이브러리를 사용한다면 별도 컴파일 타임 없이 템플릿 작성이 가능하지 않을까? 그런 마음으로 다음과 같이 코드를 작성해보았다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager\n\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Params</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span>\n\n<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> engine <span class="token operator">=</span> <span class="token function">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByExtension</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"main.kts"</span></span><span class="token punctuation">)</span><span class="token operator">!!</span>\n  engine<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"params"</span></span><span class="token punctuation">,</span> <span class="token function">Params</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Kotlin"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal multiline"><span class="token string">"""\n    @file:DependsOn("org.jetbrains.kotlinx:kotlinx-html-jvm:0.8.0")\n    import kotlinx.html.*; import kotlinx.html.stream.*; import kotlinx.html.attributes.*\n    \n    createHTML().html {\n      body {\n        h1 { +"Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression"><span class="token string-literal singleline"><span class="token string">"$"</span></span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">{params.name}!" }\n      }\n    }"""</span></span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"일단은 테스트했을 때 잘돌아간다. 만약 이를 외부 파일로 분리한다면 빌드 없이도 바로 반영할 수 있을 것이다. 그리고 HTML이 아니라 JSON, XML 등 다양한 포맷로도 사용할 수 있을 것이다. 이 정도면 Kotlin Script가 Stable 상태가 됐을 때 고도화 시키는 것도 괜찮지 않을까?"),"\n",e.createElement(a.h2,{id:"ruby-warrior"},e.createElement(a.a,{href:"#ruby-warrior"},"Ruby Warrior")),"\n",e.createElement(a.p,null,"이전에 유명했던 오픈소스 게임으로 Ruby Warrior라는 것이 있다. Ruby Warrior는 게임을 하는 사람이 Ruby 코드를 넣어 캐릭터를 조작하고 퍼즐을 클리어하는 게임이다."),"\n",e.createElement(l.A,{src:"/images/2025-01-19-using-kotlin-script/ruby-warrior.webp"}),"\n",e.createElement(a.p,null,"Ruby나 Python, Node.js같은 여러 언어에서 구현이 됐지만 스크립트가 아닌 언어는 구현체가 거의 없다. 왜냐하면 스크립트 언어는 eval이 가능하니 구현이 편리하지만 컴파일을 하는 언어는 별도로 컴파일하고 결과를 출력하는 복잡한 과정이 필요하다. 하지만 Kotlin은 Kotlin Script가 있으므로 상대적으로 쉽게 구현이 가능할 것이다."),"\n",e.createElement(a.p,null,"이처럼 런타임 중 사용자에게 직접 코드를 받아 실행하는 경우 Kotlin Script를 사용하면 편리할 것이다. 물론 이런 경우는 거의 없고 보안 문제가 있을 수 있으니 주의할 필요는 있다."),"\n",e.createElement(a.p,null,"필자는 이를 구현해보려 했으나 시간이 부족하여 아직 완성하지 못했다. 빠른 시일 내에 완성해서 공개해보려고 한다."),"\n",e.createElement(a.h1,{id:"마치며"},e.createElement(a.a,{href:"#마치며"},"마치며")),"\n",e.createElement(a.p,null,"결론적으로 실험 단계지만 쓰려면 잘 쓸 수 있을 것 같다는 생각이 들었다. 하지만 여러모로 아직 부족하다. 특별하게 우위에 있는 부분이 없기 때문에 다른 스크립트 언어를 대체할 수 있냐고하면 확실하게 그렇다고는 말할 수 없다."),"\n",e.createElement(a.p,null,"그럼에도 불구하고 Spring 서버 팀이나 안드로이드 팀 등 Kotlin을 주력으로 쓰는 팀이라면 이용해 볼만한 가치는 있다고 생각한다. 다만 Embedded Scripting은 실제 제품에 이용하기엔 위험하므로 사용하지 않는 것이 좋다. 추후 빌드 시간이 너무 오래걸리는 경우 스크립트로 외부화하는 경우도 있을수는 있겠지만 아직은 좀 먼 이야기 같다."),"\n",e.createElement(a.p,null,"그래서 결론은 ",e.createElement(a.strong,null,"팀 내부에서 쓰는 스크립트를 만들 때 이용해보면 어떨까?")," 정도로 생각하면 좋을 것 같다."))}a.default=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.R)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)}},5799:function(n,a,s){var t=s(9474),e=s(1615),l=s(6810);a.A=n=>{let{src:a,caption:s,width:p,maxWidth:o,expandable:c}=n;const{0:i,1:r}=(0,t.useState)(!1);return console.log(i),(0,l.Y)("figure",null,(0,l.Y)("img",{src:a,width:p||"100%",style:{cursor:c?"zoom-in":"default",maxWidth:o},onClick:c?()=>r(!0):void 0}),s&&(0,l.Y)("figcaption",{dangerouslySetInnerHTML:{__html:s}}),i&&e.createPortal((0,l.Y)("div",{style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"zoom-out",backgroundColor:"rgba(0, 0, 0, 0.7)"},onClick:()=>r(!1)},(0,l.Y)("div",{style:{borderRadius:8,maxWidth:1440,width:"100%",position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white"}},(0,l.Y)("img",{src:a,width:"100%"}))),document.body))}}}]);
//# sourceMappingURL=08443dd0af837abe8e5e801b5b5023369ffdf4b0-7c6914547a0d751c16ce.js.map