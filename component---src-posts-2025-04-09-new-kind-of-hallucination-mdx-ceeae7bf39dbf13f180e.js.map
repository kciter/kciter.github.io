{"version":3,"file":"component---src-posts-2025-04-09-new-kind-of-hallucination-mdx-ceeae7bf39dbf13f180e.js","mappings":"6QAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,OAAQ,SACRC,KAAM,SACLC,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0PAA2P,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sTAAuTK,EAAAA,cAAoBR,EAAYI,OAAQ,KAAM,cAAe,qBAAsB,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4JAA6JK,EAAAA,cAAoBR,EAAYK,KAAM,CAC9/BI,wBAAyB,CACvBC,OAAQ,gJAER,8FAA+FF,EAAAA,cAAoBR,EAAYI,OAAQ,KAAM,eAAgB,iBAAkB,KAAMI,EAAAA,cAAoBG,EAAAA,EAAO,CAClNC,IAAK,4DACLC,QAAS,SACP,KAAML,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qGAAsG,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4MAA6M,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iBAAkBK,EAAAA,cAAoBR,EAAYI,OAAQ,KAAM,UAAW,oMACjhB,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC3E,OAAOQ,EAAYP,EAAAA,cAAoBO,EAAWhB,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,yDCoCA,IA/CciB,IAAgE,IAA/D,IAAEJ,EAAG,QAAEC,EAAO,MAAEI,EAAK,SAAEC,EAAQ,WAAEC,GAAwBH,EACtE,MAAM,EAACI,EAAW,EAACC,IAAkBC,EAAAA,EAAAA,WAAS,GAE9C,OACEC,EAAAA,EAAAA,GAAA,eACEA,EAAAA,EAAAA,GAAA,OACEX,IAAKA,EACLK,MAAOA,GAAS,OAChBO,MAAO,CAAEC,OAAQN,EAAa,UAAY,UAAWD,YACrDQ,QAASP,EAAa,IAAME,GAAe,QAAQM,IAEpDd,IAAWU,EAAAA,EAAAA,GAAA,cAAYd,wBAAyB,CAAEC,OAAQG,KAC1DO,GACCQ,EAAAA,cACEL,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLK,SAAU,QACVC,IAAK,EACLC,KAAM,EACNd,MAAO,OACPe,OAAQ,OACRP,OAAQ,WACRQ,gBAAiB,sBAEnBP,QAASA,IAAML,GAAe,KAE9BE,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLU,aAAc,EACdhB,SAAU,KACVD,MAAO,MACPY,SAAU,QACVC,IAAK,MACLC,KAAM,MACNI,UAAW,wBACXF,gBAAiB,WAGnBV,EAAAA,EAAAA,GAAA,OAAKX,IAAKA,EAAKK,MAAM,WAGzBmB,SAASC,MAEN,C,qEC3Bb,MAAMC,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBjC,GAC/B,MAAMkC,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfhC,EACFA,EAAWkC,GAGb,IAAIA,KAAsBlC,EACnC,GACA,CAACkC,EAAmBlC,GAExB,C","sources":["webpack://kciter.so/./src/posts/2025-04-09-new-kind-of-hallucination.mdx","webpack://kciter.so/./src/components/Image/index.tsx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"요즘은 정말 AI 열풍 그 자체입니다. 저 또한 최근에는 코딩, 학습, 글쓰기, 리서치 등 다양한 영역에서 AI를 적극적으로 이용하고 있습니다. 지금 이 시점의 GPT, Claude와 같은 툴은 정말 대단합니다. 오랫동안 자료 조사가 필요했던 내용을 순식간에 정리해 주고, 저 자신도 자세히 몰랐던 내용을 알려주기도 합니다. 이를 통해 새로운 영감이 생겨나기도 합니다. 저 또한, 다양한 영역에 AI를 이용하며 새로운 재미를 얻고 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"다만, 어느 순간 이상한 기분을 느꼈습니다. AI에게 내 생각을 말하고, 새로운 아이디어를 얻는 과정에서 마치 모든 것이 잘 풀리는 듯한 느낌이 들었습니다. 문제는 AI의 도움을 받아 쓴 글을 다시 읽을 때 발생했습니다. 언제나 퇴고할 때는 수정할 곳이 보였지만 AI를 이용한 글은 그 정도가 아니었습니다. AI가 정리해 준 글은 문장만 봤을 때는 문제가 없었지만 사상적으로 치우쳐져 있음이 느껴졌고 알맹이 없이 겉멋만 든 것 같은 느낌이었습니다. 그리고 당연하겠지만 마치 내가 쓴 글이 아닌 다른 사람의 글을 읽는 듯한 기분이었습니다. 그 순간, \", React.createElement(_components.strong, null, \"새로운 종류의 환각\"), \"에 당했다는 것을 깨달았습니다.\"), \"\\n\", React.createElement(_components.p, null, \"기존 AI의 환각은 잘못된 정보를 제공하는 정도였습니다. 반면, 지금의 환각은 '내 기분이 좋아지게끔 말하는 것'입니다. 과거에 존재하던 환각은 지금에 와서는 많이 해소됐습니다. 하지만, 현실 세계에선 정답이 반드시 정답이 아닐 수 있다는 것을 모두가 압니다. 가령 누군가 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">순수 함수가 없는 함수형 프로그래밍에 대해 어떻게 생각해? 솔직히 나는 이게 앞으로 미래의 프로그래밍 먹거리가 될 새로운 패러다임이 될거라고 생각해. 왜냐하면 힙하고 멋지거든. 안그래?</code>\"\n    }\n  }), \"라고 말한다면 대부분의 개발자는 속으로 미쳤다고 생각할 것입니다. 하지만 AI는 이런 말을 진지하게 받아 좋은 쪽으로 해석해 줍니다. 그리고 AI를 믿는 사람에게 \", React.createElement(_components.strong, null, \"역시 내 생각이 맞아\"), \"라고 생각하게 만듭니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2025-04-09-new-kind-of-hallucination/what-the.png\",\n    caption: \"미치겠다\"\n  }), \"\\n\", React.createElement(_components.p, null, \"AI는 기본적으로 내가 원하는 답을 주고, 내가 원하는 대로 행동합니다. 그래서 AI는 내가 원하는 답을 줄 수 있지만, 다른 사람들에게도 통용되는 정답은 아닐 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"그래서 저는 AI(특히 GPT)를 이용할 때, 반드시 '솔직하게, 객관적으로, 매운맛으로' 등의 말을 덧붙입니다. 이렇게 말하면 내 의견과 반대되는 다른 의견을 제시해 주기도 하고, 내가 원하는 답을 주지 않기도 합니다. 그럼에도 불구하고 AI는 여전히 나에게 '좋은 기분'을 주는 답변을 해주기 때문에 환각에 현혹되지 않고 제대로 판단하는 것이 중요합니다.\"), \"\\n\", React.createElement(_components.p, null, \"다시금 정말 중요한 것은 \", React.createElement(_components.strong, null, \"정확한 지식\"), \"이라는 것을 깨닫습니다. AI를 이용한 활동은 정말 편리하지만, 정확한 지식이 없다면 AI가 제공하는 정보는 그저 환각일 뿐입니다. 정확한 지식 없이 신념 만을 가지고 있다면 반드시 잘못된 방향으로 가게 됩니다. 만약 중요한 일을 한다면, 아직까지 AI는 그저 도구라는 것을 인지하고 최종 판단은 사람에게 달려 있다는 것을 잊지 말아야 합니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","Image","src","caption","wrapper","MDXLayout","_ref","width","maxWidth","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","transform","document","body","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}