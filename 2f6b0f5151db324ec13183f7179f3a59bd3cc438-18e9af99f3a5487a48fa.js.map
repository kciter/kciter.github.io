{"version":3,"file":"2f6b0f5151db324ec13183f7179f3a59bd3cc438-18e9af99f3a5487a48fa.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2024-01-21-type-driven-development.mdx","webpack://kciter.so/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    h1: \"h1\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    sup: \"sup\",\n    section: \"section\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"타입은 개발자에게 친숙하면서도 어색할 수 있는 개념이다. 특히 정적 타입 언어를 사용한다면 타입은 땔래야 땔 수 없는 존재다. 타입은 가끔씩 귀찮게 굴 때도 있지만 개발자에게 \", React.createElement(_components.strong, null, \"막강한 무기\"), \"가 될 수 있다. \", React.createElement(_components.strong, null, \"타입은 함수와 데이터가 준수해야 하는 엄격한 계약\"), \"이며 타입 시스템은 이를 어길 수 없게 만든다.\"), \"\\n\", React.createElement(_components.p, null, \"개발자는 타입 시스템 잘 활용하여 더 안정적인 프로그램을 만들거나 코드 중복을 제거하는 것이 가능하다. 반대로 개발자가 타입을 풍부하게 사용하지 않는다면 타입 시스템을 통해 얻을 수 있는 이점을 제대로 누릴 수 없다. 이 글에서 소개하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">타입 주도 개발</code>\"\n    }\n  }), \"은 타입 시스템에 대해 공부하기 좋은 방법론이며 이를 통해 로직에 대한 새로운 관점을 익힐 수 있다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"🚨 참고로 타입 주도 개발은 대중적이지 않기에 뚜렷하게 어떻게 해야한다고 정해져 있지 않다. 특히나 타입 시스템이 정교하지 않은 언어를 주력으로 사용한다면 의미가 없는 허상이라 생각할 수 있다. 그렇지만 최근 몇 년 동안 함수형 기반 언어의 개념이 널리 퍼졌고 타입을 잘 다루기 위한 논의도 충분히 깊어졌기에 시도해볼 수 있는 방법론이 됐다고 생각한다. 따라서 이 글에서는 필자 나름대로 타입을 중심으로 사고하는 방법을 소개할 것이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"타입에-대한-재인식\"\n  }, React.createElement(_components.a, {\n    href: \"#타입에-대한-재인식\"\n  }, \"타입에 대한 재인식\")), \"\\n\", React.createElement(_components.p, null, \"타입에 대해 깊게 생각해본 적이 없다면 단순히 언어에서 제공되는 원시 타입이나 정의된 클래스만을 생각할 수 있다. 하지만 타입 시스템을 잘 활용하면 좀 더 풍부한 타입을 정의할 수 있다. 앞서 말했듯이 이를 통해 코드의 안정성을 높이거나 코드 중복을 제거할 수 있다. 타입을 잘 활용하는 방법과 타입 주도 개발에 대해 알아보기 전에 타입이 무엇인지 다시 알아보도록하자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입은-집합이다\"\n  }, React.createElement(_components.a, {\n    href: \"#타입은-집합이다\"\n  }, \"타입은 집합이다\")), \"\\n\", React.createElement(_components.p, null, \"타입은 어떠한 값이 속할 수 있는 집합이며, 이 집합에 속하는 값은 타입을 준수한다고 말한다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입은 정수를 포함하는 집합이며, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입은 문자열을 포함하는 집합이다. 예를 들어 표현하면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">Int <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2147483648</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2147483647</span> <span class=\\\"token punctuation\\\">}</span>\\nBoolean <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span>\\nString <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"a\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"b\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"c\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"중요한 것은 타입은 무한하지 않고 제한적이라는 것이다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-2147483648</code>\"\n    }\n  }), \"부터 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">2147483647</code>\"\n    }\n  }), \"까지의 정수만 포함한다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입이라는 집합에 속하는 값은 이 범위를 벗어날 수 없다는 것을 의미한다. 따라서 이제 인식을 바꿔 \", React.createElement(_components.strong, null, \"타입은 범위를 제한한 집합\"), \"이라고 생각해보자. 이는 개발자에게 있어 타입이라는 개념을 더욱 풍부하게 만들어준다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입의-변환\"\n  }, React.createElement(_components.a, {\n    href: \"#타입의-변환\"\n  }, \"타입의 변환\")), \"\\n\", React.createElement(_components.p, null, \"타입에 속한 값은 변형을 통해 다른 타입으로 변환될 수 있다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 대부분의 언어에서 제공하는 변환 함수를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입으로 변환될 수 있다. 혹은 같은 계열인 타입으로 변환하는 것도 가능하다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 더 큰 범위인 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입으로 변환될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"중요한 것은 변환을 할 때 \", React.createElement(_components.strong, null, \"함수를 거친다\"), \"는 것이다. 수학적으로 함수는 정의역에 해당하는 값을 치역으로 변환하는 것이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/function-process.png\",\n    caption: \"수학 책에서 볼 수 있던 도식\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"이를 프로그래밍 언어의 함수에 대응하면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">          ↓ 정의역  ↓ 치역<span class=\\\"token punctuation\\\">(</span>공역<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span> \\n  x<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"즉, 함수의 파라메터는 정의역에 해당하며, 반환값은 치역에 해당한다. 이러한 개념으로 바라보면 함수를 크게 세 가지로 나눌 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"범위를 확장하는 함수\"), \"\\n\", React.createElement(_components.li, null, \"범위를 제한하는 함수\"), \"\\n\", React.createElement(_components.li, null, \"일대일 대응 함수\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"범위를 확장하는 함수는 더 요소가 더 많은 집합으로 변환하는 함수를 말한다. 이를 조금 더 단순하게 표현하면 \", React.createElement(_components.strong, null, \"범위가 작은 타입에서 큰 타입으로 변환하는 것\"), \"을 말한다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입으로 변환될 수 있다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입의 값으로 변환될 때 값의 손실이 없기 때문이다. 하지만 반대는 문제가 생길 수 있다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/injective-function.png\",\n    caption: \"범위 확장 함수\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"간단한 코드 예시를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">enum</span> Event <span class=\\\"token punctuation\\\">{</span>\\n  BIRTH_DAY<span class=\\\"token punctuation\\\">,</span>\\n  AWESOME_DAY<span class=\\\"token punctuation\\\">,</span>\\n  BEAUTIFUL_DAY\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getEventId</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>BIRTH_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">1</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>AWESOME_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">2</span>\\n    Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">3</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입으로 변환하는 함수이다. 이 함수는 단사 함수라서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값으로 변환될 때 값의 손실이 없다. 하지만 반대로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입의 값으로 변환될 때 값의 손실이 발생한다. 예를 들어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">4</code>\"\n    }\n  }), \"라는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입으로 변환될 수 없다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \" 타입의 값은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">2</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">3</code>\"\n    }\n  }), \"만 포함하기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"반대로 범위를 제한하는 함수는 \", React.createElement(_components.strong, null, \"범위가 큰 타입에서 작은 타입으로 변환하는 것\"), \"을 말한다. 앞서 들었던 예의 반대로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Long</code>\"\n    }\n  }), \" 타입의 값을 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입으로 변환할 수는 있지만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입의 범위를 벗어날 수 있기 때문에 이에 대한 처리가 필요하다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/surjective-function.png\",\n    caption: \"범위 제한 함수\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 작성한 코드의 반대를 작성해보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getEvent</span><span class=\\\"token punctuation\\\">(</span>eventId<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Event <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>eventId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BIRTH_DAY\\n    <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>AWESOME_DAY\\n    <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> Event<span class=\\\"token punctuation\\\">.</span>BEAUTIFUL_DAY\\n  <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eventId</code>\"\n    }\n  }), \"를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Event</code>\"\n    }\n  }), \"를 생성할 수 있지만 범위를 벗어나는 경우가 생기기 때문에 이에 대한 예외 처리를 추가해줬다.\"), \"\\n\", React.createElement(_components.p, null, \"마지막으로 일대일 대응 함수는 두 집합 사이를 중복 없이 일대일로 대응시키는 함수를 말한다. 보통 항등 함수를 말한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 1</span>\\n<span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">126</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 126</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 같은 함수가 불필요하게 보일 수 있지만 항등 함수는 0과 1이 필요한 것처럼 고차 함수를 사용할 때 유용하게 사용할 수 있다. 예를 들어, 변환 함수를 인자로 받는 고차 함수를 작성한다고 가정해보자. 이때 만약 변환이 필요없다면 항등 함수를 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> T <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token punctuation\\\">,</span> R<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> R<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>R<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">::</span>identity<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [1, 2, 3]</span>\\n<span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> it <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [2, 4, 6]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 봤을 때 단순히 변환 함수를 사용하지 않고 바로 반환하면 된다고 생각할 수 있다. 일반적으론 그렇지만 함수형으로 코드를 작성한다면 분기 로직을 작성하기 애매하거나 가독성 등을 위해 항등 함수를 사용하는 경우가 있을 수 있다. 예를 들어, 조건에 따라 값을 다르게 변형해야 하는 경우가 있고 조건 중 하나가 변환을 하지 않아도 되는 경우가 있다. 이때 항등 함수를 사용하면 이를 깔끔하게 처리할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 상품 상태를 나타내는 enum class</span>\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> ProductStatus <span class=\\\"token punctuation\\\">{</span>\\n  OnSale<span class=\\\"token punctuation\\\">,</span> Regular\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 상품 데이터 클래스</span>\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> \\n  <span class=\\\"token keyword\\\">val</span> price<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">,</span> \\n  <span class=\\\"token keyword\\\">val</span> status<span class=\\\"token operator\\\">:</span> ProductStatus\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 항등 함수 정의</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> T <span class=\\\"token operator\\\">=</span> x\\n\\n<span class=\\\"token comment\\\">// 가격에 할인을 적용하는 함수</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">applyDiscount</span><span class=\\\"token punctuation\\\">(</span>price<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">,</span> discount<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Double <span class=\\\"token operator\\\">=</span> \\n  price <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">-</span> discount<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 상품의 상태에 따라 가격을 변환하는 로직</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">transformProductPrice</span><span class=\\\"token punctuation\\\">(</span>product<span class=\\\"token operator\\\">:</span> Product<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Double <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 패턴 매칭을 통해 변환기를 선택</span>\\n  <span class=\\\"token keyword\\\">val</span> transformer<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>Double<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Double <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>product<span class=\\\"token punctuation\\\">.</span>status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ProductStatus<span class=\\\"token punctuation\\\">.</span>OnSale <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span> price <span class=\\\"token operator\\\">-></span> <span class=\\\"token function\\\">applyDiscount</span><span class=\\\"token punctuation\\\">(</span>price<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.4</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span>\\n    ProductStatus<span class=\\\"token punctuation\\\">.</span>Regular <span class=\\\"token operator\\\">-></span> <span class=\\\"token operator\\\">::</span>identity\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 선택된 변환기를 사용하여 가격을 변환</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">transformer</span><span class=\\\"token punctuation\\\">(</span>product<span class=\\\"token punctuation\\\">.</span>price<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> onSaleProduct <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Laptop\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000.0</span><span class=\\\"token punctuation\\\">,</span> ProductStatus<span class=\\\"token punctuation\\\">.</span>OnSale<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> regularProduct <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Phone\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">800.0</span><span class=\\\"token punctuation\\\">,</span> ProductStatus<span class=\\\"token punctuation\\\">.</span>Regular<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">transformProductPrice</span><span class=\\\"token punctuation\\\">(</span>onSaleProduct<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 600.0</span>\\n<span class=\\\"token function\\\">transformProductPrice</span><span class=\\\"token punctuation\\\">(</span>regularProduct<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 800.0</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입을-통한-추상화\"\n  }, React.createElement(_components.a, {\n    href: \"#타입을-통한-추상화\"\n  }, \"타입을 통한 추상화\")), \"\\n\", React.createElement(_components.p, null, \"앞서 범위에 대한 이야기를 한 것은 \", React.createElement(_components.strong, null, \"타입을 통해 집합이 바뀌고 범위가 바뀔 수 있다는 것\"), \"을 말하고 싶었기 때문이다. 개발자는 목적 달성을 위해 함수를 통해 값을 변형하거나 필터링하거나 좁히거나 늘릴 수 있다. 이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, \", React.createElement(_components.strong, null, \"타입을 통해 로직을 추상화 하는 것이 가능하다\"), \"라는 뜻이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/logic.png\",\n    caption: \"로직은 입출력의 연속\",\n    width: \"100%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"프로그램을 개발할 때 어떤 패러다임과 방법론을 사용하더라도 로직이 최종적으로 입력, 처리, 출력을 거친다는 것은 변하지 않는다. 타입을 통해 로직을 추상화 한다는 것은 \", React.createElement(_components.strong, null, \"입력과 출력을 타입으로 나타내고 이를 통해 로직을 설계\"), \"한다는 것과 같다. 이는 뒤에서 조금 더 자세히 설명할 타입 주도 개발의 핵심이라 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"아주 간단한 예시를 들어보자. 만약 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">리스트 안에 있는 모든 숫자를 더하는 함수</code>\"\n    }\n  }), \"를 작성한다고 가정해보자. 그렇다면 다음과 같이 표현할 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"입력: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;Int></code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"출력: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이를 함수로 표현하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;Int> -> Int</code>\"\n    }\n  }), \"와 같이 표현할 수 있다. 이를 통해 로직을 처리하는 함수의 입력과 출력을 타입으로 나타내고 이를 통해 로직을 구현하는 것이 가능하다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// TODO: List&lt;Int>를 목적에 맞게 처리하여 Int로 가공해야 한다.</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"가독성과-런타임-안정성-챙기기\"\n  }, React.createElement(_components.a, {\n    href: \"#가독성과-런타임-안정성-챙기기\"\n  }, \"가독성과 런타임 안정성 챙기기\")), \"\\n\", React.createElement(_components.p, null, \"주요 목적은 아니지만 타입을 이용하면 가독성을 챙기는 것도 가능하다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> String\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Int\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> String\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스를 정의한 코드이다. 이 코드는 문제가 없어 보이지만 이후에 문제가 생길 수 있다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스가 가지고 있는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">age</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">email</code>\"\n    }\n  }), \" 속성은 각각 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입을 가지고 있다. 따라서 정수와 문자열을 할당할 수 있지만 할당된 값이 정말로 나이와 이메일인지는 알 수 없다. 이는 타입 시스템이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 없기 때문이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"/images/2024-01-21-type-driven-development/types-are-a-lie.png\",\n    caption: \"타입이 거짓말을 하고 있어요!\",\n    width: \"50%\"\n  }), \"\\n\", React.createElement(_components.p, null, \"이 문제를 해결하기 위해 검증 로직을 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> String\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Int\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> String\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>age <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"나이는 0보다 작을 수 없습니다.\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"@\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이메일 형식이 올바르지 않습니다.\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같이 해결할 수도 있지만 타입을 이용하면 이를 좀 더 우아하게 해결할 수 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 참고로 JVM 환경이라면 @JvmInline 어노테이션이 필요하다</span>\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNotBlank</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이름은 공백일 수 없습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Age</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"나이는 0보다 작을 수 없습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nvalue <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Email</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contains</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"@\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"이메일 형식이 올바르지 않습니다.\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> User <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token operator\\\">:</span> Name\\n  <span class=\\\"token keyword\\\">var</span> age<span class=\\\"token operator\\\">:</span> Age\\n  <span class=\\\"token keyword\\\">var</span> email<span class=\\\"token operator\\\">:</span> Email\\n\\n  <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> Name<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token operator\\\">:</span> Age<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token operator\\\">:</span> Email<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">=</span> email\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이런 방식으로 타입을 별도로 정의하여 사용하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 클래스가 가지고 있는 속성이 어떤 의미를 가지고 있는지 알 수 있으므로 가독성에 더 좋다. 또한 이러한 타입은 다양한 곳에서 재사용할 수 있으므로 코드의 중복을 줄일 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"참고로 이 글에서는 코틀린의 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">value class</code>\"\n    }\n  }), \"를 사용헀지만 다른 언어에서도 클래스를 사용하여 똑같이 만들 수 있다. 정리하자면 타입 시스템을 풍부하게 사용하는 것으로 다음과 같은 이점을 얻을 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"컴파일 타임에 오류를 발견할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"타입을 통해 로직을 설계 할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"코드의 가독성을 높일 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"코드의 안정성을 높일 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"우아한-타입-활용\"\n  }, React.createElement(_components.a, {\n    href: \"#우아한-타입-활용\"\n  }, \"우아한 타입 활용\")), \"\\n\", React.createElement(_components.p, null, \"타입 시스템을 잘 이해하고 있다면 타입에 기반하여 범위와 행동을 제한하는 설계가 가능하다. 만약 내 코드를 사용하는 다른 개발자가 조금 더 안전하게 코딩할 수 있게 돕고 싶다면 타입 시스템을 잘 활용하는 것이 좋다.\"), \"\\n\", React.createElement(_components.p, null, \"이번에는 앞서 소개한 사례 외에 타입 시스템을 활용한 다른 사례를 소개할 것이다. 다만, 타입 시스템의 동작은 프로그래밍 언어마다 다르기에 이 글에서 소개하는 문법이 모든 언어에서 지원되는 것은 아니다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"제네릭을-이용한-범용적인-타입\"\n  }, React.createElement(_components.a, {\n    href: \"#제네릭을-이용한-범용적인-타입\"\n  }, \"제네릭을 이용한 범용적인 타입\")), \"\\n\", React.createElement(_components.p, null, \"제네릭(Generic)\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-1\",\n    id: \"user-content-fnref-1\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"1\")), \"은 \", React.createElement(_components.strong, null, \"타입을 일반화하는 방법\"), \"으로 많은 언어가 지원하므로 대부분 잘 아는 문법일 것이다. 예를 들어 Kotlin에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List</code>\"\n    }\n  }), \" 타입은 제네릭을 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입이나 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입을 모두 포함할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">val</span> numbers<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> strings<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"a\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"b\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"c\\\"</span></span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(\"figcaption\", null, \"하나의 List 타입으로 Int와 String을 담을 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"만약 타입 시스템이 제네릭을 지원하지 않는다면 아래 코드처럼 필요할 때마다 타입을 정의해야 한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> IntList <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* ... */</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> StringList <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* ... */</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> numbers<span class=\\\"token operator\\\">:</span> IntList <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> strings<span class=\\\"token operator\\\">:</span> StringList <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"a\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"b\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"c\\\"</span></span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"제네릭을 잘 사용한다면 코드 중복을 많이 줄일 수 있다. 여기까지는 대부분 잘 아는 내용이므로 좀 더 복잡한 내용을 살펴보자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"팬텀-타입을-이용한-범위-제한\"\n  }, React.createElement(_components.a, {\n    href: \"#팬텀-타입을-이용한-범위-제한\"\n  }, \"팬텀 타입을 이용한 범위 제한\")), \"\\n\", React.createElement(_components.p, null, \"팬텀 타입(Phantom Type)은 이름 그대로 \", React.createElement(_components.strong, null, \"실체가 없는 타입\"), \"을 말한다. 예를 들어 다음 타입은 의미가 없는 타입이라 볼 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token comment\\\">// TypeScript</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Phantom</span> <span class=\\\"token comment\\\">// 아무런 정의가 없는 타입</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이처럼 우측에 정의가 되지 않은 타입을 팬텀 타입이라고 부른다. 별도로 타입을 정의할 수 없는 언어는 빈 클래스를 사용할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// Kotlin</span>\\n<span class=\\\"token keyword\\\">class</span> Phantom <span class=\\\"token comment\\\">// 아무런 내용이 없는 클래스</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"얼핏 무의미한 코드로 보이지만 나름대로 사용처가 있다. 주로 \", React.createElement(_components.strong, null, \"특정 타입에 대한 하위 타입으로 구분\"), \"할 때 많이 쓰인다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> Meters\\n<span class=\\\"token keyword\\\">class</span> Kilometers\\n\\n<span class=\\\"token keyword\\\">class</span> Distance<span class=\\\"token operator\\\">&lt;</span>Unit<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Double<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> Distance<span class=\\\"token operator\\\">&lt;</span>Meters<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toKilometers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Distance<span class=\\\"token operator\\\">&lt;</span>Kilometers<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Distance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> Distance<span class=\\\"token operator\\\">&lt;</span>Kilometers<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMeters</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Distance<span class=\\\"token operator\\\">&lt;</span>Meters<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Distance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> distanceInMeters <span class=\\\"token operator\\\">=</span> Distance<span class=\\\"token operator\\\">&lt;</span>Meters<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5000.0</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> distanceInKilometers <span class=\\\"token operator\\\">=</span> distanceInMeters<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toKilometers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Distance in kilometers: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">distanceInKilometers<span class=\\\"token punctuation\\\">.</span>value</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 5.0</span>\\n\\n<span class=\\\"token keyword\\\">val</span> distanceInKilometers2 <span class=\\\"token operator\\\">=</span> Distance<span class=\\\"token operator\\\">&lt;</span>Kilometers<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3.0</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> distanceInMeters2 <span class=\\\"token operator\\\">=</span> distanceInKilometers2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMeters</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Distance in meters: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">distanceInMeters2<span class=\\\"token punctuation\\\">.</span>value</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 3000.0</span>\\n\\n<span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token keyword\\\">val</span> invalid <span class=\\\"token operator\\\">=</span> distanceInMeters<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMeters</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Distance</code>\"\n    }\n  }), \" 클래스는 제네릭을 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Meters</code>\"\n    }\n  }), \" 타입과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Kilometers</code>\"\n    }\n  }), \" 타입을 구분하면서도 하나로 추상화하기 위한 방법으로 팬텀 타입을 사용하고 있다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Distance</code>\"\n    }\n  }), \" 클래스는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Meters</code>\"\n    }\n  }), \" 타입과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Kilometers</code>\"\n    }\n  }), \" 타입을 구분하여 사용할 수 있다. 또한, 제네릭의 공변성으로 인해 두 타입은 서로 다른 타입으로 취급되기 때문에 컴파일러의 보호를 받을 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 이용하여 별도의 값 없이 객체에 상태를 부여하는 것도 가능하다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> Draft\\n<span class=\\\"token keyword\\\">class</span> Published\\n\\n<span class=\\\"token keyword\\\">class</span> Document<span class=\\\"token operator\\\">&lt;</span>State<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> content<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>draftDocument<span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Draft<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Published<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Publishing document: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">content</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Document</span><span class=\\\"token punctuation\\\">(</span>draftDocument<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">edit</span><span class=\\\"token punctuation\\\">(</span>publishedDocument<span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Published<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Document<span class=\\\"token operator\\\">&lt;</span>Draft<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Start editing document: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">content</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Document</span><span class=\\\"token punctuation\\\">(</span>publishedDocument<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">val</span> draftDocument <span class=\\\"token operator\\\">=</span> Document<span class=\\\"token operator\\\">&lt;</span>Draft<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Hello, world!\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> publishedDocument <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>draftDocument<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">val</span> editingDocument <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">edit</span><span class=\\\"token punctuation\\\">(</span>publishedDocument<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token keyword\\\">val</span> invalid <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">edit</span><span class=\\\"token punctuation\\\">(</span>editingDocument<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"여기까지 정리하자면 즉, 팬텀 타입을 통해 \", React.createElement(_components.strong, null, \"하나의 타입에서 파생되는 복수의 하위 타입을 만드는 것이 가능\"), \"하다. 앞서 \", React.createElement(_components.a, {\n    href: \"#%EA%B0%80%EB%8F%85%EC%84%B1%EA%B3%BC-%EB%9F%B0%ED%83%80%EC%9E%84-%EC%95%88%EC%A0%95%EC%84%B1-%EC%B1%99%EA%B8%B0%EA%B8%B0\"\n  }, \"타입으로 가독성과 런타임 안정성 챙기기\"), \"를 다룰 때 단순히 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \"으로 타입을 이용하지 않고 별도로 이름을 붙여서 사용했다. 다만, 비슷한 사례가 생기면 또 비슷한 타입을 만들어야 한다는 문제가 있다. 이를 해결하기 위해 팬텀 타입을 사용할 수 있다. 마지막으로 다음 예제 하나를 더 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">value <span class=\\\"token keyword\\\">class</span> Id<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> uuid<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span> uuid\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">User</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Id<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> name<span class=\\\"token operator\\\">:</span> String\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Post</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> id<span class=\\\"token operator\\\">:</span> Id<span class=\\\"token operator\\\">&lt;</span>Post<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> userId<span class=\\\"token operator\\\">:</span> Id<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> title<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">val</span> content<span class=\\\"token operator\\\">:</span> String\\n<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">UserId</code>\"\n    }\n  }), \" 같은 타입을 만들지 않고 제네릭을 이용하여 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스를 정의한 것을 볼 수 있다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">T</code>\"\n    }\n  }), \"는 아무런 의미가 없는 팬텀 타입이다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">User</code>\"\n    }\n  }), \" 타입을 가리키는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id&lt;User></code>\"\n    }\n  }), \" 타입과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Post</code>\"\n    }\n  }), \" 타입을 가리키는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id&lt;Post></code>\"\n    }\n  }), \" 타입을 구분할 수 있다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Id</code>\"\n    }\n  }), \" 클래스는 다양한 타입을 가리킬 수 있으며 이를 통해 코드 중복을 줄일 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"유니온-타입을-이용한-행동-제한\"\n  }, React.createElement(_components.a, {\n    href: \"#유니온-타입을-이용한-행동-제한\"\n  }, \"유니온 타입을 이용한 행동 제한\")), \"\\n\", React.createElement(_components.p, null, \"유니온 타입(Union Type)을 이용하면 \", React.createElement(_components.strong, null, \"두 개 이상의 타입을 하나로 묶어서 사용\"), \"할 수 있다. 예를 들어 다음 TypeScript 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Fruit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Apple\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"Banana\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"Orange\\\"</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Fruit</code>\"\n    }\n  }), \" 타입을 선언하고 이 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Apple</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Banana</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Orange</code>\"\n    }\n  }), \" 세 가지 타입 중 하나를 가질 수 있다는 것을 의미한다. 참고로 TypeScript에 익숙하지 않다면 값으로 보이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Apple</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Banana</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Orange</code>\"\n    }\n  }), \"이 타입이 될 수 있다는 것이 이해하기 어려울 수 있다. 이는 TypeScript에서 리터럴 타입(Literal Type)이라고 불리는 타입으로 TypeScript에선 하나의 값을 타입으로 사용할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 이용하여 행동을 제한하는 것이 가능하다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">State</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'loading'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">|</span> \\n  <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">|</span> \\n  <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> state<span class=\\\"token operator\\\">:</span> State <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'loading'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> message<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'Error!'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드를 보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">State</code>\"\n    }\n  }), \" 타입은 세 타입 중 하나를 가질 수 있다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">State</code>\"\n    }\n  }), \" 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">type</code>\"\n    }\n  }), \" 속성에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">loading</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">success</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">error</code>\"\n    }\n  }), \" 세 가지 리터럴 타입 중 하나를 가질 수 있으며 이를 통해 어떤 타입인지 확인 할 수 있다. 이를 통해 접근할 수 있는 속성을 제한하여 개발자의 행동을 통제하는 것이 가능하다. 참고로 엄밀히 따지면 위 코드에서 사용된 유니온 타입은 서로소 유니온 타입(Disjoint Union Type)이라고 불린다.\"), \"\\n\", React.createElement(_components.p, null, \"아쉽게도 유니온 타입을 지원하지 않는 언어가 많다. 다만, 서로소 유니온 타입은 합 타입(Sum Type)을 지원하는 언어라면 구현할 수 있다. 예를 들어, 합 타입을 지원하는 언어인 Kotlin은 다음과 같이 구현할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">interface</span> State <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Loading<span class=\\\"token operator\\\">:</span> State\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> Success<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> <span class=\\\"token keyword\\\">data</span><span class=\\\"token operator\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> State\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> message<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> State\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> state<span class=\\\"token operator\\\">:</span> State <span class=\\\"token operator\\\">=</span> State<span class=\\\"token punctuation\\\">.</span>Loading\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> <span class=\\\"token keyword\\\">data</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  state <span class=\\\"token operator\\\">=</span> State<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Success</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">data</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> State<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Error!\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token keyword\\\">is</span> State<span class=\\\"token punctuation\\\">.</span>Success<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"최소-타입을-이용한-todo-처리\"\n  }, React.createElement(_components.a, {\n    href: \"#최소-타입을-이용한-todo-처리\"\n  }, \"최소 타입을 이용한 TODO 처리\")), \"\\n\", React.createElement(_components.p, null, \"최소 타입(Bottom Type)\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-2\",\n    id: \"user-content-fnref-2\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"2\")), \"은 \", React.createElement(_components.strong, null, \"모든 타입의 하위 타입이며 아무런 값도 가질 수 없는 타입\"), \"이다. 이는 \", React.createElement(_components.strong, null, \"실행할 수 없는 코드를 표현\"), \"하는 데 사용할 수 있다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Nothing <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드에서 구현한 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fail</code>\"\n    }\n  }), \" 함수는 실행하면 무조건 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">IllegalArgumentException</code>\"\n    }\n  }), \"을 던지는 함수다. 이 함수가 반환하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nothing</code>\"\n    }\n  }), \" 타입이 바로 최소 타입이다. 이를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fail</code>\"\n    }\n  }), \" 함수는 실행할 수 없는 코드를 표현하는 데 사용할 수 있다. 참고로 Kotlin에선 비슷한 역할을 하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TODO()</code>\"\n    }\n  }), \" 함수를 제공한다.\"), \"\\n\", React.createElement(_components.p, null, \"최소 타입을 지원하는 다른 언어 중 하나로 TypeScript가 있다. TypeScript에선 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">never</code>\"\n    }\n  }), \"라는 이름으로 제공한다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token constant\\\">TODO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">never</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Not implemented yet\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserService</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getUser</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> User <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">TODO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 Kotlin 예시처럼 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TODO</code>\"\n    }\n  }), \" 함수를 통해 아직 구현되지 않은 코드를 표현할 수 있다. 이를 통해 개발자는 일단 필요한 함수를 선언하고 이후 구현할 수 있게 된다. 그런 일은 없어야겠지만 만약 구현을 하지 않은 채 배포했다면 바로 에러가 발생하므로 금방 알 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입을-이용한-유한-상태-머신-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#타입을-이용한-유한-상태-머신-구현\"\n  }, \"타입을 이용한 유한 상태 머신 구현\")), \"\\n\", React.createElement(_components.p, null, \"유한 상태 머신(Finite State Machine)은 상태(State)와 이벤트(Event)를 통해 상태를 전이(Transition)하는 것을 말한다. 타입을 이용하면 \", React.createElement(_components.strong, null, \"컴파일 시간에 상태 전이를 검증\"), \"할 수 있다. 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 상태와 이벤트를 나타내는 인터페이스</span>\\n<span class=\\\"token keyword\\\">interface</span> State\\n<span class=\\\"token keyword\\\">interface</span> Event<span class=\\\"token operator\\\">&lt;</span>S<span class=\\\"token operator\\\">:</span> State<span class=\\\"token punctuation\\\">,</span> T<span class=\\\"token operator\\\">:</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token operator\\\">:</span> S<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> T\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 팬텀 타입을 이용한 상태 머신 클래스</span>\\n<span class=\\\"token keyword\\\">class</span> StateMachine<span class=\\\"token operator\\\">&lt;</span>S<span class=\\\"token operator\\\">:</span> State<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">val</span> state<span class=\\\"token operator\\\">:</span> S<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token operator\\\">&lt;</span>T <span class=\\\"token operator\\\">:</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>S<span class=\\\"token punctuation\\\">,</span> T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> StateMachine<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">StateMachine</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> SimpleState<span class=\\\"token operator\\\">:</span> State <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Idle<span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">SimpleState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Running<span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">SimpleState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">object</span> Finished<span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">SimpleState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> SimpleEvent<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>SimpleState<span class=\\\"token punctuation\\\">,</span> SimpleState<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">object</span> Start<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>SimpleState<span class=\\\"token punctuation\\\">.</span>Idle<span class=\\\"token punctuation\\\">,</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Running<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Idle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Running</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Starting...\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Running\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">object</span> Stop<span class=\\\"token operator\\\">:</span> Event<span class=\\\"token operator\\\">&lt;</span>SimpleState<span class=\\\"token punctuation\\\">.</span>Running<span class=\\\"token punctuation\\\">,</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Finished<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">perform</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Running<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> SimpleState<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Finished</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Stopping...\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span> SimpleState<span class=\\\"token punctuation\\\">.</span>Finished\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 초기 상태</span>\\n<span class=\\\"token keyword\\\">val</span> idleMachine <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">StateMachine</span><span class=\\\"token punctuation\\\">(</span>SimpleState<span class=\\\"token punctuation\\\">.</span>Idle<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Initial state: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">idleMachine<span class=\\\"token punctuation\\\">.</span>state</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// Running 상태로 전이</span>\\n<span class=\\\"token keyword\\\">val</span> runningMachine <span class=\\\"token operator\\\">=</span> idleMachine<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>SimpleEvent<span class=\\\"token punctuation\\\">.</span>Start<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"After starting: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">runningMachine<span class=\\\"token punctuation\\\">.</span>state</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// Finished 상태로 전이</span>\\n<span class=\\\"token keyword\\\">val</span> finishedMachine <span class=\\\"token operator\\\">=</span> runningMachine<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>SimpleEvent<span class=\\\"token punctuation\\\">.</span>Stop<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"After stopping: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">finishedMachine<span class=\\\"token punctuation\\\">.</span>state</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 에러 발생</span>\\n<span class=\\\"token keyword\\\">val</span> invalidTransition <span class=\\\"token operator\\\">=</span> idleMachine<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transition</span><span class=\\\"token punctuation\\\">(</span>SimpleEvent<span class=\\\"token punctuation\\\">.</span>Stop<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 언급한 합 타입과 팬텀 타입을 이용하여 상태 머신을 구현하면 컴파일 시간에 상태 전이를 검증할 수 있다. 이를 통해 상태 머신을 구현할 때 런타임에 발생할 수 있는 오류를 컴파일 시간에 미리 방지할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"의존-타입으로-검증하기\"\n  }, React.createElement(_components.a, {\n    href: \"#의존-타입으로-검증하기\"\n  }, \"의존 타입으로 검증하기\")), \"\\n\", React.createElement(_components.p, null, \"의존 타입(Dependent Type)은 대부분의 언어에선 보기 힘든 개념이다. 필자는 예전에 \", React.createElement(_components.a, {\n    href: \"https://www.idris-lang.org/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Idris\"), \"라는 언어를 통해 이 개념을 처음 접했고 이 글을 쓰며 \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Dependent_type#Comparison_of_languages_with_dependent_types\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"지원하는 언어\"), \"를 찾아봤지만 대부분은 처음 들어보는 언어였다. 따라서 굳이 알아야하는 개념은 아니지만 타입 시스템을 고도로 활용하면 이런 개념까지도 가능하다라는 것을 알리기 위해 간단하게 소개해볼 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"의존 타입은 \", React.createElement(_components.strong, null, \"타입이 다른 타입에 의존하는 타입\"), \"을 말한다. 예를 들어 다음 코드를 살펴보자.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"idris\\\"><pre class=\\\"language-idris\\\"><code class=\\\"language-idris\\\"><span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Nat</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token keyword\\\">where</span>\\n  <span class=\\\"token constant\\\">Nil</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token constant\\\">Z</span> <span class=\\\"token hvariable\\\">a</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">::</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token hvariable\\\">n</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">S</span> <span class=\\\"token hvariable\\\">n</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">a</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 코드는 Idris로 작성된 코드다. 낯선 코드지만 간단히 설명하자면 Idris는 일급 타입(First Class Type)이라는 기능을 지원하기에 인자나 반환 값으로 타입을 지정하는 것이 가능하다. 코드를 살펴보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Type</code>\"\n    }\n  }), \"이라는 것을 인자로 받고 반환하는데, 이는 타입을 받아 새로운 타입으로 반환할 수 있다는 것을 의미한다. 이 기능을 통해 Idris에서 유한 집합 타입을 정의하는 것이 가능하다.\"), \"\\n\", React.createElement(_components.p, null, \"하나씩 살펴보면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nat</code>\"\n    }\n  }), \" 타입은 자연수를 의미하고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nat -> Type -> Type</code>\"\n    }\n  }), \"은 자연수와 타입을 받아 새로운 타입을 반환하는 함수를 의미한다. 참고로 조금 혼란스러울 수 있지만 커링되어 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Vect(5)(Nat)</code>\"\n    }\n  }), \"처럼 받는다고 생각하면 된다. 이어서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">where</code>\"\n    }\n  }), \"는 함수 내부에서 지역적으로 함수나 값을 정의하는 데 사용된다. 따라서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nil</code>\"\n    }\n  }), \"은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nat</code>\"\n    }\n  }), \"가 Z(0을 의미)인 경우를 나타내고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \"는 연산자처럼 사용되어 원소를 추가하는 데 사용된다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \"는 재귀적으로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Vect</code>\"\n    }\n  }), \" 타입을 만들어내기 때문에 마지막에는 반드시 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nil</code>\"\n    }\n  }), \"을 넣어줘야 한다. 조금 차이가 있긴 하지만 이에 대한 동작 방식이 궁금하다면 필자가 예전에 작성한 아티클인 \", React.createElement(_components.a, {\n    href: \"https://kciter.so/posts/functional-data-structure/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"함수형 자료구조\"), \"를 참고해보자.\"), \"\\n\", React.createElement(_components.p, null, \"아무튼 다음과 같이 재귀적으로 고정 길이가 10이며 자연수를 받는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Vect</code>\"\n    }\n  }), \" 타입을 만들 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"idris\\\"><pre class=\\\"language-idris\\\"><code class=\\\"language-idris\\\"><span class=\\\"token hvariable\\\">vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token constant\\\">Nat</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"만약 합계를 구해주는 프로그램을 만든다면 다음과 같이 작성할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"idris\\\"><pre class=\\\"language-idris\\\"><code class=\\\"language-idris\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Main</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Nat</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">Type</span> <span class=\\\"token keyword\\\">where</span>\\n  <span class=\\\"token constant\\\">Nil</span>  <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token constant\\\">Z</span> <span class=\\\"token hvariable\\\">a</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">::</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token hvariable\\\">k</span> <span class=\\\"token hvariable\\\">a</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">S</span> <span class=\\\"token hvariable\\\">k</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">a</span>\\n\\n<span class=\\\"token hvariable\\\">vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token constant\\\">Nat</span>\\n<span class=\\\"token hvariable\\\">vect</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Nil</span>\\n<span class=\\\"token comment\\\">-- 만약 타입에 정의한 길이와 다르면 컴파일 에러가 발생한다</span>\\n<span class=\\\"token comment\\\">-- vect = 1 :: 2 :: 3 :: 4 :: Nil</span>\\n\\n<span class=\\\"token comment\\\">-- 패턴 매칭으로 구현된 함수</span>\\n<span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">Vect</span> <span class=\\\"token hvariable\\\">n</span> <span class=\\\"token constant\\\">Nat</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Nat</span>\\n<span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token constant\\\">Nil</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token hvariable\\\">xs</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token hvariable\\\">xs</span>\\n\\n<span class=\\\"token comment\\\">-- 메인 함수에서 15 출력</span>\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">IO</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">putStrLn</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">show</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">sum_vect</span> <span class=\\\"token hvariable\\\">vect</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"앞서 \", React.createElement(_components.a, {\n    href: \"#%EA%B0%80%EB%8F%85%EC%84%B1%EA%B3%BC-%EB%9F%B0%ED%83%80%EC%9E%84-%EC%95%88%EC%A0%95%EC%84%B1-%EC%B1%99%EA%B8%B0%EA%B8%B0\"\n  }, \"가독성과 런타임 안정성 챙기기\"), \"에선 별도 타입을 정의하여 런타임에 검증하는 방법을 소개했다. 만약 타입 시스템이 이정도로 강력하다면 보통 런타임에 검증할 것을 컴파일 시간에 검증하는 것까지도 가능하다. 너무 과한 기능인 것은 사실이지만 타입 시스템이 어디까지 강력해질 수 있는지 보여주는 사례라고 볼 수 있다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"타입-주도-개발\"\n  }, React.createElement(_components.a, {\n    href: \"#타입-주도-개발\"\n  }, \"타입 주도 개발\")), \"\\n\", React.createElement(_components.p, null, \"그럼 이번에는 앞서 배운 것을 활용하여 타입 시스템을 풍부하게 사용할 수 있도록 개발하는 \", React.createElement(_components.strong, null, \"타입 주도 개발\"), React.createElement(\"sup\", null, \"Type-Driven Development\"), \"에 대해 알아보자. 타입 주도 개발은 다른 무언가를 먼저 정의하고 시작하는 XXX 주도 개발과 마찬가지로 \", React.createElement(_components.strong, null, \"타입을 먼저 정의하고 이를 통해 코드를 작성\"), \"하는 방법론이다.\"), \"\\n\", React.createElement(_components.p, null, \"참고로 타입 주도 개발은 함수 구현처럼 아주 작은 부분에 적용할 수 있는 방법론이다. 따라서 다른 테스트 주도 개발과 같은 다른 개발 방법론과 함께 사용할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"타입을-먼저-정의하기\"\n  }, React.createElement(_components.a, {\n    href: \"#타입을-먼저-정의하기\"\n  }, \"타입을 먼저 정의하기\")), \"\\n\", React.createElement(_components.p, null, \"프로그램은 일련의 절차를 통해 원하는 결과를 만들어 낸다. 이때 각 절차는 입력 데이터를 받아 특정 로직을 수행하고 결과를 반환한다. 다양한 패러다임으로 프로그램을 작성할 수 있지만 절차를 통해 원하는 결과를 만들어 낸다는 것 하나는 변하지 않는다. 따라서 타입 주도 개발은 원한다면 어디에도 적용할 수 있으며 각 절차에 대한 결과를 타입으로 정의하는 것으로 시작한다.\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-3\",\n    id: \"user-content-fnref-3\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"3\"))), \"\\n\", React.createElement(_components.p, null, \"타입을 먼저 정의한다는 것은 우리가 원하는 로직을 구체적으로 작성하기 전에 타입으로 추상화한다는 것과 같다. 연습을 위해 프로그래머스의 \", React.createElement(_components.a, {\n    href: \"https://school.programmers.co.kr/learn/courses/30/lessons/120902\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"문자열 계산하기\"), \" 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다.\"), \"\\n\", React.createElement(_components.p, null, \"이 각각의 과정에서 입력과 출력을 타입으로 나타낼 수 있다. 이말은 즉, \", React.createElement(_components.strong, null, \"타입을 통해 로직을 추상화 하는 것이 가능하다\"), \"라는 뜻이다. 이러한 사고가 타입 주도 개발의 핵심이라 볼 수 있다. 연습을 위해 프로그래머스의 \", React.createElement(_components.a, {\n    href: \"https://school.programmers.co.kr/learn/courses/30/lessons/120902\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"문자열 계산하기\"), \" 문제를 풀어보자. 문제의 요구사항을 요약하면 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열로 이루어진 수식을 입력으로 제공한다.\"), \"\\n\", React.createElement(_components.li, null, \"연산자는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">+</code>\"\n    }\n  }), \"와 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-</code>\"\n    }\n  }), \"만 존재한다.\"), \"\\n\", React.createElement(_components.li, null, \"피연산자는 자연수만 존재한다.\"), \"\\n\", React.createElement(_components.li, null, \"잘못된 수식은 주어지지 않는다.\"), \"\\n\", React.createElement(_components.li, null, \"숫자와 연산자는 공백으로 구분한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"먼저 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입을 받아 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \"로 반환하는 함수가 필요하다는 것을 떠올릴 수 있다. 이는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Int</code>\"\n    }\n  }), \"와 같이 표현이 가능하다. 요구사항을 기반으로 로직을 더 구체화 해보면 다음과 같은 로직이 필요하다는 것을 알 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열을 숫자와 연산자로 분리한다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자를 숫자로 변환한다.\"), \"\\n\", React.createElement(_components.li, null, \"문자를 연산자로 변환한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"문자가 숫자인지 연산자인지 판단한다.\"), \"\\n\", React.createElement(_components.li, null, \"문자열을 계산한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"먼저 각 키워드를 타입으로 추상화하면 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Char</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"숫자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"연산자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"부호 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"판단 결과 -> \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Boolean</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"계산 결과 -> \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"도메인-반영하기\"\n  }, React.createElement(_components.a, {\n    href: \"#도메인-반영하기\"\n  }, \"도메인 반영하기\")), \"\\n\", React.createElement(_components.p, null, \"문제가 간단하여 도메인이라 부르기에 빈약하지만 엄밀히 따져 연산자와 부호는 같은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \"이지만 의미가 다르다. 따라서 이를 구분하기 위해 다른 타입으로 정의하는 것이 좋다. 다시 한 번 각 키워드를 타입으로 추상화하면 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Token</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"숫자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Number</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"연산자 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Operator</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"부호 → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Sign</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"요구사항을 다시 확인하면 문자(Token)는 숫자(Number) 혹은 연산자(Operator) 둘 중 하나이므로 문자의 하위 타입으로 볼 수 있다. 그리고 숫자는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Int</code>\"\n    }\n  }), \" 타입으로 표현되고 연산자는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Sign</code>\"\n    }\n  }), \" 타입으로 표현된다. 이를 코드로 나타내면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 부호</span>\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> Sign <span class=\\\"token punctuation\\\">{</span>\\n  PLUS<span class=\\\"token punctuation\\\">,</span> MINUS\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 토큰</span>\\n<span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">interface</span> Token<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> T\\n\\n  <span class=\\\"token comment\\\">// 숫자 토큰</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Token<span class=\\\"token operator\\\">&lt;</span>Int<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token comment\\\">// 연산자 토큰</span>\\n  <span class=\\\"token keyword\\\">data</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">val</span> value<span class=\\\"token operator\\\">:</span> Sign<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Token<span class=\\\"token operator\\\">&lt;</span>Sign<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"함수를-타입으로-추상화하기\"\n  }, React.createElement(_components.a, {\n    href: \"#함수를-타입으로-추상화하기\"\n  }, \"함수를 타입으로 추상화하기\")), \"\\n\", React.createElement(_components.p, null, \"이번에는 각 로직을 타입으로 추상화해보자.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열을 숫자와 연산자로 분리한다. \", React.createElement(\"br\"), \"\\n  → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> List&lt;Token></code>\"\n    }\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자를 숫자로 변환한다. \", React.createElement(\"br\"), \"\\n  → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Number</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자를 연산자로 변환한다. \", React.createElement(\"br\"), \"\\n  → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Operator</code>\"\n    }\n  })), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"문자가 숫자인지 연산자인지 판단한다. \", React.createElement(\"br\"), \"\\n  → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Boolean</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"문자열을 계산한다 \", React.createElement(\"br\"), \"\\n  → \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(String) -> Int</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"분해한 로직을 합쳐 로직 파이프라인을 만들면 다음과 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">// 문자가 숫자인지 연산자인지 판단한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token operator\\\">=</span>\\n  token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toIntOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span>\\n\\n<span class=\\\"token comment\\\">// 문자를 숫자로 변환한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span>\\n  token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 문자를 연산자로 변환한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Sign <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span> <span class=\\\"token operator\\\">-></span> Sign<span class=\\\"token punctuation\\\">.</span>PLUS\\n    <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span> <span class=\\\"token operator\\\">-></span> Sign<span class=\\\"token punctuation\\\">.</span>MINUS\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Unknown operator: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">token</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 문자열을 숫자와 연산자 문자로 분리한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span>Token<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span>\\n  input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\" \\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> token <span class=\\\"token operator\\\">-></span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 문자열을 계산한다.</span>\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> tokens <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n  <span class=\\\"token keyword\\\">var</span> sign <span class=\\\"token operator\\\">=</span> Sign<span class=\\\"token punctuation\\\">.</span>PLUS\\n\\n  tokens<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span> <span class=\\\"token punctuation\\\">{</span> token <span class=\\\"token operator\\\">-></span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> Token<span class=\\\"token punctuation\\\">.</span>Number <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>sign<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          Sign<span class=\\\"token punctuation\\\">.</span>PLUS <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n            result <span class=\\\"token operator\\\">+=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n          <span class=\\\"token punctuation\\\">}</span>\\n          Sign<span class=\\\"token punctuation\\\">.</span>MINUS <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n            result <span class=\\\"token operator\\\">-=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">is</span> Token<span class=\\\"token punctuation\\\">.</span>Operator <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        sign <span class=\\\"token operator\\\">=</span> token<span class=\\\"token punctuation\\\">.</span>value\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"9 - 4 - 1 + 2 + 6\\\"</span></span>\\n  <span class=\\\"token keyword\\\">val</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 12</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"참고로 함수 정의는 요구사항에 대한 해석이나 패러다임에 따라 다를 수 있다. 따라서 같은 로직을 작성하더라도 위 코드와 다른 로직이 나올 수 있으므로 틀렸다고 생각하지 말자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"테스트-코드와-함께하기\"\n  }, React.createElement(_components.a, {\n    href: \"#테스트-코드와-함께하기\"\n  }, \"테스트 코드와 함께하기\")), \"\\n\", React.createElement(_components.p, null, \"타입을 먼저 정의한다는 점에서 테스트 주도 개발과도 잘 어울린다. 테스트 주도 개발은 이미 유명한 방법론이지만 설명하자면 \", React.createElement(_components.strong, null, \"만들어야 할 기능의 테스트를 먼저 작성하고 이를 통과하는 코드를 작성하는 방법론\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, \"입력과 출력 결과를 미리 정의하고 코드를 작성한다는 점에서 타입 주도 개발과 테스트 주도 개발은 유사하다. 그만큼 궁합도 좋은데 타입 주도 개발이 타입 시스템을 이용하여 컴파일 시간에 미리 안정성을 체크할 수 있다면 테스트 주도 개발은 타입만으로는 잡아낼 수 없는 오류나 예외 상황을 테스트 코드를 통해 잡아낼 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"테스트 코드를 작성하는 시점은 입력과 출력을 정의하는 \", React.createElement(_components.a, {\n    href: \"#%ED%95%A8%EC%88%98%EB%A5%BC-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94%ED%95%98%EA%B8%B0\"\n  }, \"함수를 타입으로 추상화하기\"), \"까지 진행한 후가 좋다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> CalculatorTest <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testIsNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assertTrue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"123\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">assertFalse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testToNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">toNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"123\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testToSign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>Sign<span class=\\\"token punctuation\\\">.</span>PLUS<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">toSign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testTokenize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"9 - 4\\\"</span></span>\\n    <span class=\\\"token keyword\\\">val</span> expected <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span>\\n      Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Operator</span><span class=\\\"token punctuation\\\">(</span>Sign<span class=\\\"token punctuation\\\">.</span>MINUS<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      Token<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>expected<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">tokenize</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation builtin\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">testCalculate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"9 - 4 - 1 + 2 + 6\\\"</span></span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">calculate</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"타입 시스템은 개발자에게 있어 아낌없이 주는 든든한 친구다. 문제를 미연에 방지할 수 있게 해주며 가독성까지 챙길 수 있게 해준다. 타입이라는 개념과 친해질 수록 타입 시스템을 풍부하게 사용할 수 있게 되고, 이는 코드의 안정성과 가독성을 높여준다. 이 글에서 소개하는 타입 주도 개발은 타입과 친해지기 좋은 연습 방법이 될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"다만 일일히 타입의 정의하여 타입이 너무 많아지거나 타입의 정의가 복잡해지면 오히려 코드를 작성하기 힘들어지거나 가독성을 떨어뜨릴 수 있다. 따라서 항상 적절한 상태를 유지하는 것이 중요하다.\"), \"\\n\", React.createElement(_components.p, null, \"그리고 설계자의 입장에 타입 시스템을 활용한다는 것은 다른 개발자를 위한 코드 규칙을 만드는 것과 같다. 설계자는 이를 적절하게 이용하여 안전하면서 편리한 코드를 작성할 수 있게 간접적으로 코드 규칙을 만들 수 있다. 이점을 고려하여 꼭 설계자가 아니더라도 다른 개발자가 안전한 코드를 작성할 수 있도록 타입을 이용한 규칙을 만들어보자.\"), \"\\n\", React.createElement(_components.section, {\n    \"data-footnotes\": true,\n    className: \"footnotes\"\n  }, React.createElement(_components.h2, {\n    className: \"sr-only\",\n    id: \"footnote-label\"\n  }, React.createElement(_components.a, {\n    href: \"#footnote-label\"\n  }, \"Footnotes\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-1\"\n  }, \"\\n\", React.createElement(_components.p, null, \"참고로 외래어 표기법으로는 지네릭이라 표기하지만 온라인 한글 문서 대부분 제네릭이라 표기하므로 이 글에서도 제네릭이라 표기한다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-1\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-2\"\n  }, \"\\n\", React.createElement(_components.p, null, \"최소 타입이라는 번역은 '타입으로 견고하게 다형성으로 유연하게'라는 책에서 사용한 번역이다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-2\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-3\"\n  }, \"\\n\", React.createElement(_components.p, null, \"다만 함수형 패러다임과 궁합이 좋다는 것은 부정할 수 없다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-3\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","span","blockquote","h1","a","h2","ul","li","sup","section","ol","_provideComponents","components","React","dangerouslySetInnerHTML","__html","id","href","Image","src","caption","width","rel","className","wrapper","MDXLayout","_ref","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body"],"sourceRoot":""}