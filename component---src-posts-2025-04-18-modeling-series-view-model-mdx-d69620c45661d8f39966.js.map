{"version":3,"file":"component---src-posts-2025-04-18-modeling-series-view-model-mdx-d69620c45661d8f39966.js","mappings":"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","sources":["webpack://kciter.so/./src/posts/2025-04-18-modeling-series-view-model.mdx","webpack://kciter.so/./src/components/Image/index.tsx","webpack://kciter.so/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"들어가며\"\n  }, React.createElement(_components.a, {\n    href: \"#들어가며\"\n  }, \"들어가며\")), \"\\n\", React.createElement(_components.p, null, \"모델링 시리즈의 첫 번째 주제는 뷰모델(ViewModel)이다. 우리는 흔히 API를 만들 때, 사용자가 보게 될 화면(View)에 어떤 데이터를 보여줄지 고민한다. 이때 단순히 데이터를 전달하는 것이 아니라, \", React.createElement(_components.strong, null, \"화면을 구성하는 데 필요한 정보들을 어떻게 구조화해서 전달할지\"), \"를 결정하는 것이 바로 뷰모델을 설계하는 일이다.\"), \"\\n\", React.createElement(_components.p, null, \"대부분의 경우 화면은 서버에서 직접 그려지지 않는다. 우리는 보통 \", React.createElement(_components.strong, null, \"JSON 형태의 응답\"), \"을 내려주고, \", React.createElement(_components.strong, null, \"클라이언트가 그 JSON을 해석해 화면을 구성\"), \"한다. 이 JSON은 단순한 데이터 덩어리가 아니다. \", React.createElement(_components.strong, null, \"'화면의 구조와 상태를 표현하기 위한 모델'\"), \", 즉 \", React.createElement(_components.strong, null, \"뷰모델\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, \"아마 많은 경우 뷰모델을 ‘별도로 설계하고 있다’는 자각 없이, 그냥 DB에서 가져온 도메인 모델을 그대로 넘기거나, DTO로 전달하고 있을지도 모른다. 하지만 우리가 클라이언트에 전달한 JSON을 클라이언트가 어떻게 해석할지 명확하지 않다면, 그건 제대로 설계된 뷰모델이 아니다.\"), \"\\n\", React.createElement(_components.p, null, \"뷰모델이란 결국, **“이 화면이 어떤 구조로 그려져야 하는지에 대한 선언”**이다.\"), \"\\n\", React.createElement(_components.p, null, \"이 글에서는 단순한 데이터 전달을 넘어서, \", React.createElement(_components.strong, null, \"서버가 의도를 담아 '구조를 선언하는 방식'으로 뷰모델을 설계해야 하는 이유\"), \"를 다양한 예시와 함께 살펴보려 한다.\"), \"\\n\", React.createElement(_components.p, null, \"모델링 시리즈의 첫 번째 주제는 바로 뷰 모델(View Model)이다. 우리는 **사용자가 보게 될 화면(View)**을 어떻게 표현할지 고민하고, 그에 맞는 구조화된 데이터를 내려준다.\"), \"\\n\", React.createElement(_components.p, null, \"보통 직접 뷰를 그리는 것이 아니라면 대부분 JSON 형태로 내려준다. 이때 JSON 형태로 내려주는 데이터가 바로 뷰 모델이다. 어쩌면 인지하지 못했을 수도 있다. 하지만 우리가 내려준 JSON 데이터는 어떻게 그려질지 아직 미지수다. 클라이언트는 데이터를 보고 어떻게 그릴지 결정한다. 즉, 뷰에 대한 모델이기 때문에 뷰 모델이다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  maxWidth?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, maxWidth, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  console.log(isExpanded);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width || '100%'}\n        style={{ cursor: expandable ? 'zoom-in' : 'default', maxWidth }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1440,\n                width: '100%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","strong","_provideComponents","components","React","id","href","wrapper","MDXLayout","_ref","src","caption","width","maxWidth","expandable","isExpanded","toggleExpanded","useState","console","log","___EmotionJSX","style","cursor","onClick","undefined","dangerouslySetInnerHTML","__html","ReactDOM","position","top","left","height","backgroundColor","borderRadius","transform","document","body","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}